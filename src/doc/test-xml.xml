<foo>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/admin</xqdoc:uri>
    <xqdoc:name>admin.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for performing admin-centric operations such as managing database users and log data.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="admin" uri="http://basex.org/modules/admin"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns an element sequence with all currently opened sessions, including the user name, address (IP:port) and an optionally opened database.
The output of this function and the <a href="http://docs.basex.org/wiki/Commands#SHOW_SESSIONS">SHOW SESSIONS</a> command is similar.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>admin:sessions</xqdoc:name>
      <xqdoc:signature>declare function admin:sessions() as element(session)* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(session)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns <a href="http://docs.basex.org/wiki/Logging">Logging</a> data compiled by the database or HTTP server: <ul> <li> If no argument is specified, a list of all log files will be returned, including the file size and date. </li> <li> If a <code>$date</code> is specified, the contents of a single log file will be returned. </li> <li> If <code>$merge</code> is set to true, related log entries will be merged. Please note that the merge might not be 100% successful, as log entries may be ambiguous. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>admin:logs</xqdoc:name>
      <xqdoc:signature>declare function admin:logs() as element(file)* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(file)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns <a href="http://docs.basex.org/wiki/Logging">Logging</a> data compiled by the database or HTTP server: <ul> <li> If no argument is specified, a list of all log files will be returned, including the file size and date. </li> <li> If a <code>$date</code> is specified, the contents of a single log file will be returned. </li> <li> If <code>$merge</code> is set to true, related log entries will be merged. Please note that the merge might not be 100% successful, as log entries may be ambiguous. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>admin:logs</xqdoc:name>
      <xqdoc:signature>declare function admin:logs($date as xs:string) as element(entry)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>date</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(entry)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns <a href="http://docs.basex.org/wiki/Logging">Logging</a> data compiled by the database or HTTP server: <ul> <li> If no argument is specified, a list of all log files will be returned, including the file size and date. </li> <li> If a <code>$date</code> is specified, the contents of a single log file will be returned. </li> <li> If <code>$merge</code> is set to true, related log entries will be merged. Please note that the merge might not be 100% successful, as log entries may be ambiguous. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>admin:logs</xqdoc:name>
      <xqdoc:signature>declare function admin:logs($date as xs:string, $merge as xs:boolean) as element(entry)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>date</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>merge</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(entry)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Writes a string to the database logs, along with current user data (timestamp, user name). If the function is called in a web application or a database client, the IP will be logged. Otherwise, the string <code>STANDALONE</code> will be logged.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>admin:write-log</xqdoc:name>
      <xqdoc:signature>declare function admin:write-log($text as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>text</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/archive</xqdoc:uri>
    <xqdoc:name>archive.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to handle archives (including ePub, Open Office, JAR, and many other formats). New ZIP and GZIP archives can be created, existing archives can be updated, and the archive entries can be listed and extracted. The <a href="#archive:extract-binary">archive:extract-binary</a> function includes an example for writing the contents of an archive to disk.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="archive" uri="http://basex.org/modules/archive"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a new archive from the specified entries and contents.
The <code>$entries</code> argument contains meta information required to create new entries. All items may either be of type <code>xs:string</code> , representing the entry name, or <code>element(archive:entry)</code> , containing the name as text node and additional, optional attributes: <ul> <li> <code>last-modified</code>: timestamp, specified as xs:dateTime (default: current time) </li> <li> <code>compression-level</code>: 0-9, 0 = uncompressed (default: 8) </li> <li> <code>encoding</code>: for textual entries (default: UTF-8) </li> </ul>  <p>An example: </p>  <pre class="brush:xml"> &lt;archive:entry last-modified='2011-11-11T11:11:11' compression-level='8' encoding='US-ASCII'&gt;hello.txt&lt;/archive:entry&gt; </pre>  <p>The actual <code>$contents</code> must be <code>xs:string</code> or <code>xs:base64Binary</code> items.
The <code>$options</code> parameter contains archiving options, which can either be specified </p>  <ul> <li> as children of an <code>&lt;archive:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;archive:options&gt; &lt;archive:format value="zip"/&gt; &lt;archive:algorithm value="deflate"/&gt; &lt;/archive:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "format": "zip", "algorithm": "deflate" } </pre>  <p>Currently, the following combinations are supported (all others will be rejected): </p>  <ul> <li> <code>zip</code>: <code>algorithm</code> may be <code>stored</code> or <code>deflate</code> </li> <li> <code>gzip</code>: algorithm may be <code>deflate</code> </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:ARCH0001 the number of entries and contents differs.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0002 the specified option or its value is invalid or not supported.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0003 entry descriptors contain invalid entry names, timestamps or compression levels.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0004 the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0005 the chosen archive format only allows single entries.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
        <xqdoc:error>bxerr:FORG0006 an argument has a wrong type.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:create</xqdoc:name>
      <xqdoc:signature>declare function archive:create($entries as item(), $contents as item()*) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>contents</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a new archive from the specified entries and contents.
The <code>$entries</code> argument contains meta information required to create new entries. All items may either be of type <code>xs:string</code> , representing the entry name, or <code>element(archive:entry)</code> , containing the name as text node and additional, optional attributes: <ul> <li> <code>last-modified</code>: timestamp, specified as xs:dateTime (default: current time) </li> <li> <code>compression-level</code>: 0-9, 0 = uncompressed (default: 8) </li> <li> <code>encoding</code>: for textual entries (default: UTF-8) </li> </ul>  <p>An example: </p>  <pre class="brush:xml"> &lt;archive:entry last-modified='2011-11-11T11:11:11' compression-level='8' encoding='US-ASCII'&gt;hello.txt&lt;/archive:entry&gt; </pre>  <p>The actual <code>$contents</code> must be <code>xs:string</code> or <code>xs:base64Binary</code> items.
The <code>$options</code> parameter contains archiving options, which can either be specified </p>  <ul> <li> as children of an <code>&lt;archive:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;archive:options&gt; &lt;archive:format value="zip"/&gt; &lt;archive:algorithm value="deflate"/&gt; &lt;/archive:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "format": "zip", "algorithm": "deflate" } </pre>  <p>Currently, the following combinations are supported (all others will be rejected): </p>  <ul> <li> <code>zip</code>: <code>algorithm</code> may be <code>stored</code> or <code>deflate</code> </li> <li> <code>gzip</code>: algorithm may be <code>deflate</code> </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:ARCH0001 the number of entries and contents differs.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0002 the specified option or its value is invalid or not supported.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0003 entry descriptors contain invalid entry names, timestamps or compression levels.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0004 the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0005 the chosen archive format only allows single entries.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
        <xqdoc:error>bxerr:FORG0006 an argument has a wrong type.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:create</xqdoc:name>
      <xqdoc:signature>declare function archive:create($entries as item(), $contents as item()*, $options as item()) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>contents</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the entry descriptors of the specified <code>$archive</code> . A descriptor contains the following attributes, provided that they are available in the archive format: <ul> <li> <code>size</code>: original file size </li> <li> <code>last-modified</code>: timestamp, formatted as xs:dateTime </li> <li> <code>compressed-size</code>: compressed file size </li> </ul>  <p>An example: </p>  <pre class="brush:xml"> &lt;archive:entry size="1840" last-modified="2009-03-20T03:30:32" compressed-size="672"&gt; doc/index.html &lt;/archive:entry&gt; </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:entries</xqdoc:name>
      <xqdoc:signature>declare function archive:entries($archive as xs:base64Binary) as element(archive:entry)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(archive:entry)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the options of the specified <code>$archive</code> in the format specified by <a href="#archive:create">archive:create</a> .</xqdoc:description>
        <xqdoc:error>bxerr:ARCH0002 The packing format is not supported.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:options</xqdoc:name>
      <xqdoc:signature>declare function archive:options($archive as xs:base64Binary) as element(archive:options) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(archive:options)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Extracts entries of the specified <code>$archive</code> and returns them as texts.
The returned entries can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).
The encoding of the input files can be specified via <code>$encoding</code> .</xqdoc:description>
        <xqdoc:error>bxerr:ARCH0004 the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:extract-text</xqdoc:name>
      <xqdoc:signature>declare function archive:extract-text($archive as xs:base64Binary) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts entries of the specified <code>$archive</code> and returns them as texts.
The returned entries can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).
The encoding of the input files can be specified via <code>$encoding</code> .</xqdoc:description>
        <xqdoc:error>bxerr:ARCH0004 the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:extract-text</xqdoc:name>
      <xqdoc:signature>declare function archive:extract-text($archive as xs:base64Binary, $entries as item()*) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Extracts entries of the specified <code>$archive</code> and returns them as texts.
The returned entries can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).
The encoding of the input files can be specified via <code>$encoding</code> .</xqdoc:description>
        <xqdoc:error>bxerr:ARCH0004 the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:extract-text</xqdoc:name>
      <xqdoc:signature>declare function archive:extract-text($archive as xs:base64Binary, $entries as item()*, $encoding as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Extracts entries of the specified <code>$archive</code> and returns them as binaries.
The returned entries can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).</xqdoc:description>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:extract-binary</xqdoc:name>
      <xqdoc:signature>declare function archive:extract-binary($archive as xs:base64Binary) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts entries of the specified <code>$archive</code> and returns them as binaries.
The returned entries can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).</xqdoc:description>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:extract-binary</xqdoc:name>
      <xqdoc:signature>declare function archive:extract-binary($archive as xs:base64Binary, $entries as item()*) as xs:base64Binary* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates an updated version of the specified <code>$archive</code> with new or replaced entries.
The format of <code>$entries</code> and <code>$contents</code> is the same as for <a href="#archive:create">archive:create</a> .</xqdoc:description>
        <xqdoc:error>bxerr:ARCH0001 the number of entries and contents differs.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0003 entry descriptors contain invalid entry names, timestamps, compression levels or encodings.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0004 the specified encoding is invalid or not supported, or the string conversion failed. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH0005 the entries of the given archive cannot be modified.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
        <xqdoc:error>bxerr:FORG0006 (some of) the contents are not of type <code>xs:string</code> or <code>xs:base64Binary</code> .</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:update</xqdoc:name>
      <xqdoc:signature>declare function archive:update($archive as xs:base64Binary, $entries as item()*, $contents as item()*) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>contents</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Deletes entries from an <code>$archive</code> .
The format of <code>$entries</code> is the same as for <a href="#archive:create">archive:create</a> .</xqdoc:description>
        <xqdoc:error>bxerr:ARCH0005 the entries of the given archive cannot be modified.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:delete</xqdoc:name>
      <xqdoc:signature>declare function archive:delete($archive as xs:base64Binary, $entries as item()*) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>This convenience function directly writes files of an <code>$archive</code> to the specified directory <code>$path</code> .
The entries to be written can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).</xqdoc:description>
        <xqdoc:error>bxerr:FILE0001 a specified path does not exist.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:write</xqdoc:name>
      <xqdoc:signature>declare function archive:write($path as xs:string, $archive as xs:base64Binary) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>This convenience function directly writes files of an <code>$archive</code> to the specified directory <code>$path</code> .
The entries to be written can be limited via <code>$entries</code> . The format of the argument is the same as for <a href="#archive:create">archive:create</a> (attributes will be ignored).</xqdoc:description>
        <xqdoc:error>bxerr:FILE0001 a specified path does not exist.</xqdoc:error>
        <xqdoc:error>bxerr:ARCH9999 archive creation failed for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>archive:write</xqdoc:name>
      <xqdoc:signature>declare function archive:write($path as xs:string, $archive as xs:base64Binary, $entries as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>archive</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entries</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>x-http://www.w3.org/2005/xpath-functions/array</xqdoc:uri>
    <xqdoc:name>array.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for manipulating arrays, which will officially be introduced with <a href="http://docs.basex.org/wiki/XQuery_3.1#Arrays">XQuery 3.1</a> . <br/>  <b>Please note</b> that the functions are subject to change until the specification has reached its final stage.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="array" uri="x-http://www.w3.org/2005/xpath-functions/array"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the number of members in <code>$array</code> . Note that because an array is an item, the <code>fn:count</code> function when applied to an array always returns <code>1</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:size</xqdoc:name>
      <xqdoc:signature>declare function array:size($input as array(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the <code>$array</code> member at the specified <code>$position</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 <code>$position</code> is not in the range <code>1</code> to <code>array:size($array)</code> inclusive.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:get</xqdoc:name>
      <xqdoc:signature>declare function array:get($array as array(*), $position as xs:integer) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>position</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a copy of <code>$array</code> with a new <code>$member</code> attached.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:append</xqdoc:name>
      <xqdoc:signature>declare function array:append($array as array(*), $member as item()*) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>member</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Constructs a new array with with <code>$length</code> members of <code>$array</code> beginning from the specified <code>$position</code> .
The two-argument version of the function returns the same result as the three-argument version when called with <code>$length</code> equal to the value of <code>array:size($array) - $position + 1</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 <code>$position</code> is less than one, or if <code>$position + $length</code> is greater than <code>array:size($array) + 1</code> .</xqdoc:error>
        <xqdoc:error>:FOAY0002 <code>$length</code> is less than zero.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:subarray</xqdoc:name>
      <xqdoc:signature>declare function array:subarray($array as array(*), $position as xs:integer) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>position</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Constructs a new array with with <code>$length</code> members of <code>$array</code> beginning from the specified <code>$position</code> .
The two-argument version of the function returns the same result as the three-argument version when called with <code>$length</code> equal to the value of <code>array:size($array) - $position + 1</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 <code>$position</code> is less than one, or if <code>$position + $length</code> is greater than <code>array:size($array) + 1</code> .</xqdoc:error>
        <xqdoc:error>:FOAY0002 <code>$length</code> is less than zero.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:subarray</xqdoc:name>
      <xqdoc:signature>declare function array:subarray($array as array(*), $position as xs:integer, $length as xs:integer) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>position</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>length</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a copy of <code>$array</code> without the member at the specified <code>$position</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 <code>$position</code> is not in the range <code>1</code> to <code>array:size($array)</code> inclusive.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:remove</xqdoc:name>
      <xqdoc:signature>declare function array:remove($array as array(*), $position as xs:integer) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>position</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns a copy of <code>$array</code> with one new <code>$member</code> at the specified <code>$position</code> . Setting <code>$position</code> to the value <code>array:size($array) + 1</code> yields the same result as <code>array:append($array, $insert)</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 <code>$position</code> is not in the range <code>1</code> to <code>array:size($array) + 1</code> inclusive.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:insert-before</xqdoc:name>
      <xqdoc:signature>declare function array:insert-before($array as array(*), $position as xs:integer, $member as item()*) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>position</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>member</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the first member of <code>$array</code> . This function is equivalent to the expression <code>$array(1)</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 The array is empty.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:head</xqdoc:name>
      <xqdoc:signature>declare function array:head($array as array(*)) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array with all members except the first from <code>$array</code> . This function is equivalent to the expression <code>array:remove($array, 1)</code> .</xqdoc:description>
        <xqdoc:error>:FOAY0001 The array is empty.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>array:tail</xqdoc:name>
      <xqdoc:signature>declare function array:tail($array as array(*)) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array with all members of <code>$array</code> in reverse order.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:reverse</xqdoc:name>
      <xqdoc:signature>declare function array:reverse($array as array(*)) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Concatenates the contents of several <code>$arrays</code> into a single array.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:join</xqdoc:name>
      <xqdoc:signature>declare function array:join($arrays as (array(*))*) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arrays</xqdoc:name>
          <xqdoc:type occurrence="*">array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Recursively flattens all arrays that occur in the supplied <code>$items</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:flatten</xqdoc:name>
      <xqdoc:signature>declare function array:flatten($items as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array, in which each member is computed by applying <code>$function</code> to the corresponding member of <code>$array</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:for-each</xqdoc:name>
      <xqdoc:signature>declare function array:for-each($array as array(*), $function as function(item()*) as item()*) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>function</xqdoc:name>
          <xqdoc:type>function(item()*) as item()*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array with those members of <code>$array</code> for which <code>$function</code> returns <code>true</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:filter</xqdoc:name>
      <xqdoc:signature>declare function array:filter($array as array(*), $function as function(item()*) as xs:boolean) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>function</xqdoc:name>
          <xqdoc:type>function(item()*) as xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Evaluates the supplied <code>$function</code> cumulatively on successive members of the supplied <code>$array</code> from left to right and using <code>$zero</code> as first argument.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:fold-left</xqdoc:name>
      <xqdoc:signature>declare function array:fold-left($array as array(*), $zero as item()*, $function as function(item()*, item()*) as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>zero</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>function</xqdoc:name>
          <xqdoc:type>function(item()*, item()*) as item()*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Evaluates the supplied <code>$function</code> cumulatively on successive members of the supplied <code>$array</code> from right to left and using <code>$zero</code> as first argument.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:fold-right</xqdoc:name>
      <xqdoc:signature>declare function array:fold-right($array as array(*), $zero as item()*, $function as function(item()*, item()*) as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>zero</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>function</xqdoc:name>
          <xqdoc:type>function(item()*, item()*) as item()*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array obtained by evaluating the supplied <code>$function</code> for each pair of members at the same position in <code>$array1</code> and <code>$array2</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:for-each-pair</xqdoc:name>
      <xqdoc:signature>declare function array:for-each-pair($array1 as array(*), $array2 as array(*), $function as function(item()*) as item()*) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array1</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>array2</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>function</xqdoc:name>
          <xqdoc:type>function(item()*) as item()*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array with sorted <code>$array</code> members. If a sort <code>$key</code> function is given, it will be applied on all array members. The items of the resulting values will be sorted using the semantics of the <code>lt</code> expression.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:sort</xqdoc:name>
      <xqdoc:signature>declare function array:sort($array as array(*)) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a new array with sorted <code>$array</code> members. If a sort <code>$key</code> function is given, it will be applied on all array members. The items of the resulting values will be sorted using the semantics of the <code>lt</code> expression.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:sort</xqdoc:name>
      <xqdoc:signature>declare function array:sort($array as array(*), $key as function(item()*) as xs:anyAtomicType*) as array(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>array</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>function(item()*) as xs:anyAtomicType*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>array(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function is specific to BaseX. It returns a string representation of the supplied array. The purpose of this function is to get an insight into the structure of an array item; it cannot necessarily be used for reconstructing the original array.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>array:serialize</xqdoc:name>
      <xqdoc:signature>declare function array:serialize($input as array(*)) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>array(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://expath.org/ns/binary</xqdoc:uri>
    <xqdoc:name>bin.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to process binary data, including extracting subparts, searching, basic binary operations and conversion between binary and structured forms. This module is based on the <a href="http://expath.org/spec/binary">EXPath Binary Module</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="bin" uri="http://expath.org/ns/binary"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the binary form of the set of octets written as a sequence of (ASCII) hex digits ([0-9A-Fa-f]).
<code>$in</code> will be effectively zero-padded from the left to generate an integral number of octets, i.e. an even number of hexadecimal digits. If <code>$in</code> is an empty string, then the result will be an <code>xs:base64Binary</code> with no embedded data. Byte order in the result follows (per-octet) character order in the string. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:non-numeric-character the input cannot be parsed as a hexadecimal number.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:hex</xqdoc:name>
      <xqdoc:signature>declare function bin:hex($in as xs:string?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the binary form of the set of octets written as a sequence of (8-wise) (ASCII) binary digits ([01]).
<code>$in</code> will be effectively zero-padded from the left to generate an integral number of octets. If <code>$in</code> is an empty string, then the result will be an <code>xs:base64Binary</code> with no embedded data. Byte order in the result follows (per-octet) character order in the string. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:non-numeric-character the input cannot be parsed as a binary number.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:bin</xqdoc:name>
      <xqdoc:signature>declare function bin:bin($in as xs:string?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the binary form of the set of octets written as a sequence of (ASCII) octal digits ([0-7]).
<code>$in</code> will be effectively zero-padded from the left to generate an integral number of octets. If <code>$in</code> is an empty string, then the result will be an <code>xs:base64Binary</code> with no embedded data. Byte order in the result follows (per-octet) character order in the string. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:non-numeric-character the input cannot be parsed as an octal number.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:octal</xqdoc:name>
      <xqdoc:signature>declare function bin:octal($in as xs:string?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns binary data as a sequence of octets.
If <code>$in</code> is a zero length binary data then the empty sequence is returned. Octets are returned as integers from 0 to 255.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>bin:to-octets</xqdoc:name>
      <xqdoc:signature>declare function bin:to-octets($in as xs:base64Binary) as xs:integer* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts a sequence of octets into binary data.
Octets are integers from 0 to 255. If the value of <code>$in</code> is the empty sequence, the function returns zero-sized binary data.</xqdoc:description>
        <xqdoc:error>:octet-out-of-range one of the octets lies outside the range 0 - 255.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:from-octets</xqdoc:name>
      <xqdoc:signature>declare function bin:from-octets($in as xs:integer*) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="*">xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the size of binary data in octets.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>bin:length</xqdoc:name>
      <xqdoc:signature>declare function bin:length($in as xs:base64Binary) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a section of binary data starting at the <code>$offset</code> octet.
If <code>$size</code> is specified, the size of the returned binary data is <code>$size</code> octets. If <code>$size</code> is absent, all remaining data from <code>$offset</code> is returned. The <code>$offset</code> is zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:part</xqdoc:name>
      <xqdoc:signature>declare function bin:part($in as xs:base64Binary?, $offset as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns a section of binary data starting at the <code>$offset</code> octet.
If <code>$size</code> is specified, the size of the returned binary data is <code>$size</code> octets. If <code>$size</code> is absent, all remaining data from <code>$offset</code> is returned. The <code>$offset</code> is zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:part</xqdoc:name>
      <xqdoc:signature>declare function bin:part($in as xs:base64Binary?, $offset as xs:integer, $size as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:base64Binary</code> created by concatenating the items in the sequence <code>$in</code> , in order. If the value of <code>$in</code> is the empty sequence, the function returns a binary item containing no data bytes.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>bin:join</xqdoc:name>
      <xqdoc:signature>declare function bin:join($in as xs:base64Binary*) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="*">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns binary data consisting sequentially of the data from <code>$in</code> up to and including the <code>$offset - 1</code> octet, followed by all the data from <code>$extra</code> , and then the remaining data from <code>$in</code> .
The <code>$offset</code> is zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:index-out-of-range the specified offset is out of range.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:insert-before</xqdoc:name>
      <xqdoc:signature>declare function bin:insert-before($in as xs:base64Binary?, $offset as xs:integer, $extra as xs:base64Binary?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>extra</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets in front of the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.
If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:octet-out-of-range the specified octet lies outside the range 0-255.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pad-left</xqdoc:name>
      <xqdoc:signature>declare function bin:pad-left($in as xs:base64Binary?, $size as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets in front of the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.
If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:octet-out-of-range the specified octet lies outside the range 0-255.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pad-left</xqdoc:name>
      <xqdoc:signature>declare function bin:pad-left($in as xs:base64Binary?, $size as xs:integer, $octet as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets after the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.
If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:octet-out-of-range the specified octet lies outside the range 0-255.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pad-right</xqdoc:name>
      <xqdoc:signature>declare function bin:pad-right($in as xs:base64Binary?, $size as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:base64Binary</code> created by padding the input with <code>$size</code> octets after the input. If <code>$octet</code> is specified, the padding octets each have that value, otherwise they are zero.
If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:octet-out-of-range the specified octet lies outside the range 0-255.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pad-right</xqdoc:name>
      <xqdoc:signature>declare function bin:pad-right($in as xs:base64Binary?, $size as xs:integer, $octet as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns the first location of the binary search sequence in the input, or if not found, the empty sequence.
The <code>$offset</code> and the returned location are zero based. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:find</xqdoc:name>
      <xqdoc:signature>declare function bin:find($in as xs:base64Binary?, $offset as xs:integer, $search as xs:base64Binary) as xs:integer? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>search</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Decodes binary data as a string in a given <code>$encoding</code> .
If <code>$offset</code> and <code>$size</code> are provided, the <code>$size</code> octets from <code>$offset</code> are decoded. If <code>$offset</code> alone is provided, octets from <code>$offset</code> to the end are decoded.If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-encoding the specified encoding is unknown.</xqdoc:error>
        <xqdoc:error>:conversion-error an error or malformed input occurred during decoding the string.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:decode-string</xqdoc:name>
      <xqdoc:signature>declare function bin:decode-string($in as xs:base64Binary?, $encoding as xs:string) as xs:string? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Decodes binary data as a string in a given <code>$encoding</code> .
If <code>$offset</code> and <code>$size</code> are provided, the <code>$size</code> octets from <code>$offset</code> are decoded. If <code>$offset</code> alone is provided, octets from <code>$offset</code> to the end are decoded.If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-encoding the specified encoding is unknown.</xqdoc:error>
        <xqdoc:error>:conversion-error an error or malformed input occurred during decoding the string.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:decode-string</xqdoc:name>
      <xqdoc:signature>declare function bin:decode-string($in as xs:base64Binary?, $encoding as xs:string, $offset as xs:integer) as xs:string? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Decodes binary data as a string in a given <code>$encoding</code> .
If <code>$offset</code> and <code>$size</code> are provided, the <code>$size</code> octets from <code>$offset</code> are decoded. If <code>$offset</code> alone is provided, octets from <code>$offset</code> to the end are decoded.If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-encoding the specified encoding is unknown.</xqdoc:error>
        <xqdoc:error>:conversion-error an error or malformed input occurred during decoding the string.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:decode-string</xqdoc:name>
      <xqdoc:signature>declare function bin:decode-string($in as xs:base64Binary?, $encoding as xs:string, $offset as xs:integer, $size as xs:integer) as xs:string? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Encodes a string into binary data using a given <code>$encoding</code> .
If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
        <xqdoc:error>:unknown-encoding the specified encoding is unknown.</xqdoc:error>
        <xqdoc:error>:conversion-error an error or malformed input occurred during encoding the string.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:encode-string</xqdoc:name>
      <xqdoc:signature>declare function bin:encode-string($in as xs:string?, $encoding as xs:string) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the 8-octet binary representation of a double value.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.</xqdoc:description>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pack-double</xqdoc:name>
      <xqdoc:signature>declare function bin:pack-double($in as xs:double) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the 8-octet binary representation of a double value.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.</xqdoc:description>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pack-double</xqdoc:name>
      <xqdoc:signature>declare function bin:pack-double($in as xs:double, $octet-order as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the 4-octet binary representation of a float value.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.</xqdoc:description>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pack-float</xqdoc:name>
      <xqdoc:signature>declare function bin:pack-float($in as xs:float) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:float</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the 4-octet binary representation of a float value.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified.</xqdoc:description>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pack-float</xqdoc:name>
      <xqdoc:signature>declare function bin:pack-float($in as xs:float, $octet-order as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:float</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the twos-complement binary representation of an integer value treated as <code>$size</code> octets long. Any 'excess' high-order bits are discarded.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. Specifying a <code>$size</code> of zero yields an empty binary data.</xqdoc:description>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pack-integer</xqdoc:name>
      <xqdoc:signature>declare function bin:pack-integer($in as xs:integer, $size as xs:integer) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns the twos-complement binary representation of an integer value treated as <code>$size</code> octets long. Any 'excess' high-order bits are discarded.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. Specifying a <code>$size</code> of zero yields an empty binary data.</xqdoc:description>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:pack-integer</xqdoc:name>
      <xqdoc:signature>declare function bin:pack-integer($in as xs:integer, $size as xs:integer, $octet-order as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts the double value stored at the particular offset in binary data.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.</xqdoc:description>
        <xqdoc:error>:index-out-of-range the specified offset is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-double</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-double($in as xs:base64Binary, $offset as xs:integer) as xs:double external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Extracts the double value stored at the particular offset in binary data.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.</xqdoc:description>
        <xqdoc:error>:index-out-of-range the specified offset is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-double</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-double($in as xs:base64Binary, $offset as xs:integer, $octet-order as xs:string) as xs:double external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts the float value stored at the particular offset in binary data.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.</xqdoc:description>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-float</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-float($in as xs:base64Binary, $offset as xs:integer) as xs:float external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:float</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Extracts the float value stored at the particular offset in binary data.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based.</xqdoc:description>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-float</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-float($in as xs:base64Binary, $offset as xs:integer, $octet-order as xs:string) as xs:float external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:float</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns a signed integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation. Necessary sign extension is performed (i.e. the result is negative if the high order bit is '1').
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code> .</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-integer</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-integer($in as xs:base64Binary, $offset as xs:integer, $size as xs:integer) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Returns a signed integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation. Necessary sign extension is performed (i.e. the result is negative if the high order bit is '1').
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code> .</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-integer</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-integer($in as xs:base64Binary, $offset as xs:integer, $size as xs:integer, $octet-order as xs:string) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns an unsigned integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code> .</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-unsigned-integer</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-unsigned-integer($in as xs:base64Binary, $offset as xs:integer, $size as xs:integer) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Returns an unsigned integer value represented by the <code>$size</code> octets starting from <code>$offset</code> in the input binary representation.
Most-significant-octet-first number representation is assumed unless the <code>$octet-order</code> parameter is specified. The <code>$offset</code> is zero based. Specifying a <code>$size</code> of zero yields the integer <code>0</code> .</xqdoc:description>
        <xqdoc:error>:negative-size the specified size is negative.</xqdoc:error>
        <xqdoc:error>:index-out-of-range the specified offset + size is out of range.</xqdoc:error>
        <xqdoc:error>:unknown-significance-order the specified octet order is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:unpack-unsigned-integer</xqdoc:name>
      <xqdoc:signature>declare function bin:unpack-unsigned-integer($in as xs:base64Binary, $offset as xs:integer, $size as xs:integer, $octet-order as xs:string) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>size</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>octet-order</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the "bitwise or" of two binary arguments.
If either argument is the empty sequence, an empty sequence is returned.</xqdoc:description>
        <xqdoc:error>:differing-length-arguments the input arguments are of differing length.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:or</xqdoc:name>
      <xqdoc:signature>declare function bin:or($a as xs:base64Binary?, $b as xs:base64Binary?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>a</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>b</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the "bitwise xor" of two binary arguments.
If either argument is the empty sequence, an empty sequence is returned.</xqdoc:description>
        <xqdoc:error>:differing-length-arguments the input arguments are of differing length.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:xor</xqdoc:name>
      <xqdoc:signature>declare function bin:xor($a as xs:base64Binary?, $b as xs:base64Binary?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>a</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>b</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the "bitwise and" of two binary arguments.
If either argument is the empty sequence, an empty sequence is returned.</xqdoc:description>
        <xqdoc:error>:differing-length-arguments the input arguments are of differing length.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>bin:and</xqdoc:name>
      <xqdoc:signature>declare function bin:and($a as xs:base64Binary?, $b as xs:base64Binary?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>a</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>b</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the "bitwise not" of a binary argument.
If the argument is the empty sequence, an empty sequence is returned.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>bin:not</xqdoc:name>
      <xqdoc:signature>declare function bin:not($in as xs:base64Binary?) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Shifts bits in binary data.
If <code>$by</code> is zero, the result is identical to <code>$in</code> . If <code>$by</code> is positive then bits are shifted to the left. Otherwise, bits are shifted to the right. If the absolute value of <code>$by</code> is greater than the bit-length of <code>$in</code> then an all-zeros result is returned. The result always has the same size as <code>$in</code> . The shifting is logical: zeros are placed into discarded bits. If the value of <code>$in</code> is the empty sequence, the function returns an empty sequence.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>bin:shift</xqdoc:name>
      <xqdoc:signature>declare function bin:shift($in as xs:base64Binary?, $by as xs:integer) as xs:base64Binary? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>in</xqdoc:name>
          <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>by</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/client</xqdoc:uri>
    <xqdoc:name>client.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to access remote BaseX server instances from XQuery. With this module, you can on the one hand execute database commands and on the other hand evaluate queries, the results of which are returned as XDM sequences.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="client" uri="http://basex.org/modules/client"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>This function establishes a connection to a remote BaseX server, creates a new client session, and returns a session id. The parameter <code>$host</code> is the name of the database server, <code>$port</code> specifies the server port, and <code>$user</code> and <code>$password</code> represent the login data.</xqdoc:description>
        <xqdoc:error>bxerr:BXCL0001 an error occurs while creating the session (possible reasons: server not available, access denied).</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>client:connect</xqdoc:name>
      <xqdoc:signature>declare function client:connect($host as xs:string, $port as xs:integer, $user as xs:string, $password as xs:string) as xs:anyURI external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>host</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>port</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>user</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>password</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:anyURI</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>This function executes a <a href="http://docs.basex.org/wiki/Commands">command</a> and returns the result as string. The parameter <code>$id</code> contains the session id returned by <a href="http://docs.basex.org/wiki/Client_Module#client:connect">client:connect</a> . The <code>$command</code> argument represents a single command, which will be executed by the server.</xqdoc:description>
        <xqdoc:error>bxerr:BXCL0003 an I/O error occurs while transferring data from or to the server.</xqdoc:error>
        <xqdoc:error>bxerr:BXCL0004 an error occurs while executing a command.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>client:execute</xqdoc:name>
      <xqdoc:signature>declare function client:execute($id as xs:anyURI, $command as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:anyURI</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>command</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function returns an information string, created by a previous call of <a href="#client:execute">client:execute</a> . <code>$id</code> specifies the session id.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>client:info</xqdoc:name>
      <xqdoc:signature>declare function client:info($id as xs:anyURI) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:anyURI</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Evaluates a query and returns the result as sequence. The parameter <code>$id</code> contains the session id returned by <a href="http://docs.basex.org/wiki/Client_Module#client:connect">client:connect</a> , and <code>$query</code> represents the query string, which will be evaluated by the server.
Variables and the context item can be declared via <code>$bindings</code> . The specified keys must be QNames or strings: <ul> <li> If a key is a QName, it will be directly adopted as variable name. </li> <li> If a key is a string, it may be prefixed with a dollar sign. A namespace can be specified using the <a href="http://www.jclark.com/xml/xmlns.htm">Clark Notation</a>. If the specified string is empty, the value will be bound to the context item. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXCL0003 an I/O error occurs while transferring data from or to the server.</xqdoc:error>
        <xqdoc:error>bxerr:BXCL0005 an error occurs while evaluating a query, and if the original error cannot be extracted from the returned error string.</xqdoc:error>
        <xqdoc:error>bxerr:BXCL0006 a value to be bound is no single item.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>client:query</xqdoc:name>
      <xqdoc:signature>declare function client:query($id as xs:anyURI, $query as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:anyURI</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Evaluates a query and returns the result as sequence. The parameter <code>$id</code> contains the session id returned by <a href="http://docs.basex.org/wiki/Client_Module#client:connect">client:connect</a> , and <code>$query</code> represents the query string, which will be evaluated by the server.
Variables and the context item can be declared via <code>$bindings</code> . The specified keys must be QNames or strings: <ul> <li> If a key is a QName, it will be directly adopted as variable name. </li> <li> If a key is a string, it may be prefixed with a dollar sign. A namespace can be specified using the <a href="http://www.jclark.com/xml/xmlns.htm">Clark Notation</a>. If the specified string is empty, the value will be bound to the context item. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXCL0003 an I/O error occurs while transferring data from or to the server.</xqdoc:error>
        <xqdoc:error>bxerr:BXCL0005 an error occurs while evaluating a query, and if the original error cannot be extracted from the returned error string.</xqdoc:error>
        <xqdoc:error>bxerr:BXCL0006 a value to be bound is no single item.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>client:query</xqdoc:name>
      <xqdoc:signature>declare function client:query($id as xs:anyURI, $query as xs:string, $bindings as map(*)) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:anyURI</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function closes a client session. <code>$id</code> specifies the session id.
At the end of query execution, open sessions will be automatically closed.</xqdoc:description>
        <xqdoc:error>bxerr:BXCL0003 an I/O error occurs while transferring data from or to the server.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>client:close</xqdoc:name>
      <xqdoc:signature>declare function client:close($id as xs:anyURI) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:anyURI</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/convert</xqdoc:uri>
    <xqdoc:name>convert.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to convert data between different formats.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="convert" uri="http://basex.org/modules/convert"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specifed binary data (xs:base64Binary, xs:hexBinary) to a string.
The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input is an invalid XML string, or the wrong encoding has been specified. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:binary-to-string</xqdoc:name>
      <xqdoc:signature>declare function convert:binary-to-string($bytes as xs:anyAtomicType) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>bytes</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts the specifed binary data (xs:base64Binary, xs:hexBinary) to a string.
The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input is an invalid XML string, or the wrong encoding has been specified. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:binary-to-string</xqdoc:name>
      <xqdoc:signature>declare function convert:binary-to-string($bytes as xs:anyAtomicType, $encoding as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>bytes</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified string to a <code>xs:base64Binary</code> item. If the default encoding is chosen, conversion will be cheap, as both <code>xs:string</code> and <code>xs:base64Binary</code> items are internally represented as byte arrays.
The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input cannot be represented in the specified encoding.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:string-to-base64</xqdoc:name>
      <xqdoc:signature>declare function convert:string-to-base64($input as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified string to a <code>xs:base64Binary</code> item. If the default encoding is chosen, conversion will be cheap, as both <code>xs:string</code> and <code>xs:base64Binary</code> items are internally represented as byte arrays.
The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input cannot be represented in the specified encoding.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:string-to-base64</xqdoc:name>
      <xqdoc:signature>declare function convert:string-to-base64($input as xs:string, $encoding as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified string to a <code>xs:hexBinary</code> item. If the default encoding is chosen, conversion will be cheap, as both <code>xs:string</code> and <code>xs:hexBinary</code> items are internally represented as byte arrays.
The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input cannot be represented in the specified encoding.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:string-to-hex</xqdoc:name>
      <xqdoc:signature>declare function convert:string-to-hex($input as xs:string) as xs:hexBinary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:hexBinary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified string to a <code>xs:hexBinary</code> item. If the default encoding is chosen, conversion will be cheap, as both <code>xs:string</code> and <code>xs:hexBinary</code> items are internally represented as byte arrays.
The UTF-8 default encoding can be overwritten with the optional <code>$encoding</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input cannot be represented in the specified encoding.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:string-to-hex</xqdoc:name>
      <xqdoc:signature>declare function convert:string-to-hex($input as xs:string, $encoding as xs:string) as xs:hexBinary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:hexBinary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified byte sequence to a <code>xs:base64Binary</code> item. Conversion is cheap, as <code>xs:base64Binary</code> items are internally represented as byte arrays.</xqdoc:description>
        <xqdoc:error>bxerr:BXCO0001 The input cannot be represented in the specified encoding.</xqdoc:error>
        <xqdoc:error>bxerr:BXCO0002 The specified encoding is invalid or not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>convert:bytes-to-base64</xqdoc:name>
      <xqdoc:signature>declare function convert:bytes-to-base64($input as xs:byte*) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type occurrence="*">xs:byte</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified byte sequence to a <code>xs:hexBinary</code> item. Conversion is cheap, as <code>xs:hexBinary</code> items are internally represented as byte arrays.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:bytes-to-hex</xqdoc:name>
      <xqdoc:signature>declare function convert:bytes-to-hex($input as xs:byte*) as xs:hexBinary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type occurrence="*">xs:byte</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:hexBinary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the specified binary data (xs:base64Binary, xs:hexBinary) as a sequence of bytes.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:binary-to-bytes</xqdoc:name>
      <xqdoc:signature>declare function convert:binary-to-bytes($bin as xs:anyAtomicType) as xs:byte* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>bin</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:byte</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts <code>$num</code> to base <code>$base</code> , interpreting it as a 64-bit unsigned integer.
The first <code>$base</code> elements of the sequence <code>'0',..,'9','a',..,'z'</code> are used as digits.
Valid bases are <code>2, .., 36</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:integer-to-base</xqdoc:name>
      <xqdoc:signature>declare function convert:integer-to-base($num as xs:integer, $base as xs:integer) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>num</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>base</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Decodes an <code>xs:integer</code> from <code>$str</code> , assuming that it's encoded in base <code>$base</code> .
The first <code>$base</code> elements of the sequence <code>'0',..,'9','a',..,'z'</code> are allowed as digits, case doesn't matter.
Valid bases are 2 - 36.
If <code>$str</code> contains more than 64 bits of information, the result is truncated arbitarily.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:integer-from-base</xqdoc:name>
      <xqdoc:signature>declare function convert:integer-from-base($str as xs:string, $base as xs:integer) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>str</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>base</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified number of milliseconds since 1 Jan 1970 to an item of type xs:dateTime.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:integer-to-dateTime</xqdoc:name>
      <xqdoc:signature>declare function convert:integer-to-dateTime($ms as xs:integer) as xs:dateTime external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>ms</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:dateTime</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified item of type xs:dateTime to the number of milliseconds since 1 Jan 1970.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:dateTime-to-integer</xqdoc:name>
      <xqdoc:signature>declare function convert:dateTime-to-integer($dateTime as xs:dateTime) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dateTime</xqdoc:name>
          <xqdoc:type>xs:dateTime</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified number of milliseconds to an item of type xs:dayTimeDuration.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:integer-to-dayTime</xqdoc:name>
      <xqdoc:signature>declare function convert:integer-to-dayTime($ms as xs:integer) as xs:dayTimeDuration external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>ms</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:dayTimeDuration</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the specified item of type xs:dayTimeDuration to milliseconds represented by an integer.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>convert:dayTime-to-integer</xqdoc:name>
      <xqdoc:signature>declare function convert:dayTime-to-integer($dayTime as xs:dayTimeDuration) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dayTime</xqdoc:name>
          <xqdoc:type>xs:dayTimeDuration</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://expath.org/ns/crypto</xqdoc:uri>
    <xqdoc:name>crypto.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to perform cryptographic operations in XQuery. The cryptographic module is based on an early draft of the <a href="http://expath.org/spec/crypto">EXPath Cryptographic Module</a> and provides the following functionality: creation of message authentication codes (HMAC), encryption and decryption, and creation and validation of XML Digital Signatures.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="crypto" uri="http://expath.org/ns/crypto"/>
    <xqdoc:namespace prefix="experr" uri="http://expath.org/ns/error"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a message authentication code via a cryptographic hash function and a secret <code>$key</code> .
<p> <code>$encoding</code> must either be <code>hex</code>, <code>base64</code> or the empty string and specifies the encoding of the returned authentication code. <b>Default is <code>base64</code> </b>.
<code>$algorithm</code> describes the hash algorithm which is used for encryption. Currently supported are <code>md5</code>, <code>sha1</code>, <code>sha256</code>, <code>sha384</code>, <code>sha512</code>. <b>Default is <code>md5</code> </b>. </p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0013 the specified hashing algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0014 the specified encoding method is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0019 the specified secret key is invalid.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:hmac</xqdoc:name>
      <xqdoc:signature>declare function crypto:hmac($message as xs:string, $key as xs:string, $algorithm as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>message</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>algorithm</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Creates a message authentication code via a cryptographic hash function and a secret <code>$key</code> .
<p> <code>$encoding</code> must either be <code>hex</code>, <code>base64</code> or the empty string and specifies the encoding of the returned authentication code. <b>Default is <code>base64</code> </b>.
<code>$algorithm</code> describes the hash algorithm which is used for encryption. Currently supported are <code>md5</code>, <code>sha1</code>, <code>sha256</code>, <code>sha384</code>, <code>sha512</code>. <b>Default is <code>md5</code> </b>. </p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0013 the specified hashing algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0014 the specified encoding method is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0019 the specified secret key is invalid.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:hmac</xqdoc:name>
      <xqdoc:signature>declare function crypto:hmac($message as xs:string, $key as xs:string, $algorithm as xs:string, $encoding as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>message</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>algorithm</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Encrypts the given input string.
<p> <code>$encryption</code> must be <code>symmetric</code>, as asymmetric encryption is not supported so far. <b>Default is <code>symmetric</code> </b>.
<code>$key</code> is the secret key which is used for both encryption and decryption of input data. Its length is fixed and depends on the chosen algorithm: <code>8 bytes for DES</code>, <code>16 bytes for AES</code>.
<code>$algorithm</code> must either be <code>DES</code> or <code>AES</code>. Other algorithms are not supported so far, but, of course, can be added on demand. <b>Default is <code>DES</code> </b>. </p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0016 padding problems arise.</xqdoc:error>
        <xqdoc:error>experr:CX0017 padding is incorrect.</xqdoc:error>
        <xqdoc:error>experr:CX0018 the encryption type is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0019 the secret key is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0020 the block size is incorrect.</xqdoc:error>
        <xqdoc:error>experr:CX0021 the specified encryption algorithm is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:encrypt</xqdoc:name>
      <xqdoc:signature>declare function crypto:encrypt($input as xs:string, $encryption as xs:string, $key as xs:string, $algorithm as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encryption</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>algorithm</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Decrypts the encrypted <code>$input</code> .
<p> <code>$type</code> must be <code>symmetric</code>. An option for asymmetric encryption will most likely be added with another version of BaseX. <b>Default is <code>symmetric</code> </b>.
<code>$key</code> is the secret key which is used for both encryption and decryption of input data. Its length is fixed and depends on the chosen algorithm: <code>8 bytes for DES</code>, <code>16 bytes for AES</code>.
<code>$algorithm</code> must either be <code>DES</code> or <code>AES</code>. Other algorithms are not supported so far, but, of course, can be added on demand. <b>Default is <code>DES</code> </b>. </p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0016 padding problems arise.</xqdoc:error>
        <xqdoc:error>experr:CX0017 padding is incorrect.</xqdoc:error>
        <xqdoc:error>experr:CX0018 the encryption type is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0019 the secret key is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0020 the block size is incorrect.</xqdoc:error>
        <xqdoc:error>experr:CX0021 the specified encryption algorithm is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:decrypt</xqdoc:name>
      <xqdoc:signature>declare function crypto:decrypt($input as xs:string, $type as xs:string, $key as xs:string, $algorithm as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>algorithm</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="6">
      <xqdoc:comment>
        <xqdoc:description>
          <code>$canonicalization</code> must either be <code>inclusive-with-comments</code> , <code>inclusive</code> , <code>exclusive-with-comments</code> or <code>exclusive</code> . <b>Default is <code>inclusive-with-comments</code> </b> .
<p> <code>$digest</code> must be one of the following: <code>SHA1</code>, <code>SHA256</code> or <code>SHA512</code>. <b>Default is <code>SHA1</code> </b>.
<code>$signature</code> must either be <code>RSA_SHA1</code> or <code>DSA_SHA1</code>. <b>Default is <code>RSA_SHA1</code> </b>.
<code>$prefix</code> may be empty and prefixes the <code>Signature</code> element accordingly.
<code>$type</code> is the signature type. It must either be <code>enveloped</code> or <code>enveloping</code> (detached signatures are not supported so far). <b>Default is <code>enveloped</code> </b>.
<code>$xpath</code> is an arbitrary XPath expression which specifies a subset of the document that is to be signed.
<code>$certificate</code> is the digitial certificate used to sign the input document.
<code>$ext</code> may either be an <code>$xpath</code> expression or a <code>$certificate</code>.
</p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0001 the canonicalization algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0002 the digest algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0003 the signature algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0004 the <code>$xpath-expression</code> is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0005 the root name of <code>$digital-certificate</code> is not 'digital-certificate.</xqdoc:error>
        <xqdoc:error>experr:CX0007 the key store is null.</xqdoc:error>
        <xqdoc:error>experr:CX0012 the key cannot be found in the specified key store.</xqdoc:error>
        <xqdoc:error>experr:CX0023 the certificate alias is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0024 an invalid algorithm is specified.</xqdoc:error>
        <xqdoc:error>experr:CX0025 an exception occurs while the signing the document.</xqdoc:error>
        <xqdoc:error>experr:CX0026 an exception occurs during key store initialization.</xqdoc:error>
        <xqdoc:error>experr:CX0027 an IO exception occurs.</xqdoc:error>
        <xqdoc:error>experr:CX0028 the signature type is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:generate-signature</xqdoc:name>
      <xqdoc:signature>declare function crypto:generate-signature($input as node(), $canonicalization as xs:string, $digest as xs:string, $signature as xs:string, $prefix as xs:string, $type as xs:string) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>canonicalization</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>digest</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>signature</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="8">
      <xqdoc:comment>
        <xqdoc:description>
          <code>$canonicalization</code> must either be <code>inclusive-with-comments</code> , <code>inclusive</code> , <code>exclusive-with-comments</code> or <code>exclusive</code> . <b>Default is <code>inclusive-with-comments</code> </b> .
<p> <code>$digest</code> must be one of the following: <code>SHA1</code>, <code>SHA256</code> or <code>SHA512</code>. <b>Default is <code>SHA1</code> </b>.
<code>$signature</code> must either be <code>RSA_SHA1</code> or <code>DSA_SHA1</code>. <b>Default is <code>RSA_SHA1</code> </b>.
<code>$prefix</code> may be empty and prefixes the <code>Signature</code> element accordingly.
<code>$type</code> is the signature type. It must either be <code>enveloped</code> or <code>enveloping</code> (detached signatures are not supported so far). <b>Default is <code>enveloped</code> </b>.
<code>$xpath</code> is an arbitrary XPath expression which specifies a subset of the document that is to be signed.
<code>$certificate</code> is the digitial certificate used to sign the input document.
<code>$ext</code> may either be an <code>$xpath</code> expression or a <code>$certificate</code>.
</p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0001 the canonicalization algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0002 the digest algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0003 the signature algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0004 the <code>$xpath-expression</code> is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0005 the root name of <code>$digital-certificate</code> is not 'digital-certificate.</xqdoc:error>
        <xqdoc:error>experr:CX0007 the key store is null.</xqdoc:error>
        <xqdoc:error>experr:CX0012 the key cannot be found in the specified key store.</xqdoc:error>
        <xqdoc:error>experr:CX0023 the certificate alias is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0024 an invalid algorithm is specified.</xqdoc:error>
        <xqdoc:error>experr:CX0025 an exception occurs while the signing the document.</xqdoc:error>
        <xqdoc:error>experr:CX0026 an exception occurs during key store initialization.</xqdoc:error>
        <xqdoc:error>experr:CX0027 an IO exception occurs.</xqdoc:error>
        <xqdoc:error>experr:CX0028 the signature type is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:generate-signature</xqdoc:name>
      <xqdoc:signature>declare function crypto:generate-signature($input as node(), $canonicalization as xs:string, $digest as xs:string, $signature as xs:string, $prefix as xs:string, $type as xs:string, $xpath as xs:string, $certificate as node()) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>canonicalization</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>digest</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>signature</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>xpath</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>certificate</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="7">
      <xqdoc:comment>
        <xqdoc:description>
          <code>$canonicalization</code> must either be <code>inclusive-with-comments</code> , <code>inclusive</code> , <code>exclusive-with-comments</code> or <code>exclusive</code> . <b>Default is <code>inclusive-with-comments</code> </b> .
<p> <code>$digest</code> must be one of the following: <code>SHA1</code>, <code>SHA256</code> or <code>SHA512</code>. <b>Default is <code>SHA1</code> </b>.
<code>$signature</code> must either be <code>RSA_SHA1</code> or <code>DSA_SHA1</code>. <b>Default is <code>RSA_SHA1</code> </b>.
<code>$prefix</code> may be empty and prefixes the <code>Signature</code> element accordingly.
<code>$type</code> is the signature type. It must either be <code>enveloped</code> or <code>enveloping</code> (detached signatures are not supported so far). <b>Default is <code>enveloped</code> </b>.
<code>$xpath</code> is an arbitrary XPath expression which specifies a subset of the document that is to be signed.
<code>$certificate</code> is the digitial certificate used to sign the input document.
<code>$ext</code> may either be an <code>$xpath</code> expression or a <code>$certificate</code>.
</p>
        </xqdoc:description>
        <xqdoc:error>experr:CX0001 the canonicalization algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0002 the digest algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0003 the signature algorithm is not supported.</xqdoc:error>
        <xqdoc:error>experr:CX0004 the <code>$xpath-expression</code> is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0005 the root name of <code>$digital-certificate</code> is not 'digital-certificate.</xqdoc:error>
        <xqdoc:error>experr:CX0007 the key store is null.</xqdoc:error>
        <xqdoc:error>experr:CX0012 the key cannot be found in the specified key store.</xqdoc:error>
        <xqdoc:error>experr:CX0023 the certificate alias is invalid.</xqdoc:error>
        <xqdoc:error>experr:CX0024 an invalid algorithm is specified.</xqdoc:error>
        <xqdoc:error>experr:CX0025 an exception occurs while the signing the document.</xqdoc:error>
        <xqdoc:error>experr:CX0026 an exception occurs during key store initialization.</xqdoc:error>
        <xqdoc:error>experr:CX0027 an IO exception occurs.</xqdoc:error>
        <xqdoc:error>experr:CX0028 the signature type is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:generate-signature</xqdoc:name>
      <xqdoc:signature>declare function crypto:generate-signature($input as node(), $canonicalization as xs:string, $digest as xs:string, $signature as xs:string, $prefix as xs:string, $type as xs:string, $ext as item()) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>canonicalization</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>digest</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>signature</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>ext</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Checks if the given node contains a <code>Signature</code> element and whether the signature is valid. In this case <code>true</code> is returned. If the signature is invalid the function returns <code>false</code> .</xqdoc:description>
        <xqdoc:error>experr:CX0015 the signature element cannot be found.</xqdoc:error>
        <xqdoc:error>experr:CX9994 an unspecified problem occurs during validation.</xqdoc:error>
        <xqdoc:error>experr:CX9996 an IO exception occurs during validation.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>crypto:validate-signature</xqdoc:name>
      <xqdoc:signature>declare function crypto:validate-signature($input-doc as node()) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input-doc</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/csv</xqdoc:uri>
    <xqdoc:name>csv.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains a single function to parse CSV input. <a href="http://en.wikipedia.org/wiki/Comma-separated_values">CSV</a> (comma-separated values) is a popular representation for tabular data, exported e. g. from Excel.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="csv" uri="http://basex.org/modules/csv"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the CSV data specified by <code>$input</code> to an XML document or a map. The <code>$options</code> argument can be used to control the way the input is converted.</xqdoc:description>
        <xqdoc:error>bxerr:BXCS0001 the input cannot be parsed.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>csv:parse</xqdoc:name>
      <xqdoc:signature>declare function csv:parse($input as xs:string) as document-node(csv) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node(csv)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts the CSV data specified by <code>$input</code> to an XML document or a map. The <code>$options</code> argument can be used to control the way the input is converted.</xqdoc:description>
        <xqdoc:error>bxerr:BXCS0001 the input cannot be parsed.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>csv:parse</xqdoc:name>
      <xqdoc:signature>declare function csv:parse($input as xs:string, $options as item()) as item() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Serializes the node specified by <code>$input</code> as CSV data, and returns the result as <code>xs:string</code> . Items can also be serialized as JSON if the <a href="http://docs.basex.org/wiki/Serialization">Serialization Parameter</a>  <code>method</code> is set to <code>csv</code> .
The <code>$options</code> argument can be used to control the way the input is serialized.</xqdoc:description>
        <xqdoc:error>bxerr:BXCS0002 the input cannot be serialized.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>csv:serialize</xqdoc:name>
      <xqdoc:signature>declare function csv:serialize($input as node()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Serializes the node specified by <code>$input</code> as CSV data, and returns the result as <code>xs:string</code> . Items can also be serialized as JSON if the <a href="http://docs.basex.org/wiki/Serialization">Serialization Parameter</a>  <code>method</code> is set to <code>csv</code> .
The <code>$options</code> argument can be used to control the way the input is serialized.</xqdoc:description>
        <xqdoc:error>bxerr:BXCS0002 the input cannot be serialized.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>csv:serialize</xqdoc:name>
      <xqdoc:signature>declare function csv:serialize($input as node(), $options as item()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/db</xqdoc:uri>
    <xqdoc:name>db.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for processing databases from within XQuery. Existing databases can be opened and listed, its contents can be directly accessed, documents can be added to and removed, etc.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns information on the database system, such as the database path and current database settings. The output is similar to the <a href="http://docs.basex.org/wiki/Commands#INFO">INFO</a> command.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>db:system</xqdoc:name>
      <xqdoc:signature>declare function db:system() as element(system) external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element(system)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns meta information on the database <code>$db</code> . The output is similar to the <a href="http://docs.basex.org/wiki/Commands#INFO_DB">INFO DB</a> command.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:info</xqdoc:name>
      <xqdoc:signature>declare function db:info($db as xs:string) as element(database) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(database)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns a string sequence with the names of all databases: <ul> <li> If a database <code>$db</code> is specified, all documents and raw files of the specified database are returned. </li> <li> The list of resources can be further restricted by the <code>$path</code> argument. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:list</xqdoc:name>
      <xqdoc:signature>declare function db:list() as xs:string* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a string sequence with the names of all databases: <ul> <li> If a database <code>$db</code> is specified, all documents and raw files of the specified database are returned. </li> <li> The list of resources can be further restricted by the <code>$path</code> argument. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:list</xqdoc:name>
      <xqdoc:signature>declare function db:list($db as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a string sequence with the names of all databases: <ul> <li> If a database <code>$db</code> is specified, all documents and raw files of the specified database are returned. </li> <li> The list of resources can be further restricted by the <code>$path</code> argument. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:list</xqdoc:name>
      <xqdoc:signature>declare function db:list($db as xs:string, $path as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>
          <ul> <li> If no argument is specified, a sequence of elements is returned. A single element contains the name of a database, the number of stored resources, the date of modification, and the database path. </li> <li> If <code>$db</code> is specified, a sequence of elements is returned, comprising information on all resources of the addressed database. An element contains the name of the resource, the content type, the modified date, and the raw flag. </li> <li> Returned databases resources can be further restricted by the <code>$path</code> argument. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:list-details</xqdoc:name>
      <xqdoc:signature>declare function db:list-details() as element(database)* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(database)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>
          <ul> <li> If no argument is specified, a sequence of elements is returned. A single element contains the name of a database, the number of stored resources, the date of modification, and the database path. </li> <li> If <code>$db</code> is specified, a sequence of elements is returned, comprising information on all resources of the addressed database. An element contains the name of the resource, the content type, the modified date, and the raw flag. </li> <li> Returned databases resources can be further restricted by the <code>$path</code> argument. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:list-details</xqdoc:name>
      <xqdoc:signature>declare function db:list-details($db as xs:string) as element(resource)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(resource)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>
          <ul> <li> If no argument is specified, a sequence of elements is returned. A single element contains the name of a database, the number of stored resources, the date of modification, and the database path. </li> <li> If <code>$db</code> is specified, a sequence of elements is returned, comprising information on all resources of the addressed database. An element contains the name of the resource, the content type, the modified date, and the raw flag. </li> <li> Returned databases resources can be further restricted by the <code>$path</code> argument. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:list-details</xqdoc:name>
      <xqdoc:signature>declare function db:list-details($db as xs:string, $path as xs:string) as element(resource)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(resource)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns an element sequence containing all available database backups.
If a database <code>$db</code> is specified, the sequence will be restricted to the backups matching this database.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>db:backups</xqdoc:name>
      <xqdoc:signature>declare function db:backups() as element(backup)* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(backup)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an element sequence containing all available database backups.
If a database <code>$db</code> is specified, the sequence will be restricted to the backups matching this database.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>db:backups</xqdoc:name>
      <xqdoc:signature>declare function db:backups($db as xs:string) as element(backup)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(backup)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Executes a <code>$query</code> and sends the resulting value to all clients watching the <a href="http://docs.basex.org/wiki/Events">Event</a> with the specified <code>$name</code> . The query may also perform updates; no event will be sent to the client that fired the event.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0010 the specified event is unknown.</xqdoc:error>
        <xqdoc:error>bxerr:SEPM0016 serialization errors occurred while sending the value.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:event</xqdoc:name>
      <xqdoc:signature>declare function db:event($name as xs:string, $query as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Opens the database <code>$db</code> and returns all document nodes.
The document nodes to be returned can be filtered with the <code>$path</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:open</xqdoc:name>
      <xqdoc:signature>declare function db:open($db as xs:string) as document-node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Opens the database <code>$db</code> and returns all document nodes.
The document nodes to be returned can be filtered with the <code>$path</code> argument.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:open</xqdoc:name>
      <xqdoc:signature>declare function db:open($db as xs:string, $path as xs:string) as document-node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Opens the database <code>$db</code> and returns the node with the specified <code>$pre</code> value.
The <a href="http://docs.basex.org/wiki/Node_Storage#PRE_Value">PRE value</a> provides very fast access to an existing database node, but it will change whenever a node with a smaller <i>pre</i> values is added to or deleted from a database.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0009 the specified pre value does not exist in the database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:open-pre</xqdoc:name>
      <xqdoc:signature>declare function db:open-pre($db as xs:string, $pre as xs:integer) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pre</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Opens the database <code>$db</code> and returns the node with the specified <code>$id</code> value.
Each database node has a <i>persistent</i>  <a href="http://docs.basex.org/wiki/Node_Storage#ID_Value">ID value</a> . Access to the node id can be sped up by turning on the <a href="http://docs.basex.org/wiki/Options#UPDINDEX">UPDINDEX</a> option.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0009 the specified id value does not exist in the database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:open-id</xqdoc:name>
      <xqdoc:signature>declare function db:open-id($db as xs:string, $id as xs:integer) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the <i>pre</i> values of the nodes supplied by <code>$nodes</code> , which must all be <a href="#Database_Nodes">database nodes</a> .
The <a href="http://docs.basex.org/wiki/Node_Storage#PRE_Value">PRE value</a> provides very fast access to an existing database node, but it will change whenever a node with a smaller <i>pre</i> values is added to or deleted from a database.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0001 <code>$nodes</code> contains a node which is not stored in a database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:node-pre</xqdoc:name>
      <xqdoc:signature>declare function db:node-pre($nodes as node()*) as xs:integer* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the <i>id</i> values of the nodes supplied by <code>$nodes</code> , which must all be <a href="#Database_Nodes">database nodes</a> .
Each database node has a <i>persistent</i>  <a href="http://docs.basex.org/wiki/Node_Storage#ID_Value">ID value</a> . Access to the node id can be sped up by turning on the <a href="http://docs.basex.org/wiki/Options#UPDINDEX">UPDINDEX</a> option.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0001 <code>$nodes</code> contains a node which is not stored in a database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:node-id</xqdoc:name>
      <xqdoc:signature>declare function db:node-id($nodes as node()*) as xs:integer* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a <a href="http://docs.basex.org/wiki/Binary_Data">binary resource</a> addressed by the database <code>$db</code> and <code>$path</code> as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:base64Binary</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0003 the database is not <i>persistent</i> (stored on disk).</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 the addressed resource cannot be retrieved.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0007 the specified path is invalid.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:retrieve</xqdoc:name>
      <xqdoc:signature>declare function db:retrieve($db as xs:string, $path as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Exports the specified database <code>$db</code> to the specified file <code>$path</code> . Existing files will be overwritten. The <code>$params</code> argument contains serialization parameters (see <a href="http://docs.basex.org/wiki/Serialization">Serialization</a> for more details), which can either be specified
<ul> <li> as children of an <code>&lt;output:serialization-parameters/&gt;</code> element, as defined for the <a href="http://www.w3.org/TR/xpath-functions-30/#func-serialize">fn:serialize()</a> function; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;output:serialization-parameters&gt; &lt;output:method value='xml'/&gt; &lt;output:cdata-section-elements value="div"/&gt; ... &lt;/output:serialization-parameters&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "method": "xml", "cdata-section-elements": "div", ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:export</xqdoc:name>
      <xqdoc:signature>declare function db:export($db as xs:string, $path as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Exports the specified database <code>$db</code> to the specified file <code>$path</code> . Existing files will be overwritten. The <code>$params</code> argument contains serialization parameters (see <a href="http://docs.basex.org/wiki/Serialization">Serialization</a> for more details), which can either be specified
<ul> <li> as children of an <code>&lt;output:serialization-parameters/&gt;</code> element, as defined for the <a href="http://www.w3.org/TR/xpath-functions-30/#func-serialize">fn:serialize()</a> function; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;output:serialization-parameters&gt; &lt;output:method value='xml'/&gt; &lt;output:cdata-section-elements value="div"/&gt; ... &lt;/output:serialization-parameters&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "method": "xml", "cdata-section-elements": "div", ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:export</xqdoc:name>
      <xqdoc:signature>declare function db:export($db as xs:string, $path as xs:string, $params as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>params</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns all text nodes of the database <code>$db</code> that have <code>$string</code> as their string value. If available, the value index is used to speed up evaluation.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:text</xqdoc:name>
      <xqdoc:signature>declare function db:text($db as xs:string, $string as item()) as text()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>string</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">text()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns all text nodes of the database <code>$db</code> that are located in between the <code>$min</code> and <code>$max</code> strings. If available, the value index is used to speed up evaluation.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:text-range</xqdoc:name>
      <xqdoc:signature>declare function db:text-range($db as xs:string, $min as xs:string, $max as xs:string) as text()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>min</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>max</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">text()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns all attribute nodes of the database <code>$db</code> that have <code>$string</code> as string value. If available, the value index is used to speed up evaluation.
If <code>$attname</code> is specified, the resulting attribute nodes are filtered by their attribute name.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:attribute</xqdoc:name>
      <xqdoc:signature>declare function db:attribute($db as xs:string, $string as item()) as attribute()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>string</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">attribute()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns all attribute nodes of the database <code>$db</code> that have <code>$string</code> as string value. If available, the value index is used to speed up evaluation.
If <code>$attname</code> is specified, the resulting attribute nodes are filtered by their attribute name.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:attribute</xqdoc:name>
      <xqdoc:signature>declare function db:attribute($db as xs:string, $string as item(), $attname as xs:string) as attribute()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>string</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>attname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">attribute()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns all attributes of the database <code>$db</code> , the string values of which are larger than or equal to <code>$min</code> and smaller than or equal to <code>$max</code> . If available, the value index is used to speed up evaluation.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:attribute-range</xqdoc:name>
      <xqdoc:signature>declare function db:attribute-range($db as xs:string, $min as xs:string, $max as xs:string) as attribute()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>min</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>max</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">attribute()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Returns all attributes of the database <code>$db</code> , the string values of which are larger than or equal to <code>$min</code> and smaller than or equal to <code>$max</code> . If available, the value index is used to speed up evaluation.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:attribute-range</xqdoc:name>
      <xqdoc:signature>declare function db:attribute-range($db as xs:string, $min as xs:string, $max as xs:string, $attname as xs:string) as attribute()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>min</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>max</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>attname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">attribute()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates a new database with name <code>$db</code> and adds initial documents specified via <code>$inputs</code> to the specified <code>$paths</code> . An existing database will be overwritten.
<code>$inputs</code> may be strings or nodes different than attributes. If the <code>$input</code> source is not a file or a folder, the <code>$paths</code> argument is mandatory.
Please note that <code>db:create</code> will be placed last on the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> . As a consequence, a newly created database cannot be addressed in the same query.
The <code>$options</code> argument can be used to change the indexing behavior. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> , <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> , <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options in lower case. Options can be specified either...
<ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g. </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;textindex value='true'/&gt; &lt;maxcats value='128'/&gt; &lt;/options&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "textindex": true(), "maxcats": 128 } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:FODC0002 <code>$inputs</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$inputs</code> is neither string nor a document node.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0007 <code>$db</code> is opened by another process.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 <code>$db</code> is not a <a href="http://docs.basex.org/wiki/Commands#Valid_Names">valid database name</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0012 two <code>db:create</code> statements with the same database name were specified.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0013 the number of specified inputs and paths differs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:create</xqdoc:name>
      <xqdoc:signature>declare function db:create($db as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a new database with name <code>$db</code> and adds initial documents specified via <code>$inputs</code> to the specified <code>$paths</code> . An existing database will be overwritten.
<code>$inputs</code> may be strings or nodes different than attributes. If the <code>$input</code> source is not a file or a folder, the <code>$paths</code> argument is mandatory.
Please note that <code>db:create</code> will be placed last on the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> . As a consequence, a newly created database cannot be addressed in the same query.
The <code>$options</code> argument can be used to change the indexing behavior. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> , <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> , <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options in lower case. Options can be specified either...
<ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g. </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;textindex value='true'/&gt; &lt;maxcats value='128'/&gt; &lt;/options&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "textindex": true(), "maxcats": 128 } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:FODC0002 <code>$inputs</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$inputs</code> is neither string nor a document node.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0007 <code>$db</code> is opened by another process.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 <code>$db</code> is not a <a href="http://docs.basex.org/wiki/Commands#Valid_Names">valid database name</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0012 two <code>db:create</code> statements with the same database name were specified.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0013 the number of specified inputs and paths differs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:create</xqdoc:name>
      <xqdoc:signature>declare function db:create($db as xs:string, $inputs as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>inputs</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a new database with name <code>$db</code> and adds initial documents specified via <code>$inputs</code> to the specified <code>$paths</code> . An existing database will be overwritten.
<code>$inputs</code> may be strings or nodes different than attributes. If the <code>$input</code> source is not a file or a folder, the <code>$paths</code> argument is mandatory.
Please note that <code>db:create</code> will be placed last on the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> . As a consequence, a newly created database cannot be addressed in the same query.
The <code>$options</code> argument can be used to change the indexing behavior. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> , <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> , <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options in lower case. Options can be specified either...
<ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g. </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;textindex value='true'/&gt; &lt;maxcats value='128'/&gt; &lt;/options&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "textindex": true(), "maxcats": 128 } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:FODC0002 <code>$inputs</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$inputs</code> is neither string nor a document node.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0007 <code>$db</code> is opened by another process.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 <code>$db</code> is not a <a href="http://docs.basex.org/wiki/Commands#Valid_Names">valid database name</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0012 two <code>db:create</code> statements with the same database name were specified.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0013 the number of specified inputs and paths differs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:create</xqdoc:name>
      <xqdoc:signature>declare function db:create($db as xs:string, $inputs as item()*, $paths as xs:string*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>inputs</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>paths</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Creates a new database with name <code>$db</code> and adds initial documents specified via <code>$inputs</code> to the specified <code>$paths</code> . An existing database will be overwritten.
<code>$inputs</code> may be strings or nodes different than attributes. If the <code>$input</code> source is not a file or a folder, the <code>$paths</code> argument is mandatory.
Please note that <code>db:create</code> will be placed last on the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> . As a consequence, a newly created database cannot be addressed in the same query.
The <code>$options</code> argument can be used to change the indexing behavior. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> , <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> , <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options in lower case. Options can be specified either...
<ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g. </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;textindex value='true'/&gt; &lt;maxcats value='128'/&gt; &lt;/options&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "textindex": true(), "maxcats": 128 } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:FODC0002 <code>$inputs</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$inputs</code> is neither string nor a document node.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0007 <code>$db</code> is opened by another process.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 <code>$db</code> is not a <a href="http://docs.basex.org/wiki/Commands#Valid_Names">valid database name</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0012 two <code>db:create</code> statements with the same database name were specified.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0013 the number of specified inputs and paths differs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:create</xqdoc:name>
      <xqdoc:signature>declare function db:create($db as xs:string, $inputs as item()*, $paths as xs:string*, $options as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>inputs</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>paths</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Drops the database <code>$db</code> and all connected resources.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0007 <code>$db</code> is opened by another process.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:drop</xqdoc:name>
      <xqdoc:signature>declare function db:drop($db as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Adds documents specified by <code>$input</code> to the database <code>$db</code> and the specified <code>$path</code> . A document with the same path may occur more than once in a database. If this is unwanted, <a href="#db:replace">db:replace</a> can be used.
<code>$input</code> may be a string or a node different than attribute. If the <code>$input</code> source is not a file or a folder, <code>$path</code> must be specified.
The <code>$options</code> argument can be used to control parsing. The syntax is identical to the <a href="#db:create">db:create</a> function. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 <code>$input</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$input</code> is neither string nor a document node.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:add</xqdoc:name>
      <xqdoc:signature>declare function db:add($db as xs:string, $input as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Adds documents specified by <code>$input</code> to the database <code>$db</code> and the specified <code>$path</code> . A document with the same path may occur more than once in a database. If this is unwanted, <a href="#db:replace">db:replace</a> can be used.
<code>$input</code> may be a string or a node different than attribute. If the <code>$input</code> source is not a file or a folder, <code>$path</code> must be specified.
The <code>$options</code> argument can be used to control parsing. The syntax is identical to the <a href="#db:create">db:create</a> function. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 <code>$input</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$input</code> is neither string nor a document node.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:add</xqdoc:name>
      <xqdoc:signature>declare function db:add($db as xs:string, $input as item(), $path as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Adds documents specified by <code>$input</code> to the database <code>$db</code> and the specified <code>$path</code> . A document with the same path may occur more than once in a database. If this is unwanted, <a href="#db:replace">db:replace</a> can be used.
<code>$input</code> may be a string or a node different than attribute. If the <code>$input</code> source is not a file or a folder, <code>$path</code> must be specified.
The <code>$options</code> argument can be used to control parsing. The syntax is identical to the <a href="#db:create">db:create</a> function. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 <code>$input</code> points to an unknown resource.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$input</code> is neither string nor a document node.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:add</xqdoc:name>
      <xqdoc:signature>declare function db:add($db as xs:string, $input as item(), $path as xs:string, $options as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Deletes document(s), specified by <code>$path</code> , from the database <code>$db</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:delete</xqdoc:name>
      <xqdoc:signature>declare function db:delete($db as xs:string, $path as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a copy of the database specified by <code>$db</code> to <code>$newname</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 Invalid database name.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0016 Name of source and target database is equal.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:copy</xqdoc:name>
      <xqdoc:signature>declare function db:copy($db as xs:string, $newname as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>newname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Renames the database specified by <code>$db</code> to <code>$newname</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 Invalid database name.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0016 Name of source and target database is equal.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:alter</xqdoc:name>
      <xqdoc:signature>declare function db:alter($db as xs:string, $newname as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>newname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates a backup of the database <code>$db</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 Invalid database name.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:create-backup</xqdoc:name>
      <xqdoc:signature>declare function db:create-backup($db as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Drops all backups of the database with the specified <code>$name</code> . If the given <code>$name</code> points to a specific backup file, only this specific backup file is deleted.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 No backup file found.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0011 Invalid database name.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:drop-backup</xqdoc:name>
      <xqdoc:signature>declare function db:drop-backup($name as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Restores the database with the specified <code>$name</code> . The <code>$name</code> may include the timestamp of the backup file.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0011 Invalid database name.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0015 No backup found.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:restore</xqdoc:name>
      <xqdoc:signature>declare function db:restore($name as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Optimizes the meta data and indexes of the database <code>$db</code> .
If <code>$all</code> is <code>true</code> , the complete database will be rebuilt.
The <code>$options</code> argument can be used to control indexing. The syntax is identical to the <a href="#db:create">db:create</a> function: Allowed options are all <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options. <a href="http://docs.basex.org/wiki/Options#UPDINDEX">UPDINDEX</a> is only allowed if <code>$all</code> is <code>true</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0002 an error occurred while optimizing the database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:optimize</xqdoc:name>
      <xqdoc:signature>declare function db:optimize($db as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Optimizes the meta data and indexes of the database <code>$db</code> .
If <code>$all</code> is <code>true</code> , the complete database will be rebuilt.
The <code>$options</code> argument can be used to control indexing. The syntax is identical to the <a href="#db:create">db:create</a> function: Allowed options are all <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options. <a href="http://docs.basex.org/wiki/Options#UPDINDEX">UPDINDEX</a> is only allowed if <code>$all</code> is <code>true</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0002 an error occurred while optimizing the database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:optimize</xqdoc:name>
      <xqdoc:signature>declare function db:optimize($db as xs:string, $all as xs:boolean) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>all</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Optimizes the meta data and indexes of the database <code>$db</code> .
If <code>$all</code> is <code>true</code> , the complete database will be rebuilt.
The <code>$options</code> argument can be used to control indexing. The syntax is identical to the <a href="#db:create">db:create</a> function: Allowed options are all <a href="http://docs.basex.org/wiki/Options#Indexing">indexing</a> and <a href="http://docs.basex.org/wiki/Options#Full-Text">full-text</a> options. <a href="http://docs.basex.org/wiki/Options#UPDINDEX">UPDINDEX</a> is only allowed if <code>$all</code> is <code>true</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0002 an error occurred while optimizing the database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:optimize</xqdoc:name>
      <xqdoc:signature>declare function db:optimize($db as xs:string, $all as xs:boolean, $options as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>all</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Renames document(s), specified by <code>$path</code> to <code>$newpath</code> in the database <code>$db</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0008 new document names would be empty.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:rename</xqdoc:name>
      <xqdoc:signature>declare function db:rename($db as xs:string, $path as xs:string, $newpath as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>newpath</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Replaces a document, specified by <code>$path</code> , in the database <code>$db</code> with the content of <code>$input</code> , or adds it as a new document.
The <code>$options</code> argument can be used to control parsing. The syntax is identical to the <a href="#db:create">db:create</a> function: Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0014 <code>$path</code> points to a directory.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 <code>$input</code> is a string representing a path, which cannot be read.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$input</code> is neither a string nor a document node.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:replace</xqdoc:name>
      <xqdoc:signature>declare function db:replace($db as xs:string, $path as xs:string, $input as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>Replaces a document, specified by <code>$path</code> , in the database <code>$db</code> with the content of <code>$input</code> , or adds it as a new document.
The <code>$options</code> argument can be used to control parsing. The syntax is identical to the <a href="#db:create">db:create</a> function: Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0014 <code>$path</code> points to a directory.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 <code>$input</code> is a string representing a path, which cannot be read.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0001 <code>$input</code> is neither a string nor a document node.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:replace</xqdoc:name>
      <xqdoc:signature>declare function db:replace($db as xs:string, $path as xs:string, $input as item(), $options as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Stores a binary resource specified by <code>$input</code> in the database <code>$db</code> and the location specified by <code>$path</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0003 the database is not <i>persistent</i> (stored on disk).</xqdoc:error>
        <xqdoc:error>bxerr:FODC0007 the specified path is invalid.</xqdoc:error>
        <xqdoc:error>bxerr:FOUP0002 the resource cannot be stored at the specified location.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:store</xqdoc:name>
      <xqdoc:signature>declare function db:store($db as xs:string, $path as xs:string, $input as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function can be used to both perform updates and return results in a single query. The argument of the function will be evaluated, and the resulting items will be cached and returned after the updates on the <i>pending update list</i> have been processed. As nodes may be updated, they will be copied before being cached.
The function can only be used together with <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> ; if the function is called within a transform expression, its results will be discarded.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>db:output</xqdoc:name>
      <xqdoc:signature>declare function db:output($result as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>result</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Explicitly flushes the buffers of the database <code>$db</code> . This command is only useful if <a href="http://docs.basex.org/wiki/Options#AUTOFLUSH">AUTOFLUSH</a> has been set to <code>false</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:flush</xqdoc:name>
      <xqdoc:signature>declare function db:flush($db as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the name of the database in which the specified <a href="#Database_Nodes">database node</a>  <code>$node</code> is stored.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0001 <code>$nodes</code> contains a node which is not stored in a database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:name</xqdoc:name>
      <xqdoc:signature>declare function db:name($node as node()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>node</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the path of the database document in which the specified <a href="#Database_Nodes">database node</a>  <code>$node</code> is stored.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0001 <code>$nodes</code> contains a node which is not stored in a database.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:path</xqdoc:name>
      <xqdoc:signature>declare function db:path($node as node()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>node</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Checks if the database <code>$db</code> or the resource specified by <code>$path</code> exists. <code>false</code> is returned if a database directory has been addressed.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>db:exists</xqdoc:name>
      <xqdoc:signature>declare function db:exists($db as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Checks if the database <code>$db</code> or the resource specified by <code>$path</code> exists. <code>false</code> is returned if a database directory has been addressed.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>db:exists</xqdoc:name>
      <xqdoc:signature>declare function db:exists($db as xs:string, $path as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Checks if the specified resource in the database <code>$db</code> and the path <code>$path</code> exists, and if it is a <a href="http://docs.basex.org/wiki/Binary_Data">binary resource</a> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:is-raw</xqdoc:name>
      <xqdoc:signature>declare function db:is-raw($db as xs:string, $path as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Checks if the specified resource in the database <code>$db</code> and the path <code>$path</code> exists, and if it is an XML document.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:is-xml</xqdoc:name>
      <xqdoc:signature>declare function db:is-xml($db as xs:string, $path as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Retrieves the content type of a resource in the database <code>$db</code> and the path <code>$path</code> .
The file extension is used to recognize the content-type of a resource stored in the database. Content-type <code>application/xml</code> will be returned for any XML document stored in the database, regardless of its file name extension.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:FODC0002 the addressed resource is not found or cannot be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>db:content-type</xqdoc:name>
      <xqdoc:signature>declare function db:content-type($db as xs:string, $path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/fetch</xqdoc:uri>
    <xqdoc:name>fetch.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> provides simple functions to fetch the content of resources identified by URIs. Resources can be stored locally or remotely and e.g. use the <code>file://</code> or <code>http://</code> scheme. If more control over HTTP requests is required, the <a href="http://docs.basex.org/wiki/HTTP_Module">HTTP Module</a> can be used. With the <a href="http://docs.basex.org/wiki/HTML_Module">HTML Module</a> , retrieved HTML documents can be converted to XML. The module has initially been inspired by <a href="http://www.zorba.io/documentation/2.9/modules/www.zorba-xquery.com_modules_fetch.html">Zorba’s Fetch Module</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="fetch" uri="http://basex.org/modules/fetch"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Fetches the resource referred to by the given URI and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:base64Binary</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXFE0001 the URI could not be resolved, or the resource could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>fetch:binary</xqdoc:name>
      <xqdoc:signature>declare function fetch:binary($uri as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Fetches the resource referred to by the given URI and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:string</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXFE0001 the URI could not be resolved, or the resource could not be retrieved. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:BXFE0002 the specified encoding is not supported, or unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>fetch:text</xqdoc:name>
      <xqdoc:signature>declare function fetch:text($uri as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Fetches the resource referred to by the given URI and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:string</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXFE0001 the URI could not be resolved, or the resource could not be retrieved. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
        <xqdoc:error>bxerr:BXFE0002 the specified encoding is not supported, or unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>fetch:text</xqdoc:name>
      <xqdoc:signature>declare function fetch:text($uri as xs:string, $encoding as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Fetches the resource referred to by the given <code>$uri</code> and returns it as an XML document.
The <code>$options</code> argument can be used to change the parsing behavior. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options in lower case. Options can be specified either...
<ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g. </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;chop value='false'/&gt; &lt;/options&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "chop": false() } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXFE0001 the URI could not be resolved, or the resource could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>fetch:xml</xqdoc:name>
      <xqdoc:signature>declare function fetch:xml($uri as xs:string) as document-node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Fetches the resource referred to by the given <code>$uri</code> and returns it as an XML document.
The <code>$options</code> argument can be used to change the parsing behavior. Allowed options are all <a href="http://docs.basex.org/wiki/Options#Parsing">parsing</a> and <a href="http://docs.basex.org/wiki/Options#XML_Parsing">XML parsing</a> options in lower case. Options can be specified either...
<ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g. </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;chop value='false'/&gt; &lt;/options&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "chop": false() } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXFE0001 the URI could not be resolved, or the resource could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>fetch:xml</xqdoc:name>
      <xqdoc:signature>declare function fetch:xml($uri as xs:string, $options as item()) as document-node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the content-type (also called mime-type) of the resource specified by <code>$uri</code> : <ul> <li> If a remote resource is addressed, the request header will be evaluated. </li> <li> If the addressed resource is locally stored, the content-type will be guessed based on the file extension. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXFE0001 the URI could not be resolved, or the resource could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>fetch:content-type</xqdoc:name>
      <xqdoc:signature>declare function fetch:content-type($uri as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://expath.org/ns/file</xqdoc:uri>
    <xqdoc:name>file.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions related to file system operations, such as listing, reading, or writing files. This module is based on the <a href="http://expath.org/spec/file">EXPath File Module</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="file" uri="http://expath.org/ns/file"/>
    <xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Lists all files and directories found in the specified <code>$dir</code> . The returned paths are relative to the provided path.
The optional parameter <code>$recursive</code> specifies whether sub-directories will be traversed, too.
The optional parameter <code>$pattern</code> defines a file name pattern in the <a href="http://docs.basex.org/wiki/Commands#Glob_Syntax">Glob Syntax</a> . If present, only those files and directories are returned that correspond to the pattern. Several patterns can be separated with a comma ( <code>,</code> ).</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:no-dir the specified path does not point to a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:list</xqdoc:name>
      <xqdoc:signature>declare function file:list($dir as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Lists all files and directories found in the specified <code>$dir</code> . The returned paths are relative to the provided path.
The optional parameter <code>$recursive</code> specifies whether sub-directories will be traversed, too.
The optional parameter <code>$pattern</code> defines a file name pattern in the <a href="http://docs.basex.org/wiki/Commands#Glob_Syntax">Glob Syntax</a> . If present, only those files and directories are returned that correspond to the pattern. Several patterns can be separated with a comma ( <code>,</code> ).</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:no-dir the specified path does not point to a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:list</xqdoc:name>
      <xqdoc:signature>declare function file:list($dir as xs:string, $recursive as xs:boolean) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>recursive</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Lists all files and directories found in the specified <code>$dir</code> . The returned paths are relative to the provided path.
The optional parameter <code>$recursive</code> specifies whether sub-directories will be traversed, too.
The optional parameter <code>$pattern</code> defines a file name pattern in the <a href="http://docs.basex.org/wiki/Commands#Glob_Syntax">Glob Syntax</a> . If present, only those files and directories are returned that correspond to the pattern. Several patterns can be separated with a comma ( <code>,</code> ).</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:no-dir the specified path does not point to a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:list</xqdoc:name>
      <xqdoc:signature>declare function file:list($dir as xs:string, $recursive as xs:boolean, $pattern as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>recursive</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pattern</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the full paths to all files and directories found in the specified <code>$dir</code> .
The inverse function is <a href="#file:parent">file:parent</a> . The related function <a href="#file:list">file:list</a> returns relative file paths.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:no-dir the specified path does not point to a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:children</xqdoc:name>
      <xqdoc:signature>declare function file:children($dir as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Reads the binary content of the file specified by <code>$path</code> and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:base64Binary</code> .
The optional parameters <code>$offset</code> and <code>$length</code> can be used to read chunks of a file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:out-of-range the offset or length is negative, or the chosen values would exceed the file bounds.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-binary</xqdoc:name>
      <xqdoc:signature>declare function file:read-binary($path as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Reads the binary content of the file specified by <code>$path</code> and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:base64Binary</code> .
The optional parameters <code>$offset</code> and <code>$length</code> can be used to read chunks of a file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:out-of-range the offset or length is negative, or the chosen values would exceed the file bounds.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-binary</xqdoc:name>
      <xqdoc:signature>declare function file:read-binary($path as xs:string, $offset as xs:integer) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Reads the binary content of the file specified by <code>$path</code> and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:base64Binary</code> .
The optional parameters <code>$offset</code> and <code>$length</code> can be used to read chunks of a file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:out-of-range the offset or length is negative, or the chosen values would exceed the file bounds.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-binary</xqdoc:name>
      <xqdoc:signature>declare function file:read-binary($path as xs:string, $offset as xs:integer, $length as xs:integer) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>length</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Reads the textual contents of the file specified by <code>$path</code> and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:string</code> .
The optional parameter <code>$encoding</code> defines the encoding of the file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-text</xqdoc:name>
      <xqdoc:signature>declare function file:read-text($path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Reads the textual contents of the file specified by <code>$path</code> and returns it as <a href="http://docs.basex.org/wiki/Streaming_Module">streamable</a>  <code>xs:string</code> .
The optional parameter <code>$encoding</code> defines the encoding of the file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason. Invalid XML characters will be ignored if the <code> <a href="http://docs.basex.org/wiki/Options#CHECKSTRINGS">CHECKSTRINGS</a> </code> option is turned off.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-text</xqdoc:name>
      <xqdoc:signature>declare function file:read-text($path as xs:string, $encoding as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items.
The optional parameter <code>$encoding</code> defines the encoding of the file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-text-lines</xqdoc:name>
      <xqdoc:signature>declare function file:read-text-lines($path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Reads the textual contents of the file specified by <code>$path</code> and returns it as a sequence of <code>xs:string</code> items.
The optional parameter <code>$encoding</code> defines the encoding of the file.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:read-text-lines</xqdoc:name>
      <xqdoc:signature>declare function file:read-text-lines($path as xs:string, $encoding as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates the directory specified by <code>$dir</code> , including all non-existing parent directories.</xqdoc:description>
        <xqdoc:error>output:exists a file with the same path already exists.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:create-dir</xqdoc:name>
      <xqdoc:signature>declare function file:create-dir($dir as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a new temporary directory that did not exist before this function was called, and returns its full file path. The directory name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code> . If no directory is specified via <code>$dir</code> , the directory will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.</xqdoc:description>
        <xqdoc:error>output:no-dir the specified directory points to a file.</xqdoc:error>
        <xqdoc:error>output:io-error the directory could not be created.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:create-temp-dir</xqdoc:name>
      <xqdoc:signature>declare function file:create-temp-dir($prefix as xs:string, $suffix as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>suffix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a new temporary directory that did not exist before this function was called, and returns its full file path. The directory name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code> . If no directory is specified via <code>$dir</code> , the directory will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.</xqdoc:description>
        <xqdoc:error>output:no-dir the specified directory points to a file.</xqdoc:error>
        <xqdoc:error>output:io-error the directory could not be created.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:create-temp-dir</xqdoc:name>
      <xqdoc:signature>declare function file:create-temp-dir($prefix as xs:string, $suffix as xs:string, $dir as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>suffix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a new temporary file that did not exist before this function was called, and returns its full file path. The file name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code> . If no directory is specified via <code>$dir</code> , the file will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.</xqdoc:description>
        <xqdoc:error>output:no-dir the specified directory points to a file.</xqdoc:error>
        <xqdoc:error>output:io-error the directory could not be created.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:create-temp-file</xqdoc:name>
      <xqdoc:signature>declare function file:create-temp-file($prefix as xs:string, $suffix as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>suffix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a new temporary file that did not exist before this function was called, and returns its full file path. The file name begins and ends with the specified <code>$prefix</code> and <code>$suffix</code> . If no directory is specified via <code>$dir</code> , the file will be placed in the system’s default temporary directory. The operation will create all non-existing parent directories.</xqdoc:description>
        <xqdoc:error>output:no-dir the specified directory points to a file.</xqdoc:error>
        <xqdoc:error>output:io-error the directory could not be created.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:create-temp-file</xqdoc:name>
      <xqdoc:signature>declare function file:create-temp-file($prefix as xs:string, $suffix as xs:string, $dir as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>suffix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Recursively deletes a file or directory specified by <code>$path</code> .
The optional parameter <code>$recursive</code> specifies whether sub-directories will be deleted, too.</xqdoc:description>
        <xqdoc:error>output:not-found the specified path does not exist.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:delete</xqdoc:name>
      <xqdoc:signature>declare function file:delete($path as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Recursively deletes a file or directory specified by <code>$path</code> .
The optional parameter <code>$recursive</code> specifies whether sub-directories will be deleted, too.</xqdoc:description>
        <xqdoc:error>output:not-found the specified path does not exist.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:delete</xqdoc:name>
      <xqdoc:signature>declare function file:delete($path as xs:string, $recursive as xs:boolean) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>recursive</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Writes a serialized sequence of items to the specified file. If the file already exists, it will be overwritten.
The <code>$params</code> argument contains serialization parameters (see <a href="http://docs.basex.org/wiki/Serialization">Serialization</a> for more details), which can either be specified
<ul> <li> as children of an <code>&lt;output:serialization-parameters/&gt;</code> element, as defined for the <a href="http://www.w3.org/TR/xpath-functions-30/#func-serialize">fn:serialize()</a> function; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;output:serialization-parameters&gt; &lt;output:method value='xml'/&gt; &lt;output:cdata-section-elements value="div"/&gt; ... &lt;/output:serialization-parameters&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "method": "xml", "cdata-section-elements": "div", ... } </pre>
        </xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write</xqdoc:name>
      <xqdoc:signature>declare function file:write($path as xs:string, $items as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Writes a serialized sequence of items to the specified file. If the file already exists, it will be overwritten.
The <code>$params</code> argument contains serialization parameters (see <a href="http://docs.basex.org/wiki/Serialization">Serialization</a> for more details), which can either be specified
<ul> <li> as children of an <code>&lt;output:serialization-parameters/&gt;</code> element, as defined for the <a href="http://www.w3.org/TR/xpath-functions-30/#func-serialize">fn:serialize()</a> function; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;output:serialization-parameters&gt; &lt;output:method value='xml'/&gt; &lt;output:cdata-section-elements value="div"/&gt; ... &lt;/output:serialization-parameters&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "method": "xml", "cdata-section-elements": "div", ... } </pre>
        </xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write</xqdoc:name>
      <xqdoc:signature>declare function file:write($path as xs:string, $items as item()*, $params as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>params</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Writes a binary item (xs:base64Binary, xs:hexBinary) to the specified file. If the file already exists, it will be overwritten.
If <code>$offset</code> is specified, data will be written at this file position. An existing file may be resized by that operation.</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:out-of-range the offset is negative, or it exceeds the current file size.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write-binary</xqdoc:name>
      <xqdoc:signature>declare function file:write-binary($path as xs:string, $value as xs:anyAtomicType) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Writes a binary item (xs:base64Binary, xs:hexBinary) to the specified file. If the file already exists, it will be overwritten.
If <code>$offset</code> is specified, data will be written at this file position. An existing file may be resized by that operation.</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:out-of-range the offset is negative, or it exceeds the current file size.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write-binary</xqdoc:name>
      <xqdoc:signature>declare function file:write-binary($path as xs:string, $value as xs:anyAtomicType, $offset as xs:integer) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>offset</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Writes a string to the specified file. If the file already exists, it will be overwritten.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write-text</xqdoc:name>
      <xqdoc:signature>declare function file:write-text($path as xs:string, $value as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Writes a string to the specified file. If the file already exists, it will be overwritten.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write-text</xqdoc:name>
      <xqdoc:signature>declare function file:write-text($path as xs:string, $value as xs:string, $encoding as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Writes a sequence of strings to the specified file, each followed by the system specific newline character. If the file already exists, it will be overwritten.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write-text-lines</xqdoc:name>
      <xqdoc:signature>declare function file:write-text-lines($path as xs:string, $values as xs:string*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>values</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Writes a sequence of strings to the specified file, each followed by the system specific newline character. If the file already exists, it will be overwritten.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:write-text-lines</xqdoc:name>
      <xqdoc:signature>declare function file:write-text-lines($path as xs:string, $values as xs:string*, $encoding as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>values</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Appends a serialized sequence of items to the specified file. If the file does not exists, a new file is created.</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append</xqdoc:name>
      <xqdoc:signature>declare function file:append($path as xs:string, $items as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Appends a serialized sequence of items to the specified file. If the file does not exists, a new file is created.</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append</xqdoc:name>
      <xqdoc:signature>declare function file:append($path as xs:string, $items as item()*, $params as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>params</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Appends a binary item (xs:base64Binary, xs:hexBinary) to the specified file. If the file does not exists, a new one is created.</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append-binary</xqdoc:name>
      <xqdoc:signature>declare function file:append-binary($path as xs:string, $value as xs:anyAtomicType) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Appends a string to a file specified by <code>$path</code> . If the specified file does not exists, a new file is created.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append-text</xqdoc:name>
      <xqdoc:signature>declare function file:append-text($path as xs:string, $value as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Appends a string to a file specified by <code>$path</code> . If the specified file does not exists, a new file is created.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append-text</xqdoc:name>
      <xqdoc:signature>declare function file:append-text($path as xs:string, $value as xs:string, $encoding as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Appends a sequence of strings to the specified file, each followed by the system specific newline character. If the specified file does not exists, a new file is created.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append-text-lines</xqdoc:name>
      <xqdoc:signature>declare function file:append-text-lines($path as xs:string, $values as xs:string*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>values</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Appends a sequence of strings to the specified file, each followed by the system specific newline character. If the specified file does not exists, a new file is created.
The optional parameter <code>$encoding</code> defines the output encoding (default: UTF-8).</xqdoc:description>
        <xqdoc:error>output:no-dir the parent of specified path is no directory.</xqdoc:error>
        <xqdoc:error>output:is-dir the specified path is a directory.</xqdoc:error>
        <xqdoc:error>output:unknown-encoding the specified encoding is not supported, or unknown.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:append-text-lines</xqdoc:name>
      <xqdoc:signature>declare function file:append-text-lines($path as xs:string, $values as xs:string*, $encoding as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>values</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Copies a file or directory specified by <code>$source</code> to the file or directory specified by <code>$target</code> . If the target file already exists, it will be overwritten. No operation will be performed if the source and target path are equal.</xqdoc:description>
        <xqdoc:error>output:not-found the specified source does not exist.</xqdoc:error>
        <xqdoc:error>output:exists the specified source is a directory and the target is a file.</xqdoc:error>
        <xqdoc:error>output:no-dir the parent of the specified target is no directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:copy</xqdoc:name>
      <xqdoc:signature>declare function file:copy($source as xs:string, $target as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>source</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>target</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Moves or renames the file or directory specified by <code>$source</code> to the path specified by <code>$target</code> . If the target file already exists, it will be overwritten. No operation will be performed if the source and target path are equal.</xqdoc:description>
        <xqdoc:error>output:not-found the specified source does not exist.</xqdoc:error>
        <xqdoc:error>output:exists the specified source is a directory and the target is a file.</xqdoc:error>
        <xqdoc:error>output:no-dir the parent of the specified target is no directory.</xqdoc:error>
        <xqdoc:error>output:io-error the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:move</xqdoc:name>
      <xqdoc:signature>declare function file:move($source as xs:string, $target as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>source</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>target</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:boolean</code> indicating whether a file or directory specified by <code>$path</code> exists in the file system.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:exists</xqdoc:name>
      <xqdoc:signature>declare function file:exists($path as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> points to an existing directory.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:is-dir</xqdoc:name>
      <xqdoc:signature>declare function file:is-dir($path as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an <code>xs:boolean</code> indicating whether the argument <code>$path</code> points to an existing file.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:is-file</xqdoc:name>
      <xqdoc:signature>declare function file:is-file($path as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Retrieves the timestamp of the last modification of the file or directory specified by <code>$path</code> .</xqdoc:description>
        <xqdoc:error>output:not-found the specified path does not exist.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:last-modified</xqdoc:name>
      <xqdoc:signature>declare function file:last-modified($path as xs:string) as xs:dateTime external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:dateTime</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the size, in bytes, of the file specified by <code>$path</code> , or <code>0</code> for directories.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:size</xqdoc:name>
      <xqdoc:signature>declare function file:size($file as xs:string) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>file</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the name of a file or directory specified by <code>$path</code> . An empty string is returned if the path points to the root directory.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:name</xqdoc:name>
      <xqdoc:signature>declare function file:name($path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the absolute path to the parent directory of a file or directory specified by <code>$path</code> . An empty sequence is returned if the path points to a root directory.
The inverse function is <a href="#file:children">file:children</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:parent</xqdoc:name>
      <xqdoc:signature>declare function file:parent($path as xs:string) as xs:string? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Transforms the <code>$path</code> argument to its native representation on the operating system.</xqdoc:description>
        <xqdoc:error>output:not-found the specified file does not exist.</xqdoc:error>
        <xqdoc:error>output:io-error the specified path cannot be transformed to its native representation.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>file:path-to-native</xqdoc:name>
      <xqdoc:signature>declare function file:path-to-native($path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Transforms the <code>$path</code> argument to an absolute operating system path.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:resolve-path</xqdoc:name>
      <xqdoc:signature>declare function file:resolve-path($path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Transforms the path specified by <code>$path</code> into a URI with the <code>file://</code> scheme.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:path-to-uri</xqdoc:name>
      <xqdoc:signature>declare function file:path-to-uri($path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the directory separator used by the operating system, such as <code>/</code> or <code>\</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:dir-separator</xqdoc:name>
      <xqdoc:signature>declare function file:dir-separator() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the path separator used by the operating system, such as <code>;</code> or <code>:</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:path-separator</xqdoc:name>
      <xqdoc:signature>declare function file:path-separator() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the line separator used by the operating system, such as <code>&amp;#10;</code> , <code>&amp;#13;&amp;#10;</code> or <code>&amp;#13;</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:line-separator</xqdoc:name>
      <xqdoc:signature>declare function file:line-separator() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the system’s default temporary-file directory.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:temp-dir</xqdoc:name>
      <xqdoc:signature>declare function file:temp-dir() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the current working directory. - This function returns the same result as the function call <code>file:resolve-path(<i>)</i> </code> <i>
</i>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:current-dir</xqdoc:name>
      <xqdoc:signature>declare function file:current-dir() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the parent directory of the static base URI. If the Base URI property is undefined, the empty sequence is returned. - If a static base URI exists, and if points to a local file path, this function returns the same result as the expression <code>file:parent(static-base-uri())</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>file:base-dir</xqdoc:name>
      <xqdoc:signature>declare function file:base-dir() as xs:string? external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/ft</xqdoc:uri>
    <xqdoc:name>ft.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> extends the <a href="http://www.w3.org/TR/xpath-full-text-10">W3C Full Text Recommendation</a> with some useful functions: The index can be directly accessed, full-text results can be marked with additional elements, or the relevant parts can be extracted. Moreover, the score value, which is generated by the <code>contains text</code> expression, can be explicitly requested from items.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="ft" uri="http://basex.org/modules/ft"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns all text nodes from the full-text index of the database <code>$db</code> that contain the specified <code>$terms</code> .
The options used for tokenizing the input and building the full-text will also be applied to the search terms. As an example, if the index terms have been stemmed, the search string will be stemmed as well. <p>The <code>$options</code> argument can be used to control full-text processing. Options can be either specified
</p>  <ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;key1 value='value1'/&gt; ... &lt;/options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "key1": "value1", ... } </pre>  <p>The following options are supported (the introduction on <a href="http://docs.basex.org/wiki/Full-Text">Full-Text</a> processing gives you equivalent expressions in the XQuery Full-Text notation): </p>  <ul> <li> <code>mode</code>: determines the mode how tokens are searched. Allowed values are <code>any</code>, <code>any word</code>, <code>all</code>, <code>all words</code>, and <code>phrase</code>. <code>any</code> is the default search mode. </li> <li> <code>fuzzy</code>: turns fuzzy querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, fuzzy querying is turned off. </li> <li> <code>wildcards</code>: turns wildcard querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, wildcard querying is turned off. </li> <li> <code>ordered</code>: requires that all tokens occur in the order in which they are specified. Allowed values are <code>true</code> and <code>false</code>. The default is <code>false</code>. </li> <li> <code>content</code>: specifies that the matched tokens need to occur at the beginning or end of a searched string, or need to cover the entire string. Allowed values are <code>start</code>, <code>end</code>, and <code>entire</code>. By default, the option is turned off. </li> <li> <code>scope</code>: defines the scope in which tokens must be located. The option has following sub options: <ul> <li> <code>same</code>: can be set to <code>true</code> or <code>false</code>. It specifies if tokens need to occur in the same or different units. </li> <li> <code>unit</code>: can be <code>sentence</code> or <code>paragraph</code>. It specifies the unit for finding tokens. </li> </ul> </li> <li> <code>window</code>: sets up a window in which all tokens must be located. By default, the option is turned off. It has following sub options: <ul> <li> <code>size</code>: specifies the size of the window in terms of <i>units</i>. </li> <li> <code>unit</code>: can be <code>sentences</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>. </li> </ul> </li> <li> <code>distance</code>: specifies the distance in which tokens must occur. By default, the option is turned off. It has following sub options: <ul> <li> <code>min</code>: specifies the minimum distance in terms of <i>units</i>. The default is <code>0</code>. </li> <li> <code>max</code>: specifies the maximum distance in terms of <i>units</i>. The default is <code>∞</code>. </li> <li> <code>unit</code>: can be <code>words</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>. </li> </ul> </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the full-text index is not available.</xqdoc:error>
        <xqdoc:error>bxerr:BXFT0001 the fuzzy and wildcard option cannot be both specified.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>ft:search</xqdoc:name>
      <xqdoc:signature>declare function ft:search($db as xs:string, $terms as item()*) as text()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>terms</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">text()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns all text nodes from the full-text index of the database <code>$db</code> that contain the specified <code>$terms</code> .
The options used for tokenizing the input and building the full-text will also be applied to the search terms. As an example, if the index terms have been stemmed, the search string will be stemmed as well. <p>The <code>$options</code> argument can be used to control full-text processing. Options can be either specified
</p>  <ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;key1 value='value1'/&gt; ... &lt;/options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "key1": "value1", ... } </pre>  <p>The following options are supported (the introduction on <a href="http://docs.basex.org/wiki/Full-Text">Full-Text</a> processing gives you equivalent expressions in the XQuery Full-Text notation): </p>  <ul> <li> <code>mode</code>: determines the mode how tokens are searched. Allowed values are <code>any</code>, <code>any word</code>, <code>all</code>, <code>all words</code>, and <code>phrase</code>. <code>any</code> is the default search mode. </li> <li> <code>fuzzy</code>: turns fuzzy querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, fuzzy querying is turned off. </li> <li> <code>wildcards</code>: turns wildcard querying on or off. Allowed values are <code>true</code> and <code>false</code>. By default, wildcard querying is turned off. </li> <li> <code>ordered</code>: requires that all tokens occur in the order in which they are specified. Allowed values are <code>true</code> and <code>false</code>. The default is <code>false</code>. </li> <li> <code>content</code>: specifies that the matched tokens need to occur at the beginning or end of a searched string, or need to cover the entire string. Allowed values are <code>start</code>, <code>end</code>, and <code>entire</code>. By default, the option is turned off. </li> <li> <code>scope</code>: defines the scope in which tokens must be located. The option has following sub options: <ul> <li> <code>same</code>: can be set to <code>true</code> or <code>false</code>. It specifies if tokens need to occur in the same or different units. </li> <li> <code>unit</code>: can be <code>sentence</code> or <code>paragraph</code>. It specifies the unit for finding tokens. </li> </ul> </li> <li> <code>window</code>: sets up a window in which all tokens must be located. By default, the option is turned off. It has following sub options: <ul> <li> <code>size</code>: specifies the size of the window in terms of <i>units</i>. </li> <li> <code>unit</code>: can be <code>sentences</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>. </li> </ul> </li> <li> <code>distance</code>: specifies the distance in which tokens must occur. By default, the option is turned off. It has following sub options: <ul> <li> <code>min</code>: specifies the minimum distance in terms of <i>units</i>. The default is <code>0</code>. </li> <li> <code>max</code>: specifies the maximum distance in terms of <i>units</i>. The default is <code>∞</code>. </li> <li> <code>unit</code>: can be <code>words</code>, <code>sentences</code> or <code>paragraphs</code>. The default is <code>words</code>. </li> </ul> </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the full-text index is not available.</xqdoc:error>
        <xqdoc:error>bxerr:BXFT0001 the fuzzy and wildcard option cannot be both specified.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>ft:search</xqdoc:name>
      <xqdoc:signature>declare function ft:search($db as xs:string, $terms as item()*, $options as item()) as text()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>terms</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">text()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Checks if the specified <code>$input</code> items contain the specified <code>$terms</code> .
The function does the same as the <a href="http://docs.basex.org/wiki/Full-Text">Full-Text</a> expression <code>contains text</code> , but options can be specified more dynamically. The <code>$options</code> are the same as for <a href="#ft:search">ft:search</a> , and the following ones in addition: <ul> <li> <code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case insensitive. </li> <li> <code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive. </li> <li> <code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off. </li> <li> <code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXFT0001 the fuzzy and wildcard option cannot be both specified.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>ft:contains</xqdoc:name>
      <xqdoc:signature>declare function ft:contains($input as item()*, $terms as item()*) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>terms</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Checks if the specified <code>$input</code> items contain the specified <code>$terms</code> .
The function does the same as the <a href="http://docs.basex.org/wiki/Full-Text">Full-Text</a> expression <code>contains text</code> , but options can be specified more dynamically. The <code>$options</code> are the same as for <a href="#ft:search">ft:search</a> , and the following ones in addition: <ul> <li> <code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case insensitive. </li> <li> <code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive. </li> <li> <code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off. </li> <li> <code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXFT0001 the fuzzy and wildcard option cannot be both specified.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>ft:contains</xqdoc:name>
      <xqdoc:signature>declare function ft:contains($input as item()*, $terms as item()*, $options as item()) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>terms</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Puts a marker element around the resulting <code>$nodes</code> of a full-text index request.
The default name of the marker element is <code>mark</code> . An alternative name can be chosen via the optional <code>$name</code> argument.
Please note that: <ul> <li> the full-text expression that computes the token positions must be specified as argument of the <code>ft:mark()</code> function, as all position information is lost in subsequent processing steps. You may need to specify more than one full-text expression if you want to use the function in a FLWOR expression, as shown in Example 2. </li> <li> the XML node to be transformed must be an internal "database" node. The <code>transform</code> expression can be used to apply the method to a main-memory fragment, as shown in Example 3. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:mark</xqdoc:name>
      <xqdoc:signature>declare function ft:mark($nodes as node()*) as node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Puts a marker element around the resulting <code>$nodes</code> of a full-text index request.
The default name of the marker element is <code>mark</code> . An alternative name can be chosen via the optional <code>$name</code> argument.
Please note that: <ul> <li> the full-text expression that computes the token positions must be specified as argument of the <code>ft:mark()</code> function, as all position information is lost in subsequent processing steps. You may need to specify more than one full-text expression if you want to use the function in a FLWOR expression, as shown in Example 2. </li> <li> the XML node to be transformed must be an internal "database" node. The <code>transform</code> expression can be used to apply the method to a main-memory fragment, as shown in Example 3. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:mark</xqdoc:name>
      <xqdoc:signature>declare function ft:mark($nodes as node()*, $name as xs:string) as node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.
The default tag name of the marker element is <code>mark</code> . An alternative tag name can be chosen via the optional <code>$name</code> argument.
The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.
For more details on this function, please have a look at <a href="#ft:mark">ft:mark</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:extract</xqdoc:name>
      <xqdoc:signature>declare function ft:extract($nodes as node()*) as node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.
The default tag name of the marker element is <code>mark</code> . An alternative tag name can be chosen via the optional <code>$name</code> argument.
The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.
For more details on this function, please have a look at <a href="#ft:mark">ft:mark</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:extract</xqdoc:name>
      <xqdoc:signature>declare function ft:extract($nodes as node()*, $name as xs:string) as node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Extracts and returns relevant parts of full-text results. It puts a marker element around the resulting <code>$nodes</code> of a full-text index request and chops irrelevant sections of the result.
The default tag name of the marker element is <code>mark</code> . An alternative tag name can be chosen via the optional <code>$name</code> argument.
The default length of the returned text is <code>150</code> characters. An alternative length can be specified via the optional <code>$length</code> argument. Note that the effective text length may differ from the specified text due to formatting and readibility issues.
For more details on this function, please have a look at <a href="#ft:mark">ft:mark</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:extract</xqdoc:name>
      <xqdoc:signature>declare function ft:extract($nodes as node()*, $name as xs:string, $length as xs:integer) as node()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>length</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the number of occurrences of the search terms specified in a full-text expression.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:count</xqdoc:name>
      <xqdoc:signature>declare function ft:count($nodes as node()*) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the score values (0.0 - 1.0) that have been attached to the specified items. <code>0</code> is returned a value if no score was attached.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:score</xqdoc:name>
      <xqdoc:signature>declare function ft:score($item as item()*) as xs:double* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>item</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns all full-text tokens stored in the index of the database <code>$db</code> , along with their numbers of occurrences.
If <code>$prefix</code> is specified, the returned nodes will be refined to the strings starting with that prefix. The prefix will be tokenized according to the full-text used for creating the index.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the full-text index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>ft:tokens</xqdoc:name>
      <xqdoc:signature>declare function ft:tokens($db as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns all full-text tokens stored in the index of the database <code>$db</code> , along with their numbers of occurrences.
If <code>$prefix</code> is specified, the returned nodes will be refined to the strings starting with that prefix. The prefix will be tokenized according to the full-text used for creating the index.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the full-text index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>ft:tokens</xqdoc:name>
      <xqdoc:signature>declare function ft:tokens($db as xs:string, $prefix as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Tokenizes the given <code>$input</code> string, using the current default full-text options or the <code>$options</code> specified as second argument. The following options are available: <ul> <li> <code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case insensitive. </li> <li> <code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive. </li> <li> <code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off. </li> <li> <code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>. </li> </ul>  <p>The <code>$options</code> argument can be used to control full-text processing. Options can be either specified
</p>  <ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;key1 value='value1'/&gt; ... &lt;/options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "key1": "value1", ... } </pre>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:tokenize</xqdoc:name>
      <xqdoc:signature>declare function ft:tokenize($input as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Tokenizes the given <code>$input</code> string, using the current default full-text options or the <code>$options</code> specified as second argument. The following options are available: <ul> <li> <code>case</code>: determines how character case is processed. Allowed values are <code>insensitive</code>, <code>sensitive</code>, <code>upper</code> and <code>lower</code>. By default, search is case insensitive. </li> <li> <code>diacritics</code>: determines how diacritical characters are processed. Allowed values are <code>insensitive</code> and <code>sensitive</code>. By default, search is diacritical insensitive. </li> <li> <code>stemming</code>: determines is tokens are stemmed. Allowed values are <code>true</code> and <code>false</code>. By default, stemming is turned off. </li> <li> <code>language</code>: determines the language. This option is relevant for stemming tokens. All language codes are supported. The default language is <code>en</code>. </li> </ul>  <p>The <code>$options</code> argument can be used to control full-text processing. Options can be either specified
</p>  <ul> <li> as children of an <code>&lt;options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;options&gt; &lt;key1 value='value1'/&gt; ... &lt;/options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "key1": "value1", ... } </pre>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:tokenize</xqdoc:name>
      <xqdoc:signature>declare function ft:tokenize($input as xs:string, $options as item()) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Normalizes the given <code>$input</code> string, using the current default full-text options or the <code>$options</code> specified as second argument. The function provides the same arguments as <a href="#ft:tokenize">ft:tokenize</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:normalize</xqdoc:name>
      <xqdoc:signature>declare function ft:normalize($input as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Normalizes the given <code>$input</code> string, using the current default full-text options or the <code>$options</code> specified as second argument. The function provides the same arguments as <a href="#ft:tokenize">ft:tokenize</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>ft:normalize</xqdoc:name>
      <xqdoc:signature>declare function ft:normalize($input as xs:string, $options as item()) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://expath.org/ns/geo</xqdoc:uri>
    <xqdoc:name>geo.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions that may be applied to geometry data conforming to the Open Geospatial Consortium (OGC) Simple Feature (SF) data model. It is based on the <a href="http://expath.org/spec/geo">EXPath Geo Module</a> and uses the <a href="http://www.vividsolutions.com/jts/jtshome.htm">JTS</a> library. Geometries introduced in GML 2 are: Point, LineString, LinearRing, Polygon, MultiPoint, MultiLineString, MultiPolygon, and MultiGeometry. All nodes queried by BaseX should be a valid geometry. The only geometry type which is not supported by BaseX right now is MultiGeometry.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="geo" uri="http://expath.org/ns/geo"/>
    <xqdoc:namespace prefix="experr" uri="http://expath.org/ns/error"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the dimension of the given geometry <code>$geometry</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:dimension</xqdoc:name>
      <xqdoc:signature>declare function geo:dimension($geometry as element(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the name of the geometry type of given geometry <code>$geometry</code> , if the geometry is not recognized with an error massage.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:geometry-type</xqdoc:name>
      <xqdoc:signature>declare function geo:geometry-type($geometry as element(*)) as xs:QName external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:QName</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the ID of the Spatial Reference System used by the given geometry <code>$geometry</code> . Spatial Reference System information is supported in the simple way defined in the SFS. A Spatial Reference System ID (SRID) is present in each Geometry object. Geometry provides basic accessor operations for this field, but no others. The SRID is represented as an integer (based on the <a href="http://www.opengis.org/docs/99-049.pdf">OpenGIS Simple Features Specifications For SQL</a> ).
Here is a difference between the <a href="http://expath.org/spec/geo">EXPath Geo Module</a> and the implementation in BaseX, since the specification return the URI.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:srid</xqdoc:name>
      <xqdoc:signature>declare function geo:srid($geometry as element(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the gml:Envelope of the given geometry <code>$geometry</code> . The envelope is the minimum bounding box of this geometry. If this Geometry is the empty geometry, returns an empty Point. If the Geometry is a point, returns a non-empty Point. Otherwise, returns a Polygon whose points are (minx, miny), (maxx, miny), (maxx, maxy), (minx, maxy), (minx, miny).</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:envelope</xqdoc:name>
      <xqdoc:signature>declare function geo:envelope($geometry as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the WKT (Well-known Text) representation of the given geometry <code>$geometry</code> . The envelope is the minimum bounding box of this geometry</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:as-text</xqdoc:name>
      <xqdoc:signature>declare function geo:as-text($geometry as element(*)) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the WKB (Well-known Binary) representation of the given geometry <code>$geometry</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:as-binary</xqdoc:name>
      <xqdoc:signature>declare function geo:as-binary($geometry as element(*)) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns whether the given geometry is simple <code>$geometry</code> and does not have has no anomalous geometric points (ie. the geometry does not self-intersect and does not pass through the same point more than once (may be a ring)).</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:is-simple</xqdoc:name>
      <xqdoc:signature>declare function geo:is-simple($geometry as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the boundary of the given geometry <code>$geometry</code> , in GML 2. The return value is a sequence of either gml:Point or gml:LinearRing elements as a GeometryCollection object. For a Point or MultiPoint, the boundary is the empty geometry, nothing is returned.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element is not recognized as a valid geometry.</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:boundary</xqdoc:name>
      <xqdoc:signature>declare function geo:boundary($geometry as element(*)) as element(*)? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the number of geometry in a geometry-collection <code>$geometry</code> , in GML. For the geometries which are not a collection, it returns the instant value 1.
This function is implemented wider than the specification and accepts all types of geometries, while the specification limits it to the collection types (MultiPoint, MultiPolygon, ...).</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:num-geometries</xqdoc:name>
      <xqdoc:signature>declare function geo:num-geometries($geometry as element(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the Nth geometry in geometry-collection <code>$geometry</code> , in GML. For the geometries which are not a collection, it returns the geometry if geoNumber <code>$geoNumber</code> is 1.
This function is implemented wider than the specification and accepts all types of geometries, while the specification limits it to the collection types (MultiPoint, MultiPolygon, ...).</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0004 the the input index of geometry is out of range.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:geometry-n</xqdoc:name>
      <xqdoc:signature>declare function geo:geometry-n($geometry as element(*), $geoNumber as xs:integer) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geoNumber</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the length of the geometry <code>$geometry</code> . If the geometry is a point, zero value will be returned.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:length</xqdoc:name>
      <xqdoc:signature>declare function geo:length($geometry as element(*)) as xs:double external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns integer value of number of the points in the given geometry <code>$geometry</code> . It can be used not only for Lines, also any other geometry types, like MultiPolygon. For Point geometry it will return 1.
This is an implementation different from the EXPath geo specification, as it limits the input geometry type only to lines.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:num-points</xqdoc:name>
      <xqdoc:signature>declare function geo:num-points($geometry as element(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the area of the given geometry <code>$geometry</code> . For points and line the return value will be zero.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:area</xqdoc:name>
      <xqdoc:signature>declare function geo:area($geometry as element(*)) as xs:double external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the mathematical centroid of the given geometry <code>$geometry</code> , as a gml:Point. Based on the definition, this point is not always on the surface of the geometry <code>$geometry</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:centroid</xqdoc:name>
      <xqdoc:signature>declare function geo:centroid($geometry as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an interior point on the given geometry <code>$geometry</code> , as a gml:Point. It is guaranteed to be on surface. Otherwise, the point may lie on the boundary of the geometry.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:point-on-surface</xqdoc:name>
      <xqdoc:signature>declare function geo:point-on-surface($geometry as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially equal to $geometry2 <code>$geometry2</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:equals</xqdoc:name>
      <xqdoc:signature>declare function geo:equals($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially disjoint from $geometry2 <code>$geometry2</code> (they have no point in common, they do not intersect each other, and the DE-9IM Intersection Matrix for the two geometries is FF*FF****).</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:disjoint</xqdoc:name>
      <xqdoc:signature>declare function geo:disjoint($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially intersects $geometry2 <code>$geometry2</code> . This is true if disjoint function of the two geometries returns false.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:intersects</xqdoc:name>
      <xqdoc:signature>declare function geo:intersects($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially touches $geometry2 <code>$geometry2</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:touches</xqdoc:name>
      <xqdoc:signature>declare function geo:touches($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially crosses $geometry2 <code>$geometry2</code> . It means, if the geometries have some but not all interior points in common. Returns true if the DE-9IM intersection matrix for the two geometries is:
<p> <code>T*T******</code> (for P/L, P/A, and L/A situations)
<code>T*****T**</code> (for L/P, A/P, and A/L situations)
<code>0********</code> (for L/L situations).
</p>
        </xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:crosses</xqdoc:name>
      <xqdoc:signature>declare function geo:crosses($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially within $geometry2 <code>$geometry2</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:within</xqdoc:name>
      <xqdoc:signature>declare function geo:within($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> spatially contains $geometry2 <code>$geometry2</code> . Returns true if within function of these two geometries also returns true.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:contains</xqdoc:name>
      <xqdoc:signature>declare function geo:contains($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns whether geometry1 <code>$geometry1</code> is spatially overlaps $geometry2 <code>$geometry2</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:overlaps</xqdoc:name>
      <xqdoc:signature>declare function geo:overlaps($geometry1 as element(*), $geometry2 as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns whether relationships between the boundaries, interiors and exteriors of geometry1 <code>$geometry1</code> and geometry2 <code>$geometry2</code> match the pattern specified in intersectionMatrix <code>$geometry2</code> , which should have the length of 9 charachters.
The values in the DE-9IM can be T, F, *, 0, 1, 2 .
<p>- T means the intersection gives a non-empty result.
- F means the intersection gives an empty result.
- * means any result.
- 0, 1, 2 gives the expected dimension of the result (point, curve, surface)
</p>
        </xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:relate</xqdoc:name>
      <xqdoc:signature>declare function geo:relate($geometry1 as element(*), $geometry2 as element(*), $intersectionMatrix as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>intersectionMatrix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the shortest distance, in the units of the spatial reference system of geometry1 <code>$geometry1</code> , between the geometries, where that distance is the distance between a point on each of the geometries.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:distance</xqdoc:name>
      <xqdoc:signature>declare function geo:distance($geometry1 as element(*), $geometry2 as element(*)) as xs:double external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns polygonal geometry representing the buffer by distance <code>$distance</code> of geometry <code>$geometry</code> a buffer area around this geometry having the given width, in the spatial reference system of geometry. The buffer of a Geometry is the Minkowski sum or difference of the geometry with a disc of radius abs(distance). The buffer is constructed using 8 segments per quadrant to represent curves.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:buffer</xqdoc:name>
      <xqdoc:signature>declare function geo:buffer($geometry as element(*), $distance as xs:double) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>distance</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the convex hull geometry of the given geometry <code>$geometry</code> in GML, or the empty sequence. Actually returns the object of smallest dimension possible.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:convex-hull</xqdoc:name>
      <xqdoc:signature>declare function geo:convex-hull($geometry as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the intersection geometry of geometry1 <code>$geometry1</code> with geometry2 <code>$geometry2</code> , in GML or empty sequence if there is no intersection of these geometries.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:intersection</xqdoc:name>
      <xqdoc:signature>declare function geo:intersection($geometry1 as element(*), $geometry2 as element(*)) as element(*)? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the union geometry of geometry1 <code>$geometry1</code> with geometry2 <code>$geometry2</code> , in GML.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:union</xqdoc:name>
      <xqdoc:signature>declare function geo:union($geometry1 as element(*), $geometry2 as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the difference geometry of geometry1 <code>$geometry1</code> with geometry2 <code>$geometry2</code> , in GML, or empty sequence if the difference is empty, as a set of point in geometry1 <code>$geometry1</code> and not included in geometry2 <code>$geometry2</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:difference</xqdoc:name>
      <xqdoc:signature>declare function geo:difference($geometry1 as element(*), $geometry2 as element(*)) as element(*)? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the symmetric difference geometry of geometry1 <code>$geometry1</code> with geometry2 <code>$geometry2</code> , in GML, or empty sequence if the difference is empty, as a set of point in one of the geometries and not included in the other.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:sym-difference</xqdoc:name>
      <xqdoc:signature>declare function geo:sym-difference($geometry1 as element(*), $geometry2 as element(*)) as element(*)? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>geometry1</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>geometry2</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the x coordinate of point <code>$point</code> . A point has to have an x coordinate.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:x</xqdoc:name>
      <xqdoc:signature>declare function geo:x($point as element(*)) as xs:double external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>point</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the y coordinate of point <code>$point</code> . If the point does not have the y coordinate, 0 will be returned.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:y</xqdoc:name>
      <xqdoc:signature>declare function geo:y($point as element(*)) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>point</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the z coordinate of point <code>$point</code> . If the point does not have the y coordinate, 0 will be returned.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:z</xqdoc:name>
      <xqdoc:signature>declare function geo:z($point as element(*)) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>point</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the starting point of the given line <code>$line</code> . <code>$line</code> has to be a single line, LineString or LinearRing.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a line. Other geometries are not accepted.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:start-point</xqdoc:name>
      <xqdoc:signature>declare function geo:start-point($line as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>line</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the ending point of the given line <code>$line</code> . <code>$line</code> has to be a single line, LineString or LinearRing.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a line. Other geometries are not accepted.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:end-point</xqdoc:name>
      <xqdoc:signature>declare function geo:end-point($line as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>line</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a boolean value that shows the line <code>$line</code> is a closed loop (start point and end point are the same) or not. <code>$line</code> has to be a line, as a geometry, LineString or LinearRing, and MultiLineString.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a line. Other geometries are not accepted.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:is-closed</xqdoc:name>
      <xqdoc:signature>declare function geo:is-closed($line as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>line</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a boolean value that shows the line <code>$line</code> is a ring (closed loop and single) or not. <code>$line</code> has to be a single line, as a geometry, LineString or LinearRing.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a line. Other geometries are not accepted.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:is-ring</xqdoc:name>
      <xqdoc:signature>declare function geo:is-ring($line as element(*)) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>line</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the Nth point in the given line <code>$geometry</code> . <code>$line</code> has to be a single line, as a geometry, LineString or LinearRing.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a line. Other geometries are not accepted.</xqdoc:error>
        <xqdoc:error>experr:GEO0004 the the input index of geometry is out of range.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:point-n</xqdoc:name>
      <xqdoc:signature>declare function geo:point-n($line as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>line</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the outer ring of the given polygon <code>$geometry</code> , as a gml:LineString.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a polygon. Other geometries are not accepted.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:exterior-ring</xqdoc:name>
      <xqdoc:signature>declare function geo:exterior-ring($polygon as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>polygon</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the number of interior rings in the given polygon <code>$geometry</code> .</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a polygon. Other geometries are not accepted.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:num-interior-ring</xqdoc:name>
      <xqdoc:signature>declare function geo:num-interior-ring($polygon as element(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>polygon</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the outer ring of the given polygon <code>$geometry</code> , as a gml:LineString.</xqdoc:description>
        <xqdoc:error>experr:GEO0001 the given element(s) is not recognized as a valid geometry (QName).</xqdoc:error>
        <xqdoc:error>experr:GEO0002 the given element cannot be read by reader for some reason.</xqdoc:error>
        <xqdoc:error>experr:GEO0003 the given element has to be a polygon. Other geometries are not accepted.</xqdoc:error>
        <xqdoc:error>experr:GEO0004 the the input index of geometry is out of range.</xqdoc:error>
        <xqdoc:error>experr:GEO0005 the output object cannot be written as an element by writer for some reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>geo:interior-ring-n</xqdoc:name>
      <xqdoc:signature>declare function geo:interior-ring-n($polygon as element(*)) as element(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>polygon</xqdoc:name>
          <xqdoc:type>element(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/hash</xqdoc:uri>
    <xqdoc:name>hash.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> provides functions that perform different hash operations.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="hash" uri="http://basex.org/modules/hash"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Computes the MD5 hash of the given <code>$value</code> , which may be of type xs:string, xs:base64Binary, or xs:hexBinary.</xqdoc:description>
        <xqdoc:error>bxerr:FORG0006 the specified value is neither a string nor a binary item.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>hash:md5</xqdoc:name>
      <xqdoc:signature>declare function hash:md5($value as xs:anyAtomicType) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Computes the SHA-1 hash of the given <code>$value</code> , which may be of type xs:string, xs:base64Binary, or xs:hexBinary.</xqdoc:description>
        <xqdoc:error>bxerr:FORG0006 the specified value is neither a string nor a binary item.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>hash:sha1</xqdoc:name>
      <xqdoc:signature>declare function hash:sha1($value as xs:anyAtomicType) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Computes the SHA-256 hash of the given <code>$value</code> , which may be of type xs:string, xs:base64Binary, or xs:hexBinary.</xqdoc:description>
        <xqdoc:error>bxerr:FORG0006 the specified value is neither a string nor a binary item.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>hash:sha256</xqdoc:name>
      <xqdoc:signature>declare function hash:sha256($value as xs:anyAtomicType) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Computes the hash of the given <code>$value</code> , using the specified <code>$algorithm</code> . The specified values may be of type xs:string, xs:base64Binary, or xs:hexBinary.
The following three algorihms are supported: <code>MD5</code> , <code>SHA-1</code> , and <code>SHA-256</code> .</xqdoc:description>
        <xqdoc:error>bxerr:HASH0001 the specified hashing algorithm is unknown.</xqdoc:error>
        <xqdoc:error>bxerr:FORG0006 the specified value is neither a string nor a binary item.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>hash:hash</xqdoc:name>
      <xqdoc:signature>declare function hash:hash($value as xs:anyAtomicType, $algorithm as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>algorithm</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/hof</xqdoc:uri>
    <xqdoc:name>hof.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> adds some useful higher-order functions, additional to the <a href="http://docs.basex.org/wiki/Higher-Order_Functions">Higher-Order Functions</a> provided by the official specification.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="hof" uri="http://basex.org/modules/hof"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns its argument unchanged. This function isn't useful on its own, but can be used as argument to other higher-order functions.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:id</xqdoc:name>
      <xqdoc:signature>declare function hof:id($expr as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns its first argument unchanged and ignores the second. This function isn't useful on its own, but can be used as argument to other higher-order functions, e.g. when a function combining two values is expected and one only wants to retain the left one.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:const</xqdoc:name>
      <xqdoc:signature>declare function hof:const($expr as item()*, $ignored as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>ignored</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Works the same as <a href="http://docs.basex.org/wiki/Higher-Order_Functions#fn:fold-left">fn:fold-left</a> , but doesn't need a seed, because the sequence must be non-empty.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:fold-left1</xqdoc:name>
      <xqdoc:signature>declare function hof:fold-left1($seq as item()+, $f as function(item()*, item()) as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="+">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>function(item()*, item()) as item()*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Applies the function <code>$f</code> to the initial value <code>$start</code> until the predicate <code>$pred</code> applied to the result returns <code>true()</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:until</xqdoc:name>
      <xqdoc:signature>declare function hof:until($pred as function(item()*) as xs:boolean, $f as function(item()*) as item()*, $start as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pred</xqdoc:name>
          <xqdoc:type>function(item()*) as xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>function(item()*) as item()*</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>start</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>This function is similar to <a href="http://docs.basex.org/wiki/Higher-Order_Functions#fn:fold-left">fn:fold-left</a> , but it returns a list of successive reduced values from the left. It is equivalent to: <pre class="brush:xquery"> declare function hof:scan-left($seq, $acc, $f) { if(empty($seq)) then $acc else ( $acc, hof:scan-left(tail($seq), $f($acc, head($seq)), $f) ) }; </pre>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:scan-left</xqdoc:name>
      <xqdoc:signature>declare function hof:scan-left($seq as item()*, $start as item()*, $f as function(item()*, item()) as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>start</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>function(item()*, item()) as item()*</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>The function returns items of <code>$seq</code> as long as the predicate <code>$pred</code> is satisfied. It is equivalent to: <pre class="brush:xquery"> declare function hof:take-while($seq, $pred) { if(empty($seq) or not($pred(head($seq)))) then () else ( head($seq), hof:take-while(tail($seq), $pred) ) }; </pre>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:take-while</xqdoc:name>
      <xqdoc:signature>declare function hof:take-while($seq as item()*, $pred as function(item()) as xs:boolean) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pred</xqdoc:name>
          <xqdoc:type>function(item()) as xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns the <code>$k</code> items in <code>$seq</code> that are greatest when sorted by the result of <code>$f</code> applied to the item. The function is a much more efficient implementation of the following scheme: <pre class="brush:xquery"> (for $x in $seq order by $sort-key($x) descending return $x )[position() &lt;= $k] </pre>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:top-k-by</xqdoc:name>
      <xqdoc:signature>declare function hof:top-k-by($seq as item()*, $sort-key as function(item()) as item(), $k as xs:integer) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>sort-key</xqdoc:name>
          <xqdoc:type>function(item()) as item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>k</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns the <code>$k</code> items in <code>$seq</code> that are greatest when sorted in the order of the <i>less-than</i> predicate <code>$lt</code> . The function is a general version of <code>hof:top-k-by($seq, $sort-key, $k)</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>hof:top-k-with</xqdoc:name>
      <xqdoc:signature>declare function hof:top-k-with($seq as item()*, $lt as function(item(), item()) as xs:boolean, $k as xs:integer) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>lt</xqdoc:name>
          <xqdoc:type>function(item(), item()) as xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>k</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/html</xqdoc:uri>
    <xqdoc:name>html.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> provides functions for converting HTML to XML. Conversion will only take place if <a href="http://home.ccil.org/~cowan/XML/tagsoup/">TagSoup</a> is included in the classpath (see <a href="http://docs.basex.org/wiki/Parsers#HTML_Parser">HTML Parsing</a> for more details).</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="html" uri="http://basex.org/modules/html"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the name of the applied HTML parser (currently: <code>TagSoup</code> ). If an <i>empty string</i> is returned, TagSoup was not found in the classpath, and the input will be treated as well-formed XML.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>html:parser</xqdoc:name>
      <xqdoc:signature>declare function html:parser() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the HTML document specified by <code>$input</code> to XML, and returns a document node:
<ul> <li> The input may either be a string or a binary item (xs:hexBinary, xs:base64Binary). </li> <li> If the input is passed on in its binary representation, the HTML parser will try to automatically choose the correct encoding. </li> </ul>  <p>The <code>$options</code> argument can be used to set <a href="http://docs.basex.org/wiki/Parsers#TagSoup_Options">TagSoup Options</a>, which can be specified…
</p>  <ul> <li> as children of an <code>&lt;html:options/&gt;</code> element; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;html:options&gt; &lt;html:key1 value='value1'/&gt; ... &lt;/html:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "key1": "value1", ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXHL0001 the input cannot be converted to XML.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>html:parse</xqdoc:name>
      <xqdoc:signature>declare function html:parse($input as xs:anyAtomicType) as document-node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts the HTML document specified by <code>$input</code> to XML, and returns a document node:
<ul> <li> The input may either be a string or a binary item (xs:hexBinary, xs:base64Binary). </li> <li> If the input is passed on in its binary representation, the HTML parser will try to automatically choose the correct encoding. </li> </ul>  <p>The <code>$options</code> argument can be used to set <a href="http://docs.basex.org/wiki/Parsers#TagSoup_Options">TagSoup Options</a>, which can be specified…
</p>  <ul> <li> as children of an <code>&lt;html:options/&gt;</code> element; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;html:options&gt; &lt;html:key1 value='value1'/&gt; ... &lt;/html:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "key1": "value1", ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXHL0001 the input cannot be converted to XML.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>html:parse</xqdoc:name>
      <xqdoc:signature>declare function html:parse($input as xs:anyAtomicType, $options as item()) as document-node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://expath.org/ns/http-client</xqdoc:uri>
    <xqdoc:name>http.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains a single function to send HTTP requests and handle HTTP responses. The function <code>send-request</code> is based on the <a href="http://expath.org/spec/http-client">EXPath HTTP Client Module</a> . It gives full control over the available request and response parameters. For simple GET requests, the <a href="http://docs.basex.org/wiki/Fetch_Module">Fetch Module</a> may be sufficient.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="http" uri="http://expath.org/ns/http-client"/>
    <xqdoc:namespace prefix="exerr" uri="http://expath.org/ns/error"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Sends an HTTP request and interprets the corresponding response. <code>$request</code> contains the parameters of the HTTP request such as HTTP method and headers. In addition to this it can also contain the URI to which the request will be sent and the body of the HTTP method. If the URI is not given with the parameter <code>$href</code> , its value in <code>$request</code> is used instead.
The structure of <code>http:request</code> element follows the <a href="http://expath.org/spec/http-client">EXPath</a> specification. Both basic and digest authentication is supported.</xqdoc:description>
        <xqdoc:error>exerr:HC0001 an HTTP error occurred.</xqdoc:error>
        <xqdoc:error>exerr:HC0002 error parsing the entity content as XML or HTML.</xqdoc:error>
        <xqdoc:error>exerr:HC0003 with a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.</xqdoc:error>
        <xqdoc:error>exerr:HC0004 the src attribute on the body element is mutually exclusive with all other attribute (except the media-type).</xqdoc:error>
        <xqdoc:error>exerr:HC0005 the request element is not valid.</xqdoc:error>
        <xqdoc:error>exerr:HC0006 a timeout occurred waiting for the response.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>http:send-request</xqdoc:name>
      <xqdoc:signature>declare function http:send-request($request as element(http:request)?, $href as xs:string?, $bodies as item()*) as item()+ external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>request</xqdoc:name>
          <xqdoc:type occurrence="?">element(http:request)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>href</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bodies</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Sends an HTTP request and interprets the corresponding response. <code>$request</code> contains the parameters of the HTTP request such as HTTP method and headers. In addition to this it can also contain the URI to which the request will be sent and the body of the HTTP method. If the URI is not given with the parameter <code>$href</code> , its value in <code>$request</code> is used instead.
The structure of <code>http:request</code> element follows the <a href="http://expath.org/spec/http-client">EXPath</a> specification. Both basic and digest authentication is supported.</xqdoc:description>
        <xqdoc:error>exerr:HC0001 an HTTP error occurred.</xqdoc:error>
        <xqdoc:error>exerr:HC0002 error parsing the entity content as XML or HTML.</xqdoc:error>
        <xqdoc:error>exerr:HC0003 with a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.</xqdoc:error>
        <xqdoc:error>exerr:HC0004 the src attribute on the body element is mutually exclusive with all other attribute (except the media-type).</xqdoc:error>
        <xqdoc:error>exerr:HC0005 the request element is not valid.</xqdoc:error>
        <xqdoc:error>exerr:HC0006 a timeout occurred waiting for the response.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>http:send-request</xqdoc:name>
      <xqdoc:signature>declare function http:send-request($request as element(http:request)) as item()+ external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>request</xqdoc:name>
          <xqdoc:type>element(http:request)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Sends an HTTP request and interprets the corresponding response. <code>$request</code> contains the parameters of the HTTP request such as HTTP method and headers. In addition to this it can also contain the URI to which the request will be sent and the body of the HTTP method. If the URI is not given with the parameter <code>$href</code> , its value in <code>$request</code> is used instead.
The structure of <code>http:request</code> element follows the <a href="http://expath.org/spec/http-client">EXPath</a> specification. Both basic and digest authentication is supported.</xqdoc:description>
        <xqdoc:error>exerr:HC0001 an HTTP error occurred.</xqdoc:error>
        <xqdoc:error>exerr:HC0002 error parsing the entity content as XML or HTML.</xqdoc:error>
        <xqdoc:error>exerr:HC0003 with a multipart response, the override-media-type must be either a multipart media type or application/octet-stream.</xqdoc:error>
        <xqdoc:error>exerr:HC0004 the src attribute on the body element is mutually exclusive with all other attribute (except the media-type).</xqdoc:error>
        <xqdoc:error>exerr:HC0005 the request element is not valid.</xqdoc:error>
        <xqdoc:error>exerr:HC0006 a timeout occurred waiting for the response.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>http:send-request</xqdoc:name>
      <xqdoc:signature>declare function http:send-request($request as element(http:request)?, $href as xs:string?) as item()+ external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>request</xqdoc:name>
          <xqdoc:type occurrence="?">element(http:request)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>href</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/index</xqdoc:uri>
    <xqdoc:name>index.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> provides functions for displaying information stored in the database index structures.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="index" uri="http://basex.org/modules/index"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns information about all facets and facet values of the database <code>$db</code> in document structure format.
If <code>$type</code> is specified as <code>flat</code> , the function returns this information in a flat summarized version. The returned data is derived from the <a href="http://docs.basex.org/wiki/Indexes#Path_Index">Path Index</a> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:facets</xqdoc:name>
      <xqdoc:signature>declare function index:facets($db as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns information about all facets and facet values of the database <code>$db</code> in document structure format.
If <code>$type</code> is specified as <code>flat</code> , the function returns this information in a flat summarized version. The returned data is derived from the <a href="http://docs.basex.org/wiki/Indexes#Path_Index">Path Index</a> .</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:facets</xqdoc:name>
      <xqdoc:signature>declare function index:facets($db as xs:string, $type as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns all strings stored in the <a href="http://docs.basex.org/wiki/Indexes#Text_Index">Text Index</a> of the database <code>$db</code> , along with their number of occurrences.
If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.
If <code>$start</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the text index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:texts</xqdoc:name>
      <xqdoc:signature>declare function index:texts($db as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns all strings stored in the <a href="http://docs.basex.org/wiki/Indexes#Text_Index">Text Index</a> of the database <code>$db</code> , along with their number of occurrences.
If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.
If <code>$start</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the text index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:texts</xqdoc:name>
      <xqdoc:signature>declare function index:texts($db as xs:string, $prefix as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns all strings stored in the <a href="http://docs.basex.org/wiki/Indexes#Text_Index">Text Index</a> of the database <code>$db</code> , along with their number of occurrences.
If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.
If <code>$start</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the text index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:texts</xqdoc:name>
      <xqdoc:signature>declare function index:texts($db as xs:string, $start as xs:string, $ascending as xs:boolean) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>start</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>ascending</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns all strings stored in the <a href="http://docs.basex.org/wiki/Indexes#Attribute_Index">Attribute Index</a> of the database <code>$db</code> , along with their number of occurrences.
If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.
If <code>$start</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the attribute index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:attributes</xqdoc:name>
      <xqdoc:signature>declare function index:attributes($db as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns all strings stored in the <a href="http://docs.basex.org/wiki/Indexes#Attribute_Index">Attribute Index</a> of the database <code>$db</code> , along with their number of occurrences.
If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.
If <code>$start</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the attribute index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:attributes</xqdoc:name>
      <xqdoc:signature>declare function index:attributes($db as xs:string, $prefix as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>prefix</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns all strings stored in the <a href="http://docs.basex.org/wiki/Indexes#Attribute_Index">Attribute Index</a> of the database <code>$db</code> , along with their number of occurrences.
If <code>$prefix</code> is specified, the returned entries will be refined to the ones starting with that prefix.
If <code>$start</code> and <code>$ascending</code> are specified, all nodes will be returned after or before the specified start entry.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
        <xqdoc:error>bxerr:BXDB0004 the attribute index is not available.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:attributes</xqdoc:name>
      <xqdoc:signature>declare function index:attributes($db as xs:string, $start as xs:string, $ascending as xs:boolean) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>start</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>ascending</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns all element names stored in the <a href="http://docs.basex.org/wiki/Indexes#Name_Index">Name Index</a> of the database <code>$db</code> , along with their number of occurrences.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:element-names</xqdoc:name>
      <xqdoc:signature>declare function index:element-names($db as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns all attribute names stored in the <a href="http://docs.basex.org/wiki/Indexes#Name_Index">Name Index</a> of the database <code>$db</code> , along with their number of occurrences.</xqdoc:description>
        <xqdoc:error>bxerr:BXDB0002 The addressed database does not exist or could not be opened.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>index:attribute-names</xqdoc:name>
      <xqdoc:signature>declare function index:attribute-names($db as xs:string) as element(value)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>db</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(value)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/inspect</xqdoc:uri>
    <xqdoc:name>inspect.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for extracting internal information about modules and functions and generating documentation.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="inspect" uri="http://basex.org/modules/inspect"/>
    <xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns function items for all user-defined functions (both public and private) that are known in the current query context. If a <code>$uri</code> is specified, the addressed file will be compiled, its functions will be added to the query context and returned to the user.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>inspect:functions</xqdoc:name>
      <xqdoc:signature>declare function inspect:functions() as (function(*))* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">function(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns function items for all user-defined functions (both public and private) that are known in the current query context. If a <code>$uri</code> is specified, the addressed file will be compiled, its functions will be added to the query context and returned to the user.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>inspect:functions</xqdoc:name>
      <xqdoc:signature>declare function inspect:functions($uri as xs:string) as (function(*))* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">function(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Inspects the specified <code>$function</code> and returns an element that describes its structure. The output of this function is similar to eXist-db’s <a href="http://exist-db.org/exist/apps/fundocs/view.html?uri=http://exist-db.org/xquery/inspection&amp;location=java:org.exist.xquery.functions.inspect.InspectionModule">inspect:inspect-function</a> function.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>inspect:function</xqdoc:name>
      <xqdoc:signature>declare function inspect:function($function as function(*)) as element(function) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>function</xqdoc:name>
          <xqdoc:type>function(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(function)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Generates an element that describes all variables and functions in the current query context.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>inspect:context</xqdoc:name>
      <xqdoc:signature>declare function inspect:context() as element(context) external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element(context)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Retrieves the string from the specified <code>$input</code> , parses it as XQuery module, and generates an element that describes its structure.</xqdoc:description>
        <xqdoc:error>xqdoc:FODC0002 the addressed resource cannot be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>inspect:module</xqdoc:name>
      <xqdoc:signature>declare function inspect:module($input as xs:string) as element(module) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(module)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Retrieves the string from the specified <code>$input</code> , parses it as XQuery module, and generates an xqDoc element.
<a href="http://xqdoc.org">xqDoc</a> provides a simple vendor neutral solution for generating a documentation from XQuery modules. The documentation conventions have been inspired by the JavaDoc standard. Documentation comments begin with <code>~</code> and end with <code/> , and tags start with <code>@</code> . xqDoc comments can be specified for main and library modules and variable and function declarations.
<p>We have slightly extended the xqDoc conventions to do justice to the current status of XQuery (Schema: <a href="http://files.basex.org/etc/xqdoc-1.1.30052013.xsd">xqdoc-1.1.30052013.xsd</a>):
</p>  <ul> <li> an <code>&lt;xqdoc:annotations/&gt;</code> node is added to each variable or function that uses annotations. The xqdoc:annotation child nodes may have additional <code>xqdoc:literal</code> elements with <code>type</code> attributes (xs:string, xs:integer, xs:decimal, xs:double) and values. </li> <li> a single <code>&lt;xqdoc:namespaces/&gt;</code> node is added to the root element, which summarizes all prefixes and namespace URIs used or declared in the module. </li> <li> name and type elements are added to variables </li> </ul>
        </xqdoc:description>
        <xqdoc:error>xqdoc:FODC0002 the addressed resource cannot be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>inspect:xqdoc</xqdoc:name>
      <xqdoc:signature>declare function inspect:xqdoc($input as xs:string) as element(xqdoc:xqdoc) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/json</xqdoc:uri>
    <xqdoc:name>json.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to parse and serialize JSON documents. <a href="http://www.json.org/">JSON (JavaScript Object Notation)</a> is a popular data exchange format for applications written in JavaScript. As there are notable differences between JSON and XML, no mapping exists that guarantees a lossless, bidirectional conversion between JSON and XML. For this reason, we offer various mappings, all of which are suited to different use cases.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="json" uri="http://basex.org/modules/json"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Converts the JSON document specified by <code>$input</code> to an XML document or a map. If the input can be successfully parsed, it can be serialized back to the original JSON representation. The <code>$options</code> argument can be used to control the way the input is converted.</xqdoc:description>
        <xqdoc:error>bxerr:BXJS0001 the specified input cannot be parsed as JSON document.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>json:parse</xqdoc:name>
      <xqdoc:signature>declare function json:parse($input as xs:string) as element(json) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(json)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Converts the JSON document specified by <code>$input</code> to an XML document or a map. If the input can be successfully parsed, it can be serialized back to the original JSON representation. The <code>$options</code> argument can be used to control the way the input is converted.</xqdoc:description>
        <xqdoc:error>bxerr:BXJS0001 the specified input cannot be parsed as JSON document.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>json:parse</xqdoc:name>
      <xqdoc:signature>declare function json:parse($input as xs:string, $options as item()) as item() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Serializes the node specified by <code>$input</code> as JSON, and returns the result as <code>xs:string</code> instance. The node is expected to conform to the output created by the <a href="#json:parse">json:parse()</a> function. All other items will be serialized as specified for the <a href="http://docs.basex.org/wiki/XQuery_3.1#JSON_Serialization">json output method</a> of the official specification.
Items can also be serialized as JSON if the <a href="http://docs.basex.org/wiki/Serialization">Serialization Parameter</a>  <code>method</code> is set to <code>json</code> .
The <code>$options</code> argument can be used to control the way the input is serialized.</xqdoc:description>
        <xqdoc:error>bxerr:BXJS0002 the specified node cannot be serialized as JSON document.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>json:serialize</xqdoc:name>
      <xqdoc:signature>declare function json:serialize($input as node()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Serializes the node specified by <code>$input</code> as JSON, and returns the result as <code>xs:string</code> instance. The node is expected to conform to the output created by the <a href="#json:parse">json:parse()</a> function. All other items will be serialized as specified for the <a href="http://docs.basex.org/wiki/XQuery_3.1#JSON_Serialization">json output method</a> of the official specification.
Items can also be serialized as JSON if the <a href="http://docs.basex.org/wiki/Serialization">Serialization Parameter</a>  <code>method</code> is set to <code>json</code> .
The <code>$options</code> argument can be used to control the way the input is serialized.</xqdoc:description>
        <xqdoc:error>bxerr:BXJS0002 the specified node cannot be serialized as JSON document.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>json:serialize</xqdoc:name>
      <xqdoc:signature>declare function json:serialize($input as node(), $options as item()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>x-http://www.w3.org/2005/xpath-functions/map</xqdoc:uri>
    <xqdoc:name>map.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for manipulating maps, which will officially be introduced with <a href="http://docs.basex.org/wiki/XQuery_3.1#Maps">XQuery 3.1</a> . <br/>  <b>Please note</b> that the functions are subject to change until the specification has reached its final stage.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="map" uri="x-http://www.w3.org/2005/xpath-functions/map"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns true if the <i>map</i> supplied as <code>$input</code> contains an entry with a key equal to the supplied value of <code>$key</code> ; otherwise it returns false. No error is raised if the map contains keys that are not comparable with the supplied <code>$key</code> . <p>If the supplied key is <code>xs:untypedAtomic</code>, it is compared as an instance of <code>xs:string</code>. If the supplied key is the <code>xs:float</code> or <code>xs:double</code> value <code>NaN</code>, the function returns true if there is an entry whose key is <code>NaN</code>, or false otherwise. </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:contains</xqdoc:name>
      <xqdoc:signature>declare function map:contains($input as map(*), $key as xs:anyAtomicType) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a new <i>map</i> containing a single entry. The key of the entry in the new map is <code>$key</code> , and its associated value is <code>$value</code> . If the supplied key is <code>xs:untypedAtomic</code> , it is compared as an instance of <code>xs:string</code> . If the supplied key is the <code>xs:float</code> or <code>xs:double</code> value <code>NaN</code> , the function returns the value in the entry whose key is <code>NaN</code> , or the empty sequence otherwise. <p>The function <code>map:entry</code> is intended primarily for use in conjunction with the function <code> <a href="#map:merge">map:merge</a> </code>. For example, a map containing seven entries may be constructed like this: </p>  <pre class="brush:xquery"> map:merge(( map:entry("Su", "Sunday"), map:entry("Mo", "Monday"), map:entry("Tu", "Tuesday"), map:entry("We", "Wednesday"), map:entry("Th", "Thursday"), map:entry("Fr", "Friday"), map:entry("Sa", "Saturday") )) </pre>  <p>Unlike the <code>map { ... }</code> expression, this technique can be used to construct a map with a variable number of entries, for example: </p>  <pre class="brush:xquery">map:merge(for $b in //book return map:entry($b/isbn, $b))</pre>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:entry</xqdoc:name>
      <xqdoc:signature>declare function map:entry($key as xs:anyAtomicType, $value as item()*) as map(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Applies a function to every entry of the map <code>$input</code> and returns the results as a sequence. The function supplied as <code>$fun</code> takes two arguments. It is called supplying the key of the map entry as the first argument, and the associated value as the second argument.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:for-each</xqdoc:name>
      <xqdoc:signature>declare function map:for-each($input as map(*), $fun as function(xs:anyAtomicType, item()*) as item()) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fun</xqdoc:name>
          <xqdoc:type>function(xs:anyAtomicType, item()*) as item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the value associated with a supplied key in a given map. This function attempts to find an entry within the <i>map</i> supplied as <code>$input</code> that has a key equal to the supplied value of <code>$key</code> . If there is such an entry, it returns the associated value; otherwise it returns an empty sequence. No error is raised if the map contains keys that are not comparable with the supplied <code>$key</code> . If the supplied key is <code>xs:untypedAtomic</code> , it is converted to <code>xs:string</code> . If the supplied key is the <code>xs:float</code> or <code>xs:double</code> value <code>NaN</code> , the function returns an empty sequence. <p>A return value of <code>()</code> from <code>map:get</code> could indicate that the key is present in the map with an associated value of <code>()</code>, or it could indicate that the key is not present in the map. The two cases can be distinguished by calling <code>map:contains</code>. Invoking the <i>map</i> as a function item has the same effect as calling <code>get</code>: that is, when <code>$input</code> is a map, the expression <code>$input($K)</code> is equivalent to <code>get($input, $K)</code>. Similarly, the expression <code>get(get(get($input, 'employee'), 'name'), 'first')</code> can be written as <code>$input('employee')('name')('first')</code>. </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:get</xqdoc:name>
      <xqdoc:signature>declare function map:get($input as map(*), $key as xs:anyAtomicType) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a sequence containing all the key values present in a map. The function takes any <i>map</i> as its <code>$input</code> argument and returns the keys that are present in the map as a sequence of atomic values. The order may differ from the order in which entries were inserted in the map.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:keys</xqdoc:name>
      <xqdoc:signature>declare function map:keys($input as map(*)) as xs:anyAtomicType* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:anyAtomicType</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Constructs and returns a new map. The <i>map</i> is formed by combining the contents of the maps supplied in the <code>$input</code> argument. The maps are combined as follows: <ol> <li> There is one entry in the new map for each distinct key value present in the union of the input maps, where keys are considered distinct according to the rules of the <code>distinct-values</code> function. </li> <li> The associated value for each such key is taken from the last map in the input sequence <code>$input</code> that contains an entry with this key. </li> </ol>  <p>There is no requirement that the supplied input maps should have the same or compatible types. The type of a map (for example <code>map(xs:integer, xs:string)</code>) is descriptive of the entries it currently contains, but is not a constraint on how the map may be combined with other maps. </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:merge</xqdoc:name>
      <xqdoc:signature>declare function map:merge($input as (map(*))*) as map(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type occurrence="*">map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a new <i>map</i> , containing the entries of the <code>$input</code> argument and a new entry composed by <code>$key</code> and <code>$value</code> . The semantics of this function are equivalent to <code>map:merge(($input, map { $key, $value }))</code>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:put</xqdoc:name>
      <xqdoc:signature>declare function map:put($input as map(*), $key as xs:anyAtomicType, $value as item()*) as map(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Constructs a new map by removing an entry from an existing map. The entries in the new map correspond to the entries of <code>$input</code> , excluding any entry whose key is equal to <code>$key</code> . <p>No failure occurs if the input map contains no entry with the supplied key; the input map is returned unchanged </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:remove</xqdoc:name>
      <xqdoc:signature>declare function map:remove($input as map(*), $key as xs:anyAtomicType) as map(*) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:anyAtomicType</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a the number of entries in the supplied map. The function takes any <i>map</i> as its <code>$input</code> argument and returns the number of entries that are present in the map.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:size</xqdoc:name>
      <xqdoc:signature>declare function map:size($input as map(*)) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function is specific to BaseX. It returns a string representation of the supplied map. The purpose of this function is to get an insight into the structure of a map item; it cannot necessarily be used for reconstructing the original map.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>map:serialize</xqdoc:name>
      <xqdoc:signature>declare function map:serialize($input as map(*)) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>x-http://www.w3.org/2005/xpath-functions/math</xqdoc:uri>
    <xqdoc:name>math.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>The math <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> defines functions to perform mathematical operations, such as <code>pi</code> , <code>asin</code> and <code>acos</code> . Most functions are specified in the <a href="http://www.w3.org/TR/xpath-functions-30/">Functions and Operators Specification</a> of the upcoming XQuery 3.0 Recommendation, and some additional ones have been added in this module.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="math" uri="x-http://www.w3.org/2005/xpath-functions/math"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the <code>xs:double</code> value of the mathematical constant π whose lexical representation is 3.141592653589793.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:pi</xqdoc:name>
      <xqdoc:signature>declare function math:pi() as xs:double external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the square root of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the <code>xs:double</code> value of the mathematical square root of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:sqrt</xqdoc:name>
      <xqdoc:signature>declare function math:sqrt($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the sine of the <code>$arg</code> , expressed in radians.
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the sine of <code>$arg</code> , treated as an angle in radians.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:sin</xqdoc:name>
      <xqdoc:signature>declare function math:sin($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the cosine of <code>$arg</code> , expressed in radians.
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the cosine of <code>$arg</code> , treated as an angle in radians.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:cos</xqdoc:name>
      <xqdoc:signature>declare function math:cos($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the tangent of <code>$arg</code> , expressed in radians.
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the tangent of <code>$arg</code> , treated as an angle in radians.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:tan</xqdoc:name>
      <xqdoc:signature>declare function math:tan($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the arc sine of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the arc sine of <code>$arg</code> , returned as an angle in radians in the range -π/2 to +π/2.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:asin</xqdoc:name>
      <xqdoc:signature>declare function math:asin($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the arc cosine of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the arc cosine of <code>$arg</code> , returned as an angle in radians in the range 0 to +π.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:acos</xqdoc:name>
      <xqdoc:signature>declare function math:acos($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the arc tangent of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the arc tangent of <code>$arg</code> , returned as an angle in radians in the range -π/2 to +π/2.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:atan</xqdoc:name>
      <xqdoc:signature>declare function math:atan($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the arc tangent of <code>$arg1</code> divided by <code>$arg2</code> , the result being in the range -π/2 to +π/2 radians.
If <code>$arg1</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the arc tangent of <code>$arg1</code> divided by <code>$arg2</code> , returned as an angle in radians in the range -π to +π.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:atan2</xqdoc:name>
      <xqdoc:signature>declare function math:atan2($arg1 as xs:double?, $arg2 as xs:double) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg1</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>arg2</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns <code>$arg1</code> raised to the power of <code>$arg2</code> .
If <code>$arg1</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the <code>$arg1</code> raised to the power of <code>$arg2</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:pow</xqdoc:name>
      <xqdoc:signature>declare function math:pow($arg1 as xs:double?, $arg2 as xs:double) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg1</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>arg2</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns <i>e</i> raised to the power of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the value of <i>e</i> raised to the power of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:exp</xqdoc:name>
      <xqdoc:signature>declare function math:exp($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the natural logarithm of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the natural logarithm (base <i>e</i> ) of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:log</xqdoc:name>
      <xqdoc:signature>declare function math:log($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the base 10 logarithm of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the base 10 logarithm of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:log10</xqdoc:name>
      <xqdoc:signature>declare function math:log10($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the <code>xs:double</code> value of the mathematical constant <i>e</i> whose lexical representation is 2.718281828459045.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:e</xqdoc:name>
      <xqdoc:signature>declare function math:e() as xs:double external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the hyperbolic sine of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the hyperbolic sine of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:sinh</xqdoc:name>
      <xqdoc:signature>declare function math:sinh($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the hyperbolic cosine of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the hyperbolic cosine of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:cosh</xqdoc:name>
      <xqdoc:signature>declare function math:cosh($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the hyperbolic tangent of <code>$arg</code> .
If <code>$arg</code> is the empty sequence, the empty sequence is returned.
Otherwise the result is the hyperbolic tangent of <code>$arg</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:tanh</xqdoc:name>
      <xqdoc:signature>declare function math:tanh($arg as xs:double?) as xs:double? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>arg</xqdoc:name>
          <xqdoc:type occurrence="?">xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Calculates the CRC32 check sum of the given string <code>$str</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>math:crc32</xqdoc:name>
      <xqdoc:signature>declare function math:crc32($str as xs:string) as xs:hexBinary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>str</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:hexBinary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/out</xqdoc:uri>
    <xqdoc:name>out.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for simplifying formatted data output.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="out" uri="http://basex.org/modules/out"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns a single newline character ( <code>&amp;#10;</code> ).</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>out:nl</xqdoc:name>
      <xqdoc:signature>declare function out:nl() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns a single tabulator character ( <code>&amp;#9;</code> ).</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>out:tab</xqdoc:name>
      <xqdoc:signature>declare function out:tab() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a formatted string. <code>$item1</code> and all following items are applied to the <code>$format</code> string, according to <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax">Java’s printf syntax</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>out:format</xqdoc:name>
      <xqdoc:signature>declare function out:format($format as xs:string, $item1 as item()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>format</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>item1</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/proc</xqdoc:uri>
    <xqdoc:name>proc.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> provides functions for executing system commands from XQuery.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="proc" uri="http://basex.org/modules/proc"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Executes the specified command in a separate process and returns the result as string.
<code>$cmd</code> is the name of the command. Arguments to the command may be specified via <code>$args</code> .
The result can be explicitly converted to a specified <code>$encoding</code> . If no encoding is specified, the system’s default encoding is used.</xqdoc:description>
        <xqdoc:error>bxerr:BXPRnnnn If the command results in an error, an XQuery error will be raised. Its code will consist of the letters <code>BXPR</code> and four digits with the command’s exit code.</xqdoc:error>
        <xqdoc:error>bxerr:BXPR9999 the specified encoding does not exist or is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>proc:system</xqdoc:name>
      <xqdoc:signature>declare function proc:system($cmd as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>cmd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Executes the specified command in a separate process and returns the result as string.
<code>$cmd</code> is the name of the command. Arguments to the command may be specified via <code>$args</code> .
The result can be explicitly converted to a specified <code>$encoding</code> . If no encoding is specified, the system’s default encoding is used.</xqdoc:description>
        <xqdoc:error>bxerr:BXPRnnnn If the command results in an error, an XQuery error will be raised. Its code will consist of the letters <code>BXPR</code> and four digits with the command’s exit code.</xqdoc:error>
        <xqdoc:error>bxerr:BXPR9999 the specified encoding does not exist or is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>proc:system</xqdoc:name>
      <xqdoc:signature>declare function proc:system($cmd as xs:string, $args as xs:string*) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>cmd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>args</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Executes the specified command in a separate process and returns the result as string.
<code>$cmd</code> is the name of the command. Arguments to the command may be specified via <code>$args</code> .
The result can be explicitly converted to a specified <code>$encoding</code> . If no encoding is specified, the system’s default encoding is used.</xqdoc:description>
        <xqdoc:error>bxerr:BXPRnnnn If the command results in an error, an XQuery error will be raised. Its code will consist of the letters <code>BXPR</code> and four digits with the command’s exit code.</xqdoc:error>
        <xqdoc:error>bxerr:BXPR9999 the specified encoding does not exist or is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>proc:system</xqdoc:name>
      <xqdoc:signature>declare function proc:system($cmd as xs:string, $args as xs:string*, $encoding as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>cmd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>args</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Executes the specified command in a separate process and returns the result as element.
<code>$cmd</code> is the name of the command. Arguments to the command may be specified via <code>$args</code> .
The result can be explicitly converted to a specified <code>$encoding</code> . If no encoding is specified, the system’s default encoding is used.
A result has the following structure:
<pre class="brush:xml"> &lt;result&gt; &lt;output&gt;...result output...&lt;/output&gt; &lt;error&gt;...error output...&lt;/error&gt; &lt;code&gt;0&lt;/code&gt; &lt;/result&gt; </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXPR9999 the specified encoding does not exist or is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>proc:execute</xqdoc:name>
      <xqdoc:signature>declare function proc:execute($cmd as xs:string) as element(result) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>cmd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(result)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Executes the specified command in a separate process and returns the result as element.
<code>$cmd</code> is the name of the command. Arguments to the command may be specified via <code>$args</code> .
The result can be explicitly converted to a specified <code>$encoding</code> . If no encoding is specified, the system’s default encoding is used.
A result has the following structure:
<pre class="brush:xml"> &lt;result&gt; &lt;output&gt;...result output...&lt;/output&gt; &lt;error&gt;...error output...&lt;/error&gt; &lt;code&gt;0&lt;/code&gt; &lt;/result&gt; </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXPR9999 the specified encoding does not exist or is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>proc:execute</xqdoc:name>
      <xqdoc:signature>declare function proc:execute($cmd as xs:string, $args as xs:string*) as element(result) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>cmd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>args</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(result)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Executes the specified command in a separate process and returns the result as element.
<code>$cmd</code> is the name of the command. Arguments to the command may be specified via <code>$args</code> .
The result can be explicitly converted to a specified <code>$encoding</code> . If no encoding is specified, the system’s default encoding is used.
A result has the following structure:
<pre class="brush:xml"> &lt;result&gt; &lt;output&gt;...result output...&lt;/output&gt; &lt;error&gt;...error output...&lt;/error&gt; &lt;code&gt;0&lt;/code&gt; &lt;/result&gt; </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXPR9999 the specified encoding does not exist or is not supported.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>proc:execute</xqdoc:name>
      <xqdoc:signature>declare function proc:execute($cmd as xs:string, $args as xs:string*, $encoding as xs:string) as element(result) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>cmd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>args</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(result)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/prof</xqdoc:uri>
    <xqdoc:name>prof.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains various testing, profiling and helper functions.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="prof" uri="http://basex.org/modules/prof"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Measures the time needed to evaluate <code>$expr</code> and sends it to standard error or, if the GUI is used, to the Info View.
If <code>$cache</code> is set to <code>true()</code> , the result will be temporarily cached. This way, a potential iterative execution of the expression (which often yields different memory usage) is blocked.
A third, optional argument <code>$label</code> may be specified to tag the profiling result.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:time</xqdoc:name>
      <xqdoc:signature>declare function prof:time($expr as item()) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Measures the time needed to evaluate <code>$expr</code> and sends it to standard error or, if the GUI is used, to the Info View.
If <code>$cache</code> is set to <code>true()</code> , the result will be temporarily cached. This way, a potential iterative execution of the expression (which often yields different memory usage) is blocked.
A third, optional argument <code>$label</code> may be specified to tag the profiling result.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:time</xqdoc:name>
      <xqdoc:signature>declare function prof:time($expr as item(), $cache as xs:boolean) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>cache</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Measures the time needed to evaluate <code>$expr</code> and sends it to standard error or, if the GUI is used, to the Info View.
If <code>$cache</code> is set to <code>true()</code> , the result will be temporarily cached. This way, a potential iterative execution of the expression (which often yields different memory usage) is blocked.
A third, optional argument <code>$label</code> may be specified to tag the profiling result.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:time</xqdoc:name>
      <xqdoc:signature>declare function prof:time($expr as item(), $cache as xs:boolean, $label as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>cache</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>label</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Measures the memory allocated by evaluating <code>$expr</code> and sends it to standard error or, if the GUI is used, to the Info View.
If <code>$cache</code> is set to <code>true()</code> , the result will be temporarily cached. This way, a potential iterative execution of the expression (which often yields different memory usage) is blocked.
A third, optional argument <code>$label</code> may be specified to tag the profiling result.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:mem</xqdoc:name>
      <xqdoc:signature>declare function prof:mem($expr as item()) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Measures the memory allocated by evaluating <code>$expr</code> and sends it to standard error or, if the GUI is used, to the Info View.
If <code>$cache</code> is set to <code>true()</code> , the result will be temporarily cached. This way, a potential iterative execution of the expression (which often yields different memory usage) is blocked.
A third, optional argument <code>$label</code> may be specified to tag the profiling result.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:mem</xqdoc:name>
      <xqdoc:signature>declare function prof:mem($expr as item(), $cache as xs:boolean) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>cache</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Measures the memory allocated by evaluating <code>$expr</code> and sends it to standard error or, if the GUI is used, to the Info View.
If <code>$cache</code> is set to <code>true()</code> , the result will be temporarily cached. This way, a potential iterative execution of the expression (which often yields different memory usage) is blocked.
A third, optional argument <code>$label</code> may be specified to tag the profiling result.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:mem</xqdoc:name>
      <xqdoc:signature>declare function prof:mem($expr as item(), $cache as xs:boolean, $label as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>cache</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>label</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Sleeps for the specified number of milliseconds.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:sleep</xqdoc:name>
      <xqdoc:signature>declare function prof:sleep($ms as xs:integer) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>ms</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a human-readable representation of the specified <code>$number</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:human</xqdoc:name>
      <xqdoc:signature>declare function prof:human($number as xs:integer) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>number</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Dumps a serialized representation of <code>$expr</code> to <code>STDERR</code> , optionally prefixed with <code>$label</code> , and returns an empty sequence. If the GUI is used, the dumped result is shown in the <a href="http://docs.basex.org/wiki/Graphical_User_Interface#Visualizations">Info View</a> .
In contrast to <code>fn:trace()</code> , the consumed expression will not be passed on.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:dump</xqdoc:name>
      <xqdoc:signature>declare function prof:dump($expr as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Dumps a serialized representation of <code>$expr</code> to <code>STDERR</code> , optionally prefixed with <code>$label</code> , and returns an empty sequence. If the GUI is used, the dumped result is shown in the <a href="http://docs.basex.org/wiki/Graphical_User_Interface#Visualizations">Info View</a> .
In contrast to <code>fn:trace()</code> , the consumed expression will not be passed on.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:dump</xqdoc:name>
      <xqdoc:signature>declare function prof:dump($expr as item(), $label as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>label</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Prints a list of all current local and global variable assignments to standard error or, if the GUI is used, to the Info View.
As every query is optimized before being evaluated, not all of the original variables may be visible in the output. Moreover, many variables of function calls will disappear because functions are inlined. Function inlining can be turned off by setting the <a href="http://docs.basex.org/wiki/Options#INLINELIMIT">INLINELIMIT</a> option to <code>0</code> .
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:variables</xqdoc:name>
      <xqdoc:signature>declare function prof:variables() as empty-sequence() external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the number of milliseconds passed since 1970/01/01 UTC. The granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds.
In contrast to <code>fn:current-time()</code> , the function is <i>non-deterministic</i> , as it returns different values every time it is called. Its evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:current-ms</xqdoc:name>
      <xqdoc:signature>declare function prof:current-ms() as xs:integer external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the current value of the most precise available system timer in nanoseconds.
In contrast to <code>fn:current-time()</code> , the function is <i>non-deterministic</i> , as it returns different values every time it is called. Its evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:current-ns</xqdoc:name>
      <xqdoc:signature>declare function prof:current-ns() as xs:integer external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Swallows all items of the specified <code>$value</code> and returns an empty sequence. This function is helpful if some code needs to be evaluated and if the actual result is irrelevant.
The function is <i>non-deterministic</i> : evaluation order will be preserved by the compiler.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>prof:void</xqdoc:name>
      <xqdoc:signature>declare function prof:void($value as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/random</xqdoc:uri>
    <xqdoc:name>random.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for computing random values. All functions except for <a href="#random:seeded-double">random:seeded-double</a> and <a href="#random:seeded-integer">random:seeded-integer</a> are non-deterministic, i. e., they return different values for each call.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="random" uri="http://basex.org/modules/random"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns a double value between 0.0 (inclusive) and 1.0 (exclusive).</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>random:double</xqdoc:name>
      <xqdoc:signature>declare function random:double() as xs:double external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns an integer value, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive)</xqdoc:description>
        <xqdoc:error>bxerr:BXRA0001 the maximum value is out of bounds.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>random:integer</xqdoc:name>
      <xqdoc:signature>declare function random:integer() as xs:integer external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an integer value, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive)</xqdoc:description>
        <xqdoc:error>bxerr:BXRA0001 the maximum value is out of bounds.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>random:integer</xqdoc:name>
      <xqdoc:signature>declare function random:integer($max as xs:integer) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>max</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a sequence with <code>$num</code> double values between 0.0 (inclusive) and 1.0 (exclusive). The random values are created using the initial seed given in <code>$seed</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>random:seeded-double</xqdoc:name>
      <xqdoc:signature>declare function random:seeded-double($seed as xs:integer, $num as xs:integer) as xs:double* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seed</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>num</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns a sequence with <code>$num</code> integer values, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive). The random values are created using the initial seed given in <code>$seed</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXRA0001 the maximum value is out of bounds.</xqdoc:error>
        <xqdoc:error>bxerr:BXRA0002 the number of values to be returned is negative.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>random:seeded-integer</xqdoc:name>
      <xqdoc:signature>declare function random:seeded-integer($seed as xs:integer, $num as xs:integer) as xs:integer* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seed</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>num</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns a sequence with <code>$num</code> integer values, either in the whole integer range or between 0 (inclusive) and the given maximum (exclusive). The random values are created using the initial seed given in <code>$seed</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXRA0001 the maximum value is out of bounds.</xqdoc:error>
        <xqdoc:error>bxerr:BXRA0002 the number of values to be returned is negative.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>random:seeded-integer</xqdoc:name>
      <xqdoc:signature>declare function random:seeded-integer($seed as xs:integer, $num as xs:integer, $max as xs:integer) as xs:integer* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>seed</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>num</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>max</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a sequence with <code>$num</code> double values. The random values are Gaussian (i.e. normally) distributed with the mean 0.0. and the derivation 1.0.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>random:gaussian</xqdoc:name>
      <xqdoc:signature>declare function random:gaussian($num as xs:integer) as xs:double* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>num</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:double</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Creates a random universally unique identifier (UUID), represented as 128-bit value.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>random:uuid</xqdoc:name>
      <xqdoc:signature>declare function random:uuid() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/repo</xqdoc:uri>
    <xqdoc:name>repo.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for installing, listing and deleting modules contained in the <a href="http://docs.basex.org/wiki/Repository">Repository</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="repo" uri="http://basex.org/modules/repo"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Installs a package or replaces an existing package. The parameter <code>$path</code> indicates the path to the package.</xqdoc:description>
        <xqdoc:error>bxerr:BXRE0001 the package does not exist.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0002 a package uses an invalid namespace URI.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0003 the package to be installed requires a package which is still not installed.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0004 the package descriptor is invalid.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0005 the module contained in the package to be installed is already installed as part of another package.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0006 the package cannot be parsed.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0009 the package version is not supported.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0010 the package contains an invalid JAR descriptor.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0011 the package contains a JAR descriptor but it cannot be read.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>repo:install</xqdoc:name>
      <xqdoc:signature>declare function repo:install($path as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Deletes a package. The parameter <code>$pkg</code> indicates either the package name as specified in the package descriptor or the name, suffixed with a hyphen and the package version.</xqdoc:description>
        <xqdoc:error>bxerr:BXRE0007 the package cannot be deleted.</xqdoc:error>
        <xqdoc:error>bxerr:BXRE0008 another package depends on the package to be deleted.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>repo:delete</xqdoc:name>
      <xqdoc:signature>declare function repo:delete($pkg as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pkg</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Lists the names and versions of all currently installed packages.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>repo:list</xqdoc:name>
      <xqdoc:signature>declare function repo:list() as element(package)* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(package)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://exquery.org/ns/request</xqdoc:uri>
    <xqdoc:name>request.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for retrieving information on an HTTP request that has triggered the query. It is mainly useful in the context of <a href="http://docs.basex.org/wiki/Web_Application">Web Applications</a> . The module is related to Adam Retter’s <a href="http://exquery.github.com/expath-specs-playground/request-module-1.0-specification.html">EXQuery Request Module</a> draft.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="request" uri="http://exquery.org/ns/request"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the Method of the HTTP request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:method</xqdoc:name>
      <xqdoc:signature>declare function request:method() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of an attribute of the HTTP request. If the attribute does not exist, an empty sequence is returned.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:attribute</xqdoc:name>
      <xqdoc:signature>declare function request:attribute($name as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the Scheme component of the URI of an HTTP request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:scheme</xqdoc:name>
      <xqdoc:signature>declare function request:scheme() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the Hostname component of the URI of an HTTP request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:hostname</xqdoc:name>
      <xqdoc:signature>declare function request:hostname() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the Port component of the URI of an HTTP request, or a default port if it has not been explicitly specified in the URI.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:port</xqdoc:name>
      <xqdoc:signature>declare function request:port() as xs:integer external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the Path component of the URI of an HTTP request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:path</xqdoc:name>
      <xqdoc:signature>declare function request:path() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the Query component of the URI of an HTTP request. If no query has been specified, an empty sequence is returned.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:query</xqdoc:name>
      <xqdoc:signature>declare function request:query() as xs:string? external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the complete URI of an HTTP request as it has been specified by the client.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:uri</xqdoc:name>
      <xqdoc:signature>declare function request:uri() as xs:anyURI external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:anyURI</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the context of the request. For servlets in the default (root) context, this method returns an empty string.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:context-path</xqdoc:name>
      <xqdoc:signature>declare function request:context-path() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the IP address of the server.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:address</xqdoc:name>
      <xqdoc:signature>declare function request:address() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the fully qualified hostname of the client that sent the request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:remote-hostname</xqdoc:name>
      <xqdoc:signature>declare function request:remote-hostname() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the IP address of the client that sent the request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:remote-address</xqdoc:name>
      <xqdoc:signature>declare function request:remote-address() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the TCP port of the client socket that triggered the request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:remote-port</xqdoc:name>
      <xqdoc:signature>declare function request:remote-port() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the names of all query and form field parameters available from the HTTP request. With <a href="http://docs.basex.org/wiki/RESTXQ">RESTXQ</a> , this function can be used to access parameters that have not been statically bound by <a href="http://docs.basex.org/wiki/RESTXQ#Query_Parameters">%rest:query-param</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:parameter-names</xqdoc:name>
      <xqdoc:signature>declare function request:parameter-names() as xs:string* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of the named query or form field parameter in an HTTP request. If the parameter does not exist, an empty sequence or the optionally specified default value is returned instead. If both query and form field parameters with the same name exist, the form field values will be attached to the query values.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:parameter</xqdoc:name>
      <xqdoc:signature>declare function request:parameter($name as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of the named query or form field parameter in an HTTP request. If the parameter does not exist, an empty sequence or the optionally specified default value is returned instead. If both query and form field parameters with the same name exist, the form field values will be attached to the query values.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:parameter</xqdoc:name>
      <xqdoc:signature>declare function request:parameter($name as xs:string, $default as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>default</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the names of all headers available from the HTTP request. If <a href="http://docs.basex.org/wiki/RESTXQ">RESTXQ</a> is used, this function can be used to access headers that have not been statically bound by <a href="http://docs.basex.org/wiki/RESTXQ#HTTP_Headers">%rest:header-param</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:header-names</xqdoc:name>
      <xqdoc:signature>declare function request:header-names() as xs:string* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of the named header in an HTTP request. If the header does not exist, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:header</xqdoc:name>
      <xqdoc:signature>declare function request:header($name as xs:string) as xs:string? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of the named header in an HTTP request. If the header does not exist, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:header</xqdoc:name>
      <xqdoc:signature>declare function request:header($name as xs:string, $default as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>default</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the names of all cookies in the HTTP headers available from the HTTP request. If <a href="http://docs.basex.org/wiki/RESTXQ">RESTXQ</a> is used, this function can be used to access cookies that have not been statically bound by <a href="http://docs.basex.org/wiki/RESTXQ#Cookies">%rest:cookie-param</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:cookie-names</xqdoc:name>
      <xqdoc:signature>declare function request:cookie-names() as xs:string* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of the named Cookie in an HTTP request. If there is no such cookie, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:cookie</xqdoc:name>
      <xqdoc:signature>declare function request:cookie($name as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of the named Cookie in an HTTP request. If there is no such cookie, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>request:cookie</xqdoc:name>
      <xqdoc:signature>declare function request:cookie($name as xs:string, $default as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>default</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://exquery.org/ns/restxq</xqdoc:uri>
    <xqdoc:name>rest.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains helper functions for the <a href="http://docs.basex.org/wiki/RESTXQ">RESTXQ</a> API, some of which are defined in the <a href="http://exquery.github.io/exquery/exquery-restxq-specification/restxq-1.0-specification.html">RESTXQ Draft</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/>
    <xqdoc:namespace prefix="wadl" uri="http://wadl.dev.java.net/2009/02"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>This function returns the implementation defined base URI of the resource function.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>rest:base-uri</xqdoc:name>
      <xqdoc:signature>declare function rest:base-uri() as xs:anyURI external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:anyURI</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>This function returns the complete URI that addresses the Resource Function. This is the result of <a href="#rest:base-uri">rest:base-uri</a> appended with the path from the path annotation of the resource function.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>rest:uri</xqdoc:name>
      <xqdoc:signature>declare function rest:uri() as xs:anyURI external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:anyURI</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>This (unofficial) function returns a <a href="http://www.w3.org/Submission/wadl">WADL description</a> of all available REST services.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>rest:wadl</xqdoc:name>
      <xqdoc:signature>declare function rest:wadl() as element(wadl:application) external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element(wadl:application)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/session</xqdoc:uri>
    <xqdoc:name>session.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for accessing and modifying server-side session information. This module is mainly useful in the context of <a href="http://docs.basex.org/wiki/Web_Application">Web Applications</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="session" uri="http://basex.org/modules/session"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the session ID of a servlet request.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>session:id</xqdoc:name>
      <xqdoc:signature>declare function session:id() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the creation time of a session.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>session:created</xqdoc:name>
      <xqdoc:signature>declare function session:created() as xs:dateTime external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:dateTime</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the last access time of a session.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>session:accessed</xqdoc:name>
      <xqdoc:signature>declare function session:accessed() as xs:dateTime external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:dateTime</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the names of all variables bound to the current session.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>session:names</xqdoc:name>
      <xqdoc:signature>declare function session:names() as xs:string* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of a variable bound to the current session. If the key is unknown, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
        <xqdoc:error>bxerr:BXSE0002 the value of a session variable could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>session:get</xqdoc:name>
      <xqdoc:signature>declare function session:get($key as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of a variable bound to the current session. If the key is unknown, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
        <xqdoc:error>bxerr:BXSE0002 the value of a session variable could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>session:get</xqdoc:name>
      <xqdoc:signature>declare function session:get($key as xs:string, $default as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>default</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Binds the specified key/value pair to a session.</xqdoc:description>
        <xqdoc:error>bxerr:BXSE0001 a function item was specified as value of a session variable.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>session:set</xqdoc:name>
      <xqdoc:signature>declare function session:set($key as xs:string, $value as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Deletes a session variable.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>session:delete</xqdoc:name>
      <xqdoc:signature>declare function session:delete($key as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Unregisters a session and all data associated with it.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>session:close</xqdoc:name>
      <xqdoc:signature>declare function session:close() as empty-sequence() external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/sessions</xqdoc:uri>
    <xqdoc:name>sessions.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> can only be called from users with <i>Admin</i> permissions. It contains functions for accessing and modifying all registered server-side sessions. This module is mainly useful in the context of <a href="http://docs.basex.org/wiki/Web_Application">Web Applications</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="sessions" uri="http://basex.org/modules/sessions"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the IDs of all registered sessions.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>sessions:ids</xqdoc:name>
      <xqdoc:signature>declare function sessions:ids() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the creation time of the session specified by <code>$id</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>sessions:created</xqdoc:name>
      <xqdoc:signature>declare function sessions:created($id as xs:string) as xs:dateTime external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:dateTime</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the last access time of the session specified by <code>$id</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>sessions:accessed</xqdoc:name>
      <xqdoc:signature>declare function sessions:accessed($id as xs:string) as xs:dateTime external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:dateTime</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns the names of all variables bound to the session specified by <code>$id</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>sessions:names</xqdoc:name>
      <xqdoc:signature>declare function sessions:names($id as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of a variable bound to the session specified by <code>$id</code> . If the variable does not exist, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
        <xqdoc:error>bxerr:BXSE0002 the value of a session variable could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sessions:get</xqdoc:name>
      <xqdoc:signature>declare function sessions:get($id as xs:string, $key as xs:string) as xs:string? external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Returns the value of a variable bound to the session specified by <code>$id</code> . If the variable does not exist, an empty sequence or the optionally specified default value is returned instead.</xqdoc:description>
        <xqdoc:error>bxerr:BXSE0002 the value of a session variable could not be retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sessions:get</xqdoc:name>
      <xqdoc:signature>declare function sessions:get($id as xs:string, $key as xs:string, $default as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>default</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Assigns a value to a variable bound to the session specified by <code>$id</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXSE0001 a function item was specified as value of a session variable.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sessions:set</xqdoc:name>
      <xqdoc:signature>declare function sessions:set($id as xs:string, $key as xs:string, $value as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Deletes a variable bound to the session specified by <code>$id</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>sessions:delete</xqdoc:name>
      <xqdoc:signature>declare function sessions:delete($id as xs:string, $key as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>key</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Unregisters the session specified by <code>$id</code> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>sessions:close</xqdoc:name>
      <xqdoc:signature>declare function sessions:close($id as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/sql</xqdoc:uri>
    <xqdoc:name>sql.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to access relational databases from XQuery using SQL. With this module, you can execute query, update and prepared statements, and the result sets are returned as sequences of XML elements representing tuples. Each element has children representing the columns returned by the SQL statement.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="sql" uri="http://basex.org/modules/sql"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function initializes a JDBC driver specified via <code>$class</code> . This step might be superfluous if the SQL database is not embedded.</xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0007 the specified driver class is not found.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:init</xqdoc:name>
      <xqdoc:signature>declare function sql:init($class as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>class</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function establishes a connection to a relational database. As a result a connection handle is returned. The parameter <code>$url</code> is the URL of the database and shall be of the form: <code>jdbc:&lt;driver name&gt;:[//&lt;server&gt;[/&lt;database&gt;]]</code> . If the parameters <code>$user</code> and <code>$password</code> are specified, they are used as credentials for connecting to the database. The <code>$options</code> parameter can be used to set connection options, which can either be specified
<ul> <li> as children of an <code>&lt;sql:options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;sql:options&gt; &lt;sql:autocommit value='true'/&gt; ... &lt;/sql:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "autocommit": true(), ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs, e.g. missing JDBC driver or not existing relation.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:connect</xqdoc:name>
      <xqdoc:signature>declare function sql:connect($url as xs:string) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>url</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>This function establishes a connection to a relational database. As a result a connection handle is returned. The parameter <code>$url</code> is the URL of the database and shall be of the form: <code>jdbc:&lt;driver name&gt;:[//&lt;server&gt;[/&lt;database&gt;]]</code> . If the parameters <code>$user</code> and <code>$password</code> are specified, they are used as credentials for connecting to the database. The <code>$options</code> parameter can be used to set connection options, which can either be specified
<ul> <li> as children of an <code>&lt;sql:options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;sql:options&gt; &lt;sql:autocommit value='true'/&gt; ... &lt;/sql:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "autocommit": true(), ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs, e.g. missing JDBC driver or not existing relation.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:connect</xqdoc:name>
      <xqdoc:signature>declare function sql:connect($url as xs:string, $user as xs:string, $password as xs:string) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>url</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>user</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>password</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>This function establishes a connection to a relational database. As a result a connection handle is returned. The parameter <code>$url</code> is the URL of the database and shall be of the form: <code>jdbc:&lt;driver name&gt;:[//&lt;server&gt;[/&lt;database&gt;]]</code> . If the parameters <code>$user</code> and <code>$password</code> are specified, they are used as credentials for connecting to the database. The <code>$options</code> parameter can be used to set connection options, which can either be specified
<ul> <li> as children of an <code>&lt;sql:options/&gt;</code> element, e.g.: </li> </ul>  <pre class="brush:xml"> &lt;sql:options&gt; &lt;sql:autocommit value='true'/&gt; ... &lt;/sql:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "autocommit": true(), ... } </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs, e.g. missing JDBC driver or not existing relation.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:connect</xqdoc:name>
      <xqdoc:signature>declare function sql:connect($url as xs:string, $user as xs:string, $password as xs:string, $options as item()) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>url</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>user</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>password</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>This function executes a query or update statement. The parameter <code>$connection</code> specifies a connection handle. The parameter <code>$query</code> is a string representing an SQL statement.</xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs, e.g. not existing relation is retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:execute</xqdoc:name>
      <xqdoc:signature>declare function sql:execute($connection as xs:integer, $query as xs:string) as element()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>connection</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>This function executes a prepared statement. The parameter <code>$id</code> specifies a prepared statement handle. The optional parameter <code>$params</code> is an element <code>&lt;sql:parameters/&gt;</code> representing the parameters for a prepared statement along with their types and values. The following schema shall be used:
<pre class="brush:xml"> element sql:parameters { element sql:parameter { attribute type { "int"|"string"|"boolean"|"date"|"double"|"float"|"short"|"time"|"timestamp" }, attribute null { "true"|"false" }?, text }+ }? </pre>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs, e.g. not existing relation is retrieved.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:execute-prepared</xqdoc:name>
      <xqdoc:signature>declare function sql:execute-prepared($id as xs:integer, $params as element(sql:parameters)) as element()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>id</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>params</xqdoc:name>
          <xqdoc:type>element(sql:parameters)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>This function prepares a statement and returns a handle to it. The parameter <code>$connection</code> indicates the connection handle to be used. The parameter <code>$statement</code> is a string representing an SQL statement with one or more '?' placeholders. If the value of a field has to be set to <code>NULL</code> , then the attribute <code>null</code> of the element <code>&lt;sql:parameter/&gt;</code> has to be <code>true</code> .</xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:prepare</xqdoc:name>
      <xqdoc:signature>declare function sql:prepare($connection as xs:integer, $statement as xs:string) as xs:integer external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>connection</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>statement</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:integer</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function commits the changes made to a relational database. <code>$connection</code> specifies the connection handle.</xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:commit</xqdoc:name>
      <xqdoc:signature>declare function sql:commit($connection as xs:integer) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>connection</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function rolls back the changes made to a relational database. <code>$connection</code> specifies the connection handle.</xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:rollback</xqdoc:name>
      <xqdoc:signature>declare function sql:rollback($connection as xs:integer) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>connection</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>This function closes a connection to a relational database. <code>$connection</code> specifies the connection handle.</xqdoc:description>
        <xqdoc:error>bxerr:BXSQ0001 an SQL exception occurs.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>sql:close</xqdoc:name>
      <xqdoc:signature>declare function sql:close($connection as xs:integer) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>connection</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/stream</xqdoc:uri>
    <xqdoc:name>stream.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for handling <i>streamable</i> items. In contrast to standard XQuery items, a streamable item contains only a reference to the actual data. The data itself will be retrieved if it is requested by an expression, or if the item is to be serialized. Hence, a streamable item only uses a few bytes, and no additional memory is occupied during serialization. The following BaseX functions return streamable items: Some functions are capable of consuming items in a <i>streamable</i> fashion: data will never be cached, but instead passed on to another target (file, the calling expression, etc.). The following streaming functions are currently available: The XQuery expression below serves as an example on how large files can be downloaded and written to a file with constant memory consumption:</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="stream" uri="http://basex.org/modules/stream"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns a materialized instance of the specified <code>$value</code> :
<ul> <li> if an item is streamable, its value will be retrieved, and a new item containing the value will be returned. </li> <li> other, non-streamable items will simply be passed through. </li> </ul>  <p>Materialization is advisable if a value is to be processed more than once, and is expensive to retrieve. It is get mandatory whenever a value is invalidated before it is requested (see the example below). </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>stream:materialize</xqdoc:name>
      <xqdoc:signature>declare function stream:materialize($value as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>value</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Checks whether the specified <code>$item</code> is streamable.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>stream:is-streamable</xqdoc:name>
      <xqdoc:signature>declare function stream:is-streamable($item as item()) as item() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>item</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>test.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces/>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/unit</xqdoc:uri>
    <xqdoc:name>unit.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains annotations and functions for performing XQUnit tests.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="unit" uri="http://basex.org/modules/unit"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Asserts that the effective boolean value of the specified <code>$test</code> is true and returns an empty sequence. Otherwise, raises an error. The <i>effective boolean value</i> of an expression can be explicitly computed by using the <code>fn:boolean</code> function.
The default failure message can be overridden with the <code>$info</code> argument.</xqdoc:description>
        <xqdoc:error>:UNIT0001 the assertion failed, or an error was raised.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>unit:assert</xqdoc:name>
      <xqdoc:signature>declare function unit:assert($test as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>test</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Asserts that the effective boolean value of the specified <code>$test</code> is true and returns an empty sequence. Otherwise, raises an error. The <i>effective boolean value</i> of an expression can be explicitly computed by using the <code>fn:boolean</code> function.
The default failure message can be overridden with the <code>$info</code> argument.</xqdoc:description>
        <xqdoc:error>:UNIT0001 the assertion failed, or an error was raised.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>unit:assert</xqdoc:name>
      <xqdoc:signature>declare function unit:assert($test as item()*, $info as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>test</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>info</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Asserts that the specified arguments are equal according to the rules of the <code>fn:deep-equals</code> function. Otherwise, raises an error.
The default failure message can be overridden with the <code>$info</code> argument.</xqdoc:description>
        <xqdoc:error>:UNIT0001 the assertion failed, or an error was raised.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>unit:assert-equals</xqdoc:name>
      <xqdoc:signature>declare function unit:assert-equals($returned as item()*, $expected as item()*) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>returned</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>expected</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Asserts that the specified arguments are equal according to the rules of the <code>fn:deep-equals</code> function. Otherwise, raises an error.
The default failure message can be overridden with the <code>$info</code> argument.</xqdoc:description>
        <xqdoc:error>:UNIT0001 the assertion failed, or an error was raised.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>unit:assert-equals</xqdoc:name>
      <xqdoc:signature>declare function unit:assert-equals($returned as item()*, $expected as item()*, $info as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>returned</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>expected</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>info</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Raises a unit error. The default failure message can be overridden with the <code>$info</code> argument.</xqdoc:description>
        <xqdoc:error>:UNIT0001 default error raised by this function.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>unit:fail</xqdoc:name>
      <xqdoc:signature>declare function unit:fail() as empty-sequence() external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Raises a unit error. The default failure message can be overridden with the <code>$info</code> argument.</xqdoc:description>
        <xqdoc:error>:UNIT0001 default error raised by this function.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>unit:fail</xqdoc:name>
      <xqdoc:signature>declare function unit:fail($info as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>info</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/user</xqdoc:uri>
    <xqdoc:name>user.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for creating and administering database users. The <a href="http://docs.basex.org/wiki/User_Management">User Management</a> article gives more information on database users and permissions.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="user" uri="http://basex.org/modules/user"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the name of the currently logged in user.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>user:current</xqdoc:name>
      <xqdoc:signature>declare function user:current() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the names of all registered users.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>user:list</xqdoc:name>
      <xqdoc:signature>declare function user:list() as xs:string* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns an element sequence, containing all registered users and their permissions.
In addition to the <a href="http://docs.basex.org/wiki/Commands#SHOW_USERS">SHOW USERS</a> command, encoded password strings and database permissions will be output. A user <code>$name</code> can be specified to filter the results in advance.</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:list-details</xqdoc:name>
      <xqdoc:signature>declare function user:list-details() as element(user)* external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(user)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Returns an element sequence, containing all registered users and their permissions.
In addition to the <a href="http://docs.basex.org/wiki/Commands#SHOW_USERS">SHOW USERS</a> command, encoded password strings and database permissions will be output. A user <code>$name</code> can be specified to filter the results in advance.</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:list-details</xqdoc:name>
      <xqdoc:signature>declare function user:list-details($name as xs:string) as element(user)* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(user)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Checks if a user with the specified <code>$name</code> exists.</xqdoc:description>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:exists</xqdoc:name>
      <xqdoc:signature>declare function user:exists($name as xs:string) as xs:boolean external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a new user with the specified <code>$name</code> and <code>$password</code> . The default permission <code>none</code> can be overwritten with the <code>$permission</code> argument. Existing users will be overwritten.</xqdoc:description>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:permission The specified permission is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:create</xqdoc:name>
      <xqdoc:signature>declare function user:create($name as xs:string, $password as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>password</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a new user with the specified <code>$name</code> and <code>$password</code> . The default permission <code>none</code> can be overwritten with the <code>$permission</code> argument. Existing users will be overwritten.</xqdoc:description>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:permission The specified permission is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:create</xqdoc:name>
      <xqdoc:signature>declare function user:create($name as xs:string, $password as xs:string, $permission as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>password</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>permission</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Grants the specified <code>$permission</code> to a user with the specified <code>$name</code> . If a glob <code>$pattern</code> is specified, the permission will only be applied to databases matching that pattern.</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:pattern The specified database pattern is invalid.</xqdoc:error>
        <xqdoc:error>:permission The specified permission is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:local A local permission can only be 'none', 'read' or 'write'.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:grant</xqdoc:name>
      <xqdoc:signature>declare function user:grant($name as xs:string, $permission as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>permission</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Grants the specified <code>$permission</code> to a user with the specified <code>$name</code> . If a glob <code>$pattern</code> is specified, the permission will only be applied to databases matching that pattern.</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:pattern The specified database pattern is invalid.</xqdoc:error>
        <xqdoc:error>:permission The specified permission is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:local A local permission can only be 'none', 'read' or 'write'.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:grant</xqdoc:name>
      <xqdoc:signature>declare function user:grant($name as xs:string, $permission as xs:string, $pattern as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>permission</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pattern</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Drops a user with the specified <code>$name</code> . If a glob <code>$pattern</code> is specified, only the database pattern will be dropped.</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:pattern The specified database pattern is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
        <xqdoc:error>:conflict A user cannot be both altered and dropped.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:drop</xqdoc:name>
      <xqdoc:signature>declare function user:drop($name as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Drops a user with the specified <code>$name</code> . If a glob <code>$pattern</code> is specified, only the database pattern will be dropped.</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:pattern The specified database pattern is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
        <xqdoc:error>:conflict A user cannot be both altered and dropped.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:drop</xqdoc:name>
      <xqdoc:signature>declare function user:drop($name as xs:string, $pattern as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pattern</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Renames a user with the specified <code>$name</code> to <code>$newname</code> .</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:admin The "admin" user cannot be modified.</xqdoc:error>
        <xqdoc:error>:logged-in The specified user is currently logged in.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
        <xqdoc:error>:conflict A user cannot be both altered and dropped.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:alter</xqdoc:name>
      <xqdoc:signature>declare function user:alter($name as xs:string, $newname as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>newname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Changes the <code>password</code> of a user with the specified <code>$name</code> .</xqdoc:description>
        <xqdoc:error>:unknown The specified user name is unknown.</xqdoc:error>
        <xqdoc:error>:name The specified user name is invalid.</xqdoc:error>
        <xqdoc:error>:update The operation can only be performed once per user or database pattern.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>user:password</xqdoc:name>
      <xqdoc:signature>declare function user:password($name as xs:string, $password as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>password</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/validate</xqdoc:uri>
    <xqdoc:name>validate.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to perform validations against <a href="http://www.w3.org/XML/Schema">XML Schema</a> and <a href="http://en.wikipedia.org/wiki/Document_Type_Declaration">Document Type Declarations</a> . By default, this module uses Java’s standard validators. As an alternative, <a href="http://www.saxonica.com/">Saxon XSLT Processor</a> is used if ( <code>saxon9he.jar</code> , <code>saxon9pe.jar</code> or <code>saxon9ee.jar</code> ) is added to the classpath.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="validate" uri="http://basex.org/modules/validate"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> . Both <code>$input</code> and <code>$schema</code> can be specified as: <ul> <li> <code>xs:string</code>, containing the path to the resource, </li> <li> <code>xs:string</code>, containing the resource in its string representation, or </li> <li> <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the schema for validation. If no schema is given, <code>$input</code> is required to contain an <code>xsi:(noNamespace)schemaLocation</code> attribute as defined in <a href="http://www.w3.org/TR/xmlschema-1/#xsi_schemaLocation">W3C XML Schema</a>.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0001 the validation fails.</xqdoc:error>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:xsd</xqdoc:name>
      <xqdoc:signature>declare function validate:xsd($input as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> . Both <code>$input</code> and <code>$schema</code> can be specified as: <ul> <li> <code>xs:string</code>, containing the path to the resource, </li> <li> <code>xs:string</code>, containing the resource in its string representation, or </li> <li> <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the schema for validation. If no schema is given, <code>$input</code> is required to contain an <code>xsi:(noNamespace)schemaLocation</code> attribute as defined in <a href="http://www.w3.org/TR/xmlschema-1/#xsi_schemaLocation">W3C XML Schema</a>.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0001 the validation fails.</xqdoc:error>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:xsd</xqdoc:name>
      <xqdoc:signature>declare function validate:xsd($input as item(), $schema as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>schema</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> and returns warning, errors and fatal errors in a string sequence. <code>$input</code> and <code>$schema</code> can be specified as: <ul> <li> <code>xs:string</code>, containing the path to the resource, </li> <li> <code>xs:string</code>, containing the resource in its string representation, or </li> <li> <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the schema for validation. If no schema is given, <code>$input</code> is required to contain an <code>xsi:(noNamespace)schemaLocation</code> attribute as defined in <a href="http://www.w3.org/TR/xmlschema-1/#xsi_schemaLocation">W3C XML Schema</a>.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:xsd-info</xqdoc:name>
      <xqdoc:signature>declare function validate:xsd-info($input as item()) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> and returns warning, errors and fatal errors in a string sequence. <code>$input</code> and <code>$schema</code> can be specified as: <ul> <li> <code>xs:string</code>, containing the path to the resource, </li> <li> <code>xs:string</code>, containing the resource in its string representation, or </li> <li> <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the schema for validation. If no schema is given, <code>$input</code> is required to contain an <code>xsi:(noNamespace)schemaLocation</code> attribute as defined in <a href="http://www.w3.org/TR/xmlschema-1/#xsi_schemaLocation">W3C XML Schema</a>.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:xsd-info</xqdoc:name>
      <xqdoc:signature>declare function validate:xsd-info($input as item(), $schema as item()) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>schema</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> . <code>$input</code> can be specified as: <ul> <li> an <code>xs:string</code>, containing the path to the resource, </li> <li> an <code>xs:string</code>, containing the resource in its string representation, or </li> <li> a <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the DTD for validation. If no DTD is given, <code>$input</code> is required to contain a DTD doctype declaration.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0001 the validation fails.</xqdoc:error>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:dtd</xqdoc:name>
      <xqdoc:signature>declare function validate:dtd($input as item()) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> . <code>$input</code> can be specified as: <ul> <li> an <code>xs:string</code>, containing the path to the resource, </li> <li> an <code>xs:string</code>, containing the resource in its string representation, or </li> <li> a <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the DTD for validation. If no DTD is given, <code>$input</code> is required to contain a DTD doctype declaration.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0001 the validation fails.</xqdoc:error>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:dtd</xqdoc:name>
      <xqdoc:signature>declare function validate:dtd($input as item(), $dtd as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>dtd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> and returns warning, errors and fatal errors in a string sequence. <code>$input</code> can be specified as: <ul> <li> <code>xs:string</code>, containing the path to the resource, </li> <li> <code>xs:string</code>, containing the resource in its string representation, or </li> <li> <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the DTD for validation. If no DTD is given, <code>$input</code> is required to contain a DTD doctype declaration.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:dtd-info</xqdoc:name>
      <xqdoc:signature>declare function validate:dtd-info($input as item()) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Validates the document specified by <code>$input</code> and returns warning, errors and fatal errors in a string sequence. <code>$input</code> can be specified as: <ul> <li> <code>xs:string</code>, containing the path to the resource, </li> <li> <code>xs:string</code>, containing the resource in its string representation, or </li> <li> <code>node()</code>, containing the resource itself. </li> </ul>  <p> <code>$schema</code> can be used to specify the DTD for validation. If no DTD is given, <code>$input</code> is required to contain a DTD doctype declaration.
</p>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXVA0002 the validation process cannot be started.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>validate:dtd-info</xqdoc:name>
      <xqdoc:signature>declare function validate:dtd-info($input as item(), $dtd as xs:string) as xs:string* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>dtd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/xquery</xqdoc:uri>
    <xqdoc:name>xquery.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions for evaluating XQuery strings and modules at runtime.</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="xquery" uri="http://basex.org/modules/xquery"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Evaluates the supplied <code>$query</code> string as XQuery expression and returns the resulting items.
The evaluated query has its own query context. If a returned node is stored in a database, a main-memory copy will be returned as result, because the referenced database is closed after query execution and will not be accessible anymore.
Variables and context items can be declared via <code>$bindings</code> . The specified keys must be QNames or strings: <ul> <li> If a key is a QName, it will be directly adopted as variable name. </li> <li> It a key is a string, it may be prefixed with a dollar sign. Namespace can be specified using the <a href="http://www.jclark.com/xml/xmlns.htm">Clark Notation</a>. </li> <li> If the specified string is empty, the value will be bound to the context item. </li> </ul>  <p>The <code>$options</code> parameter contains evaluation options, which can either be specified </p>  <ul> <li> as children of an <code>&lt;xquery:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;xquery:options&gt; &lt;xquery:permission value="none"/&gt; &lt;/xquery:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "permission": "none" } </pre>  <p>The following options are available: </p>  <ul> <li> <code>permission</code>: the query will be evaluated with the specified permissions (see <a href="http://docs.basex.org/wiki/User_Management">User Management</a>). </li> <li> <code>timeout</code>: query execution will be interrupted after the specified number of seconds. </li> <li> <code>memory</code>: query execution will be interrupted if the specified number of megabytes will be exceeded. This check works best if only one process is running at the same time. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0001 the query contains <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout or memory constraints.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:eval</xqdoc:name>
      <xqdoc:signature>declare function xquery:eval($query as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Evaluates the supplied <code>$query</code> string as XQuery expression and returns the resulting items.
The evaluated query has its own query context. If a returned node is stored in a database, a main-memory copy will be returned as result, because the referenced database is closed after query execution and will not be accessible anymore.
Variables and context items can be declared via <code>$bindings</code> . The specified keys must be QNames or strings: <ul> <li> If a key is a QName, it will be directly adopted as variable name. </li> <li> It a key is a string, it may be prefixed with a dollar sign. Namespace can be specified using the <a href="http://www.jclark.com/xml/xmlns.htm">Clark Notation</a>. </li> <li> If the specified string is empty, the value will be bound to the context item. </li> </ul>  <p>The <code>$options</code> parameter contains evaluation options, which can either be specified </p>  <ul> <li> as children of an <code>&lt;xquery:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;xquery:options&gt; &lt;xquery:permission value="none"/&gt; &lt;/xquery:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "permission": "none" } </pre>  <p>The following options are available: </p>  <ul> <li> <code>permission</code>: the query will be evaluated with the specified permissions (see <a href="http://docs.basex.org/wiki/User_Management">User Management</a>). </li> <li> <code>timeout</code>: query execution will be interrupted after the specified number of seconds. </li> <li> <code>memory</code>: query execution will be interrupted if the specified number of megabytes will be exceeded. This check works best if only one process is running at the same time. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0001 the query contains <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout or memory constraints.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:eval</xqdoc:name>
      <xqdoc:signature>declare function xquery:eval($query as xs:string, $bindings as map(*)) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Evaluates the supplied <code>$query</code> string as XQuery expression and returns the resulting items.
The evaluated query has its own query context. If a returned node is stored in a database, a main-memory copy will be returned as result, because the referenced database is closed after query execution and will not be accessible anymore.
Variables and context items can be declared via <code>$bindings</code> . The specified keys must be QNames or strings: <ul> <li> If a key is a QName, it will be directly adopted as variable name. </li> <li> It a key is a string, it may be prefixed with a dollar sign. Namespace can be specified using the <a href="http://www.jclark.com/xml/xmlns.htm">Clark Notation</a>. </li> <li> If the specified string is empty, the value will be bound to the context item. </li> </ul>  <p>The <code>$options</code> parameter contains evaluation options, which can either be specified </p>  <ul> <li> as children of an <code>&lt;xquery:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;xquery:options&gt; &lt;xquery:permission value="none"/&gt; &lt;/xquery:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "permission": "none" } </pre>  <p>The following options are available: </p>  <ul> <li> <code>permission</code>: the query will be evaluated with the specified permissions (see <a href="http://docs.basex.org/wiki/User_Management">User Management</a>). </li> <li> <code>timeout</code>: query execution will be interrupted after the specified number of seconds. </li> <li> <code>memory</code>: query execution will be interrupted if the specified number of megabytes will be exceeded. This check works best if only one process is running at the same time. </li> </ul>
        </xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0001 the query contains <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout or memory constraints.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:eval</xqdoc:name>
      <xqdoc:signature>declare function xquery:eval($query as xs:string, $bindings as map(*), $options as item()) as item() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Evaluates <code>$query</code> as updating XQuery expression at runtime.
All updates will be added to the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> of the main query and performed after the evaluation of the main query.</xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0002 the query contains no <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout or memory constraints.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:update</xqdoc:name>
      <xqdoc:signature>declare function xquery:update($query as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Evaluates <code>$query</code> as updating XQuery expression at runtime.
All updates will be added to the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> of the main query and performed after the evaluation of the main query.</xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0002 the query contains no <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout or memory constraints.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:update</xqdoc:name>
      <xqdoc:signature>declare function xquery:update($query as xs:string, $bindings as map(*)) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Evaluates <code>$query</code> as updating XQuery expression at runtime.
All updates will be added to the <a href="http://docs.basex.org/wiki/XQuery_Update#Pending_Update_List">Pending Update List</a> of the main query and performed after the evaluation of the main query.</xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0002 the query contains no <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout or memory constraints.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:update</xqdoc:name>
      <xqdoc:signature>declare function xquery:update($query as xs:string, $bindings as map(*), $options as item()) as item() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Parses the specified <code>$query</code> string as XQuery module and returns information on the resulting query plan (please note that the naming of the expressions in the query plan may change over time). The <code>$options</code> parameters can be specified in two ways: <ul> <li> as children of an <code>&lt;xquery:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;xquery:options&gt; &lt;xquery:compile value="true"/&gt; &lt;/xquery:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "compile": true() } </pre>  <p>The following options are available: </p>  <ul> <li> <code>compile</code>: additionally compiles the query after parsing it. By default, this option is <code>false</code>. </li> <li> <code>plan</code>: returns an XML representation of the internal query plan. By default, this option is <code>true</code>. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xquery:parse</xqdoc:name>
      <xqdoc:signature>declare function xquery:parse($query as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Parses the specified <code>$query</code> string as XQuery module and returns information on the resulting query plan (please note that the naming of the expressions in the query plan may change over time). The <code>$options</code> parameters can be specified in two ways: <ul> <li> as children of an <code>&lt;xquery:options/&gt;</code> element: </li> </ul>  <pre class="brush:xml"> &lt;xquery:options&gt; &lt;xquery:compile value="true"/&gt; &lt;/xquery:options&gt; </pre>  <ul> <li> as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xml"> map { "compile": true() } </pre>  <p>The following options are available: </p>  <ul> <li> <code>compile</code>: additionally compiles the query after parsing it. By default, this option is <code>false</code>. </li> <li> <code>plan</code>: returns an XML representation of the internal query plan. By default, this option is <code>true</code>. </li> </ul>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xquery:parse</xqdoc:name>
      <xqdoc:signature>declare function xquery:parse($query as xs:string, $options as item()) as item() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>query</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Opens <code>$uri</code> as file, evaluates it as XQuery expression at runtime, and returns the resulting items. Database nodes in the result will be copied and returned instead.
The semantics of the <code>$bindings</code> and <code>$options</code> parameters is the same as for <a href="#xquery:eval">xquery:eval</a> .</xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0001 the expression contains <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:invoke</xqdoc:name>
      <xqdoc:signature>declare function xquery:invoke($uri as xs:string) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Opens <code>$uri</code> as file, evaluates it as XQuery expression at runtime, and returns the resulting items. Database nodes in the result will be copied and returned instead.
The semantics of the <code>$bindings</code> and <code>$options</code> parameters is the same as for <a href="#xquery:eval">xquery:eval</a> .</xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0001 the expression contains <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:invoke</xqdoc:name>
      <xqdoc:signature>declare function xquery:invoke($uri as xs:string, $bindings as map(*)) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Opens <code>$uri</code> as file, evaluates it as XQuery expression at runtime, and returns the resulting items. Database nodes in the result will be copied and returned instead.
The semantics of the <code>$bindings</code> and <code>$options</code> parameters is the same as for <a href="#xquery:eval">xquery:eval</a> .</xqdoc:description>
        <xqdoc:error>bxerr:BXXQ0001 the expression contains <a href="http://docs.basex.org/wiki/XQuery_Update#Updating_Expressions">updating expressions</a> .</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0003 insufficient permissions for evaluating the query.</xqdoc:error>
        <xqdoc:error>bxerr:BXXQ0004 query execution exceeded timeout.</xqdoc:error>
        <xqdoc:error>bxerr:FOTY0013 the expression yields function items.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>xquery:invoke</xqdoc:name>
      <xqdoc:signature>declare function xquery:invoke($uri as xs:string, $bindings as map(*), $options as item()) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>bindings</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Similar to <code>fn:trace($expr, $msg)</code> , but instead of a user-defined message, it emits the compile-time type and estimated result size of its argument.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xquery:type</xqdoc:name>
      <xqdoc:signature>declare function xquery:type($expr as item()*) as item()* external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>expr</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://basex.org/modules/xslt</xqdoc:uri>
    <xqdoc:name>xslt.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions and variables to perform XSLT transformations. By default, this module uses Java’s XSLT 1.0 Xalan implementation to transform documents. XSLT 2.0 is used instead if Version 9.x of the <a href="http://www.saxonica.com/">Saxon XSLT Processor</a> ( <code>saxon9he.jar</code> , <code>saxon9pe.jar</code> , <code>saxon9ee.jar</code> ) is found in the classpath. A custom transformer can be specified by overwriting the system property <code>javax.xml.transform.TransformerFactory</code> , as shown in the following Java example:</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="xslt" uri="http://basex.org/modules/xslt"/>
    <xqdoc:namespace prefix="bxerr" uri="http://basex.org/errors"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the name of the applied XSLT processor, or the path to a custom implementation (currently: "Java", "Saxon EE", "Saxon PE", or "Saxon HE").</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xslt:processor</xqdoc:name>
      <xqdoc:signature>declare function xslt:processor() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Returns the supported XSLT version (currently: "1.0" or "2.0"). "Unknown" is returned if a custom implementation was chosen.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xslt:version</xqdoc:name>
      <xqdoc:signature>declare function xslt:version() as xs:string external</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Transforms the document specified by <code>$input</code> , using the XSLT template specified by <code>$stylesheet</code> , and returns the result as node. <code>$input</code> and <code>$stylesheet</code> can be specified as
<ul> <li> <code>xs:string</code>, containing the path to the document, </li> <li> <code>xs:string</code>, containing the document in its string representation, or </li> <li> <code>node()</code>, containing the document itself. </li> </ul>  <p>The <code>$params</code> argument can be used to bind variables to a stylesheet, which can either be specified
</p>  <ul> <li> as children of an <code>&lt;xslt:parameters/&gt;</code> element; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;xslt:parameters&gt; &lt;xslt:key1 value='value1'/&gt; ... &lt;/xslt:parameters&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "key1": "value1", ... } </pre>  <p>Note that only strings are supported when using Saxon (XSLT 2.0). </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xslt:transform</xqdoc:name>
      <xqdoc:signature>declare function xslt:transform($input as item(), $stylesheet as item()) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>stylesheet</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Transforms the document specified by <code>$input</code> , using the XSLT template specified by <code>$stylesheet</code> , and returns the result as node. <code>$input</code> and <code>$stylesheet</code> can be specified as
<ul> <li> <code>xs:string</code>, containing the path to the document, </li> <li> <code>xs:string</code>, containing the document in its string representation, or </li> <li> <code>node()</code>, containing the document itself. </li> </ul>  <p>The <code>$params</code> argument can be used to bind variables to a stylesheet, which can either be specified
</p>  <ul> <li> as children of an <code>&lt;xslt:parameters/&gt;</code> element; e.g.: </li> </ul>  <pre class="brush:xml"> &lt;xslt:parameters&gt; &lt;xslt:key1 value='value1'/&gt; ... &lt;/xslt:parameters&gt; </pre>  <ul> <li> or as map, which contains all key/value pairs: </li> </ul>  <pre class="brush:xquery"> map { "key1": "value1", ... } </pre>  <p>Note that only strings are supported when using Saxon (XSLT 2.0). </p>
        </xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xslt:transform</xqdoc:name>
      <xqdoc:signature>declare function xslt:transform($input as item(), $stylesheet as item(), $params as item()) as node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>stylesheet</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>params</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Transforms the document specified by <code>$input</code> , using the XSLT template specified by <code>$stylesheet</code> , and returns the result as string. The parameters are the same as described for <a href="#xslt:transform">xslt:transform</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xslt:transform-text</xqdoc:name>
      <xqdoc:signature>declare function xslt:transform-text($input as item(), $stylesheet as item()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>stylesheet</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Transforms the document specified by <code>$input</code> , using the XSLT template specified by <code>$stylesheet</code> , and returns the result as string. The parameters are the same as described for <a href="#xslt:transform">xslt:transform</a> .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xslt:transform-text</xqdoc:name>
      <xqdoc:signature>declare function xslt:transform-text($input as item(), $stylesheet as item(), $params as item()) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>input</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>stylesheet</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>params</xqdoc:name>
          <xqdoc:type>item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:10.006+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>http://expath.org/ns/zip</xqdoc:uri>
    <xqdoc:name>zip.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This <a href="http://docs.basex.org/wiki/Module_Library">XQuery Module</a> contains functions to handle ZIP archives. The contents of ZIP files can be extracted and listed, and new archives can be created. The module is based on the <a href="http://expath.org/spec/zip">EXPath ZIP Module</a> . It may soon be replaced by the <a href="http://docs.basex.org/wiki/Archive_Module">Archive Module</a> .</xqdoc:description>
      <xqdoc:author>BaseX Team</xqdoc:author>
      <xqdoc:see>http://docs.basex.org/wiki/Module_Library</xqdoc:see>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="zip" uri="http://expath.org/ns/zip"/>
    <xqdoc:namespace prefix="experr" uri="http://expath.org/ns/error"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts the binary file at <code>$path</code> within the ZIP file located at <code>$uri</code> and returns it as an <code>xs:base64Binary</code> item.</xqdoc:description>
        <xqdoc:error>experr:ZIP0001 the specified path does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:binary-entry</xqdoc:name>
      <xqdoc:signature>declare function zip:binary-entry($uri as xs:string, $path as xs:string) as xs:base64Binary external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts the text file at <code>$path</code> within the ZIP file located at <code>$uri</code> and returns it as an <code>xs:string</code> item.
An optional encoding can be specified via <code>$encoding</code> .</xqdoc:description>
        <xqdoc:error>experr:ZIP0001 the specified path does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:text-entry</xqdoc:name>
      <xqdoc:signature>declare function zip:text-entry($uri as xs:string, $path as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Extracts the text file at <code>$path</code> within the ZIP file located at <code>$uri</code> and returns it as an <code>xs:string</code> item.
An optional encoding can be specified via <code>$encoding</code> .</xqdoc:description>
        <xqdoc:error>experr:ZIP0001 the specified path does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:text-entry</xqdoc:name>
      <xqdoc:signature>declare function zip:text-entry($uri as xs:string, $path as xs:string, $encoding as xs:string) as xs:string external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>encoding</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts the XML file at <code>$path</code> within the ZIP file located at <code>$uri</code> and returns it as a document node.</xqdoc:description>
        <xqdoc:error>experr:FODC0006 the addressed file is not well-formed.</xqdoc:error>
        <xqdoc:error>experr:ZIP0001 the specified path does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:xml-entry</xqdoc:name>
      <xqdoc:signature>declare function zip:xml-entry($uri as xs:string, $path as xs:string) as document-node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Extracts the HTML file at <code>$path</code> within the ZIP file located at <code>$uri</code> and returns it as a document node. The file is converted to XML first if <a href="http://home.ccil.org/~cowan/XML/tagsoup/">Tagsoup</a> is found in the classpath.</xqdoc:description>
        <xqdoc:error>experr:FODC0006 the addressed file is not well-formed, or cannot be converted to correct XML.</xqdoc:error>
        <xqdoc:error>experr:ZIP0001 the specified path does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:html-entry</xqdoc:name>
      <xqdoc:signature>declare function zip:html-entry($uri as xs:string, $path as xs:string) as document-node() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>document-node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Generates an <a href="http://expath.org/spec/zip#spec-file-handling-elements-sect">ZIP XML Representation</a> of the hierarchical structure of the ZIP file located at <code>$uri</code> and returns it as an element node. The file contents are not returned by this function.</xqdoc:description>
        <xqdoc:error>experr:ZIP0001 the specified path does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:entries</xqdoc:name>
      <xqdoc:signature>declare function zip:entries($uri as xs:string) as element(zip:file) external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>uri</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(zip:file)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates a new ZIP archive with the characteristics described by <code>$zip</code> , the <a href="http://expath.org/spec/zip#spec-file-handling-elements-sect">ZIP XML Representation</a> .</xqdoc:description>
        <xqdoc:error>experr:ZIP0001 an addressed file does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0002 entries in the ZIP archive description are unknown, missing, or invalid.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
        <xqdoc:error>experr:Serialization Errors an inlined XML fragment cannot be successfully serialized.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:zip-file</xqdoc:name>
      <xqdoc:signature>declare function zip:zip-file($zip as element(zip:file)) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>zip</xqdoc:name>
          <xqdoc:type>element(zip:file)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Updates an existing ZIP archive or creates a modifed copy, based on the characteristics described by <code>$zip</code> , the <a href="http://expath.org/spec/zip#spec-file-handling-elements-sect">ZIP XML Representation</a> . The <code>$output</code> argument is the URI where the modified ZIP file is copied to.</xqdoc:description>
        <xqdoc:error>experr:ZIP0001 an addressed file does not exist.</xqdoc:error>
        <xqdoc:error>experr:ZIP0002 entries in the ZIP archive description are unknown, missing, or invalid.</xqdoc:error>
        <xqdoc:error>experr:ZIP0003 the operation fails for some other reason.</xqdoc:error>
        <xqdoc:error>experr:Serialization Errors an inlined XML fragment cannot be successfully serialized.</xqdoc:error>
      </xqdoc:comment>
      <xqdoc:name>zip:update-entries</xqdoc:name>
      <xqdoc:signature>declare function zip:update-entries($zip as element(zip:file), $output as xs:string) as empty-sequence() external</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>zip</xqdoc:name>
          <xqdoc:type>element(zip:file)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>output</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.models.generated</xqdoc:uri>
    <xqdoc:name>models.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>map of access functions for entity</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="entity" uri="quodatum.models.generated"/>
    <xqdoc:namespace prefix="cmpx" uri="quodatum.cmpx"/>
    <xqdoc:namespace prefix="pkg" uri="http://expath.org/ns/pkg"/>
    <xqdoc:namespace prefix="comp" uri="urn:quodatum:qd-cmpx:component"/>
    <xqdoc:namespace prefix="wadl" uri="http://wadl.dev.java.net/2009/02"/>
    <xqdoc:namespace prefix="ent" uri="https://github.com/Quodatum/app-doc/entity"/>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.cmpx</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>entity:list</xqdoc:name>
      <xqdoc:type>map(*)</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>entity:fields</xqdoc:name>
      <xqdoc:signature>declare function entity:fields($entity as xs:string) as map(*)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.basex.env</xqdoc:uri>
    <xqdoc:name>basex-env.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>Get information about the BaseX environment, often java properties</xqdoc:description>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>sept 2012</xqdoc:since>
      <xqdoc:custom tag="licence">apache 2</xqdoc:custom>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="env" uri="quodatum.basex.env"/>
    <xqdoc:namespace prefix="sys" uri="java.lang.System"/>
    <xqdoc:namespace prefix="Runtime" uri="java.lang.Runtime"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>env:core</xqdoc:name>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>@return BaseX version string</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>basex-version</xqdoc:name>
      <xqdoc:signature>declare function basex-version() as xs:string</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:return>true if basex version is at least $minver e.g "7.8"</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>basex-minversion</xqdoc:name>
      <xqdoc:signature>declare function basex-minversion($minver as xs:string) as xs:boolean</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>minver</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>getProperty</xqdoc:name>
      <xqdoc:signature>declare function getProperty($name as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>getOption</xqdoc:name>
      <xqdoc:signature>declare function getOption($name as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:name>memory</xqdoc:name>
      <xqdoc:signature>declare function memory() as map(*)</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>useful java properties</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>about</xqdoc:name>
      <xqdoc:signature>declare function about() as map(*)</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>map(*)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.dbtools</xqdoc:uri>
    <xqdoc:name>dbtools.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>tools for databases..</xqdoc:description>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>mar 2013</xqdoc:since>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="dbtools" uri="quodatum.dbtools"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>dbtools:webpath</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>save all in db to zip
no binary yet</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>zip</xqdoc:name>
      <xqdoc:signature>declare function zip($dbname as xs:string) as xs:base64Binary</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dbname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:base64Binary</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>update or create database from file path</xqdoc:description>
        <xqdoc:param>$dbname name of database</xqdoc:param>
        <xqdoc:param>$path file path contain files</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>sync-from-path</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating function sync-from-path($dbname as xs:string, $path as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dbname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>update or create database from file list. After this the database will have a
matching copy of the files on the file system</xqdoc:description>
        <xqdoc:param>$dbname name of database</xqdoc:param>
        <xqdoc:param>$path  base file path where files are relative to en</xqdoc:param>
        <xqdoc:param>$files file names from base</xqdoc:param>
        <xqdoc:param>fn function to apply f(fullsrcpath)-&gt;anotherpath</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>sync-from-files</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating function sync-from-files($dbname as xs:string, $path as xs:string, $files as xs:string*, $ingest as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dbname</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>files</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>ingest</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.web.dice/v3</xqdoc:uri>
    <xqdoc:name>dice.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>dice utils - sort, filter, and serialize as json.
can read parameters from request: sort,start,limit.</xqdoc:description>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>mar 2013</xqdoc:since>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="dice" uri="quodatum.web.dice/v3"/>
    <xqdoc:namespace prefix="restxq" uri="http://exquery.org/ns/restxq"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>dice:default</xqdoc:name>
      <xqdoc:type>map(*)</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>sort items</xqdoc:description>
        <xqdoc:param>sort  field name to sort on optional leading +/-</xqdoc:param>
        <xqdoc:return>sorted items</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>sort</xqdoc:name>
      <xqdoc:signature>declare function sort($items as item()*, $fmap as map(*), $sort as xs:string?) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fmap</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>sort</xqdoc:name>
          <xqdoc:type occurrence="?">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>generate item xml for all fields in map</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>json-flds</xqdoc:name>
      <xqdoc:signature>declare function json-flds($item as item()*, $fldmap as item()*) as element(_)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>item</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fldmap</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(_)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>generate item xml for some fields in map</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>json-flds</xqdoc:name>
      <xqdoc:signature>declare function json-flds($item as element(), $fldmap as map(*), $keys as xs:string*) as element(_)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>item</xqdoc:name>
          <xqdoc:type>element()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fldmap</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>keys</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(_)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>sort, slice, return json using request parameters</xqdoc:description>
        <xqdoc:param>$items sequence of source items</xqdoc:param>
        <xqdoc:param>$opts sort and slice values</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>response</xqdoc:name>
      <xqdoc:signature>declare function response($items as item()*, $entity as map(*), $opts as map(*)) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>opts</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>sort, slice, return json</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>response</xqdoc:name>
      <xqdoc:signature>declare function response($items as item()*, $entity as map(*)) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:return>json for item</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>one</xqdoc:name>
      <xqdoc:signature>declare function one($item as item()*, $entity as map(*)) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>item</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.tools.buildfields</xqdoc:uri>
    <xqdoc:name>entity-gen.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>generate xquery access code for entity definitions</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="bf" uri="quodatum.tools.buildfields"/>
    <xqdoc:namespace prefix="ent" uri="https://github.com/Quodatum/app-doc/entity"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>write generated xquery module from entity xml</xqdoc:description>
        <xqdoc:param>efolder full path to folder with entities e.g. fn:resolve-uri("./data/models")</xqdoc:param>
        <xqdoc:param>dest full name of xqm to create e.g. fn:resolve-uri("models.xqm")</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>write</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating function write($efolder as xs:string, $dest as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>efolder</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>dest</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>generate xquery module for given entities as a string</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>module</xqdoc:name>
      <xqdoc:signature>declare function module($entities as element(ent:entity)*) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entities</xqdoc:name>
          <xqdoc:type occurrence="*">element(ent:entity)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>generate xquery for to return field value in the format: "name":function($_){}</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>accessfn</xqdoc:name>
      <xqdoc:signature>declare function accessfn($f as element(ent:field)) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>element(ent:field)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>generate</xqdoc:name>
      <xqdoc:signature>declare function generate($e as element(ent:entity)) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>e</xqdoc:name>
          <xqdoc:type>element(ent:entity)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:return>sequence of element(entity) items for definitions at path</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>sources</xqdoc:name>
      <xqdoc:signature>declare function sources($path as xs:string) as element(ent:entity)*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(ent:entity)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>build-map</xqdoc:name>
      <xqdoc:signature>declare function build-map($entity as element(ent:entity)) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>element(ent:entity)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>return xml for suitable json serialization for field</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>jsonfn</xqdoc:name>
      <xqdoc:signature>declare function jsonfn($f as element(ent:field)) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>element(ent:field)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>convert xs type to json</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>json-type</xqdoc:name>
      <xqdoc:signature>declare function json-type($xsd as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>xsd</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>declare any namespaces found</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>build-namespaces</xqdoc:name>
      <xqdoc:signature>declare function build-namespaces($entities as element()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entities</xqdoc:name>
          <xqdoc:type occurrence="*">element()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>declare any namespaces found</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>build-modules</xqdoc:name>
      <xqdoc:signature>declare function build-modules($entities as element()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entities</xqdoc:name>
          <xqdoc:type occurrence="*">element()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>build-describe</xqdoc:name>
      <xqdoc:signature>declare function build-describe($entities as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entities</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>escape</xqdoc:name>
      <xqdoc:signature>declare function escape($str as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>str</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>distinct-deep</xqdoc:name>
      <xqdoc:signature>declare function distinct-deep($nodes as node()*) as node()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>nodes</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>is-node-in-sequence-deep-equal</xqdoc:name>
      <xqdoc:signature>declare function is-node-in-sequence-deep-equal($node as node()?, $seq as node()*) as xs:boolean</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>node</xqdoc:name>
          <xqdoc:type occurrence="?">node()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="*">node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.eval</xqdoc:uri>
    <xqdoc:name>eval.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>execute xquery code from string
*** REQUIRES MIXUPDATES = true</xqdoc:description>
      <xqdoc:author>Andy Bunce</xqdoc:author>
      <xqdoc:version>0.1</xqdoc:version>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="eval" uri="quodatum.eval"/>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>eval:def-opts</xqdoc:name>
      <xqdoc:type>map(*)</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>eval list of tasks</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>do-tasks</xqdoc:name>
      <xqdoc:signature>declare function do-tasks($names as xs:string*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>names</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>execute string with update pre basex 8
return sequence head() is elapsed time or -1 if error, tail() is result or error code</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>eval2</xqdoc:name>
      <xqdoc:signature>declare function eval2($xq as xs:string, $timeout as xs:double) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>xq</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>timeout</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>execute string
return sequence head() is elapsed time or -1 if error, tail() is result or error code</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>eval</xqdoc:name>
      <xqdoc:signature>declare function eval($xq as xs:string, $timeout as xs:double) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>xq</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>timeout</xqdoc:name>
          <xqdoc:type>xs:double</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>execute updating expression
return sequence head() is elapsed time or -1 if error, tail() is result or error code</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>update</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating function update($xq as xs:string, $base as xs:string, $options as map(*)) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>xq</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>base</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>options</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.doc.file</xqdoc:uri>
    <xqdoc:name>files.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>file system tools</xqdoc:description>
      <xqdoc:author>Andy Bunce</xqdoc:author>
      <xqdoc:version>0.2</xqdoc:version>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="df" uri="quodatum.doc.file"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>df:base</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>path to webapps with trailing slash</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>default file list skip data</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>df:keep-files</xqdoc:name>
      <xqdoc:signature>declare function df:keep-files($f as xs:string, $s as xs:string) as xs:string?</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>s</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>list of files matching $glob below $src</xqdoc:description>
        <xqdoc:param>$src full path to folder eg "file:/C:/sss/"</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>df:dir</xqdoc:name>
      <xqdoc:signature>declare function df:dir($src as xs:string, $glob as xs:string) as xs:string*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>src</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>glob</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>true path from segment</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>df:webpath</xqdoc:name>
      <xqdoc:signature>declare function df:webpath($path as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>list of all appications</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>df:apps</xqdoc:name>
      <xqdoc:signature>declare function df:apps() as xs:string*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>serialize a file object</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>df:file</xqdoc:name>
      <xqdoc:signature>declare function df:file($dir as item()*, $name as xs:string, $isFolder as xs:boolean) as element(_)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>isFolder</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(_)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>list of files in directory $dir</xqdoc:description>
        <xqdoc:return>json array {name:"gg","path:"aaa/bb",isdir:false}</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>df:list</xqdoc:name>
      <xqdoc:signature>declare function df:list($dir as xs:string) as element(_)*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(_)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>list of files below directory $dir matching pattern</xqdoc:description>
        <xqdoc:return>json array {name:"gg","path:"aaa/bb",isdir:false}</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>df:find</xqdoc:name>
      <xqdoc:signature>declare function df:find($dir as xs:string, $pattern as xs:string) as element(_)*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pattern</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(_)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>get doc at dir as text, if xml convert to string</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>df:read</xqdoc:name>
      <xqdoc:signature>declare function df:read($dir as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>dir</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>test file is text</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>df:is-text-file</xqdoc:name>
      <xqdoc:signature>declare function df:is-text-file($path as item()*) as xs:boolean</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>test for text</xqdoc:description>
        <xqdoc:see>http://stackoverflow.com/questions/2644938/how-to-tell-binary-from-text-files-in-linux</xqdoc:see>
      </xqdoc:comment>
      <xqdoc:name>df:is-text</xqdoc:name>
      <xqdoc:signature>declare function df:is-text($b as xs:base64Binary) as xs:boolean</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>b</xqdoc:name>
          <xqdoc:type>xs:base64Binary</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:boolean</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.txq</xqdoc:uri>
    <xqdoc:name>txq.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>A(nother) templating Engine for XQuery (BaseX specific)
specials:
partial(file,name,sequence)</xqdoc:description>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>sept 2012</xqdoc:since>
      <xqdoc:custom tag="licence">apache 2</xqdoc:custom>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="txq" uri="quodatum.txq"/>
    <xqdoc:namespace prefix="xquery" uri="http://basex.org/modules/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>http://basex.org/modules/xquery</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>template function</xqdoc:description>
        <xqdoc:param>template url to fill</xqdoc:param>
        <xqdoc:param>map name and value to apply</xqdoc:param>
        <xqdoc:return>updated doc from map</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>render</xqdoc:name>
      <xqdoc:signature>declare function render($template as xs:string, $map as map(*)) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>template</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>map</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>template function with wrapping layout</xqdoc:description>
        <xqdoc:param>$layout outer template with $body placeholder to insert $template</xqdoc:param>
        <xqdoc:return>updated doc from map</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>render</xqdoc:name>
      <xqdoc:signature>declare function render($template as xs:string, $map as map(*), $layout as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>template</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>map</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>layout</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="5">
      <xqdoc:comment>
        <xqdoc:description>partial template function: evaluate part for each value in sequence</xqdoc:description>
        <xqdoc:return>updated doc from map</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>partial</xqdoc:name>
      <xqdoc:signature>declare function partial($part as xs:string, $name as item()*, $seq as item()*, $map as item()*, $base as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>part</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>seq</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>map</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>base</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.web.utils4</xqdoc:uri>
    <xqdoc:name>webutils.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>web utils</xqdoc:description>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>oct 2012</xqdoc:since>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="qweb" uri="quodatum.web.utils4"/>
    <xqdoc:namespace prefix="request" uri="http://exquery.org/ns/request"/>
    <xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>http://exquery.org/ns/request</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>map of available dice parameters</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>dice</xqdoc:name>
      <xqdoc:signature>declare function dice() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>status</xqdoc:name>
      <xqdoc:signature>declare function status($code as item()*, $reason as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>code</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>reason</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>REST created http://restpatterns.org/HTTP_Status_Codes/401_-_Unauthorized</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>http-auth</xqdoc:name>
      <xqdoc:signature>declare function http-auth($auth-scheme as item()*, $response as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>auth-scheme</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>response</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>REST created http://restpatterns.org/HTTP_Status_Codes/201_-_Created</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>http-created</xqdoc:name>
      <xqdoc:signature>declare function http-created($location as item()*, $response as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>location</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>response</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>CORS header with download option</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>headers</xqdoc:name>
      <xqdoc:signature>declare function headers($attachment as item()*, $response as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>attachment</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>response</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>download as zip file</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>zip-download</xqdoc:name>
      <xqdoc:signature>declare function zip-download($zipname as item()*, $data as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>zipname</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>data</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>headers for download</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>method</xqdoc:name>
      <xqdoc:signature>declare function method($method as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>method</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>headers for download</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>download-response</xqdoc:name>
      <xqdoc:signature>declare function download-response($method as item()*, $filename as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>method</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>filename</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>transform xml to json serialable xml driven by @type="array" and convention.
all namespaces are removed</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>fixup</xqdoc:name>
      <xqdoc:signature>declare function fixup($n as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>n</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>fixup</xqdoc:name>
      <xqdoc:signature>declare function fixup($n as item()*, $type as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>n</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>strip-ns</xqdoc:name>
      <xqdoc:signature>declare function strip-ns($n as node()) as node()</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>n</xqdoc:name>
          <xqdoc:type>node()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>todo use basex mime</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>svg-response</xqdoc:name>
      <xqdoc:signature>declare function svg-response() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:name>json-response</xqdoc:name>
      <xqdoc:signature>declare function json-response() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>dice.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>get fields of the entity app</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="model" uri="quodatum.models.generated"/>
    <xqdoc:namespace prefix="dice" uri="quodatum.web.dice/v3"/>
    <xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/>
    <xqdoc:namespace prefix="entity" uri="https://github.com/Quodatum/app-doc/entity"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.models.generated</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.web.dice/v3</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>filelist.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="df" uri="quodatum.doc.file"/>
    <xqdoc:namespace prefix="mp3" uri="expkg-zone58.audio.mp3"/>
    <xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc.file</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>expkg-zone58.audio.mp3</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>db</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>path</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>local:tags</xqdoc:name>
      <xqdoc:signature>declare function local:tags($f as xs:string) as element(path)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(path)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>tree-test.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="tree" uri="quodatum.data.tree"/>
    <xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.data.tree</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>base</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>local:test</xqdoc:name>
      <xqdoc:signature>declare function local:test($f as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>local:canonical</xqdoc:name>
      <xqdoc:signature>declare function local:canonical($f as xs:string, $pre as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pre</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.data.tree</xqdoc:uri>
    <xqdoc:name>tree.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>convert paths as strings to tree node structure</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="tree" uri="quodatum.data.tree"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
    <xqdoc:namespace prefix="unit" uri="http://basex.org/modules/unit"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>convert path(s) to tree</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>trees</xqdoc:name>
      <xqdoc:signature>declare function trees($paths as xs:string*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>paths</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>build</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="private"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %private function build($name as xs:string, $items as element(item)*) as element(item)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">element(item)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(item)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>convert path form to tree</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>tree</xqdoc:name>
      <xqdoc:signature>declare function tree($path as xs:string) as element(item)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(item)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>merge</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>merge</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="private"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %private function merge($a1 as element(item)?, $a2 as element(item)?) as element(item)+</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>a1</xqdoc:name>
          <xqdoc:type occurrence="?">element(item)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>a2</xqdoc:name>
          <xqdoc:type occurrence="?">element(item)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="+">element(item)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>smoke test</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>test</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="unit:test"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %unit:test function test() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>cxan.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>cxan info</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="xweb" uri="http://expath.org/ns/webapp"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>cxan</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>xweb:get</xqdoc:name>
      <xqdoc:signature>declare function xweb:get($path as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>repos</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xweb:repos</xqdoc:name>
      <xqdoc:signature>declare function xweb:repos() as element(repo)*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(repo)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>packages in $repo</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xweb:packages</xqdoc:name>
      <xqdoc:signature>declare function xweb:packages($repo as xs:string) as element(pkg)*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>repo</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(pkg)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>package detail</xqdoc:description>
        <xqdoc:param>$pkg e.g "joewiz/xqjson"</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>xweb:package</xqdoc:name>
      <xqdoc:signature>declare function xweb:package($pkg as xs:string) as element(pkg)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pkg</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(pkg)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>package uri</xqdoc:description>
        <xqdoc:param>$pkg e.g "joewiz/xqjson"</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>xweb:version</xqdoc:name>
      <xqdoc:signature>declare function xweb:version($pkg as xs:string, $version as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pkg</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>version</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>generate-app-db.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>Create or update database "doc-doc" from files in the folder data/doc</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="dbtools" uri="quodatum.dbtools"/>
    <xqdoc:namespace prefix="doc" uri="quodatum.doc"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.dbtools</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>task:ingest</xqdoc:name>
      <xqdoc:signature>declare function task:ingest($path as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>generate-model-xqm.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>Update "generated/models.xqm" from data/models</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="bf" uri="quodatum.tools.buildfields"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.tools.buildfields</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>init.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces/>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>load-app-code.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>update database "doc-{$app}" with generated xquery documentation (xqdoc)
for all *,xq and *.xqm files in app</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/>
    <xqdoc:namespace prefix="doc" uri="quodatum.doc"/>
    <xqdoc:namespace prefix="df" uri="quodatum.doc.file"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc.file</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>scan-mp3.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>mp3 dir scan</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
    <xqdoc:namespace prefix="df" uri="quodatum.doc.file"/>
    <xqdoc:namespace prefix="mp3" uri="expkg-zone58.audio.mp3"/>
    <xqdoc:namespace prefix="local" uri="http://www.w3.org/2005/xquery-local-functions"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc.file</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>expkg-zone58.audio.mp3</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>db</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>path</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>local:tags</xqdoc:name>
      <xqdoc:signature>declare function local:tags($f as xs:string) as element(path)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>f</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(path)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>task4.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>sample task does nothing</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.data.tree</xqdoc:uri>
    <xqdoc:name>tree.xq</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>convert path(s) to tree</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="tree" uri="quodatum.data.tree"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
    <xqdoc:namespace prefix="unit" uri="http://basex.org/modules/unit"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>convert path(s) to tree</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>trees</xqdoc:name>
      <xqdoc:signature>declare function trees($a as xs:string*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>a</xqdoc:name>
          <xqdoc:type occurrence="*">xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>build</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="private"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %private function build($name as xs:string, $items as element(item)*) as element(item)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>items</xqdoc:name>
          <xqdoc:type occurrence="*">element(item)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(item)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>convert path form to tree</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>tree</xqdoc:name>
      <xqdoc:signature>declare function tree($path as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>merge</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>merge</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="private"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %private function merge($a1 as element(item)?, $a2 as element(item)?) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>a1</xqdoc:name>
          <xqdoc:type occurrence="?">element(item)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>a2</xqdoc:name>
          <xqdoc:type occurrence="?">element(item)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>smoke test</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>test</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="unit:test"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %unit:test function test() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>xslt.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>transform xml with xslt</xqdoc:description>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="task" uri="https://github.com/Quodatum/app-doc/task"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>xml</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>xslt</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>params</xqdoc:name>
      <xqdoc:type>map(*)</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>xslt2.xqm</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces/>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>xml</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>xslt</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>out</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>layout.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces/>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>body</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>version</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>base</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>static</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>incl-css</xqdoc:name>
      <xqdoc:type occurrence="*">element()</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>incl-js</xqdoc:name>
      <xqdoc:type occurrence="*">element()</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>debug-js</xqdoc:name>
      <xqdoc:type occurrence="*">element()</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>main.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces/>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>static</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions/>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>create-xqdoc.xq</xqdoc:uri>
    <xqdoc:comment>
      <xqdoc:description>This module generates an HTML documentation from all project modules.</xqdoc:description>
      <xqdoc:author>Christian Grün, BaseX Team, 2013</xqdoc:author>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="_" uri="docs"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>docs</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>SCRIPT</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>Script directory.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>IN</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>Input directory. recursively scanned for xq and xqm</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>OUTPUT</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>Output directory.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>TITLE</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>Name of the documentation.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>PRIVATE</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>Also show private variables.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>xs:boolean</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates a page header.</xqdoc:description>
        <xqdoc:param>$level  level depth of target file</xqdoc:param>
        <xqdoc:return>header</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:head</xqdoc:name>
      <xqdoc:signature>declare function _:head($level as xs:integer) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>level</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates a page logo.</xqdoc:description>
        <xqdoc:param>$level  level depth of target file</xqdoc:param>
        <xqdoc:return>div element</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:logo</xqdoc:name>
      <xqdoc:signature>declare function _:logo($level as xs:integer) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>level</xqdoc:name>
          <xqdoc:type>xs:integer</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Creates html pages for the specified modules.</xqdoc:description>
        <xqdoc:param>$modules  module paths and inspected modules</xqdoc:param>
        <xqdoc:return>()</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:create-doc</xqdoc:name>
      <xqdoc:signature>declare function _:create-doc($modules as map(*)) as empty-sequence()</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>modules</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Stores the documentation framework files.</xqdoc:description>
        <xqdoc:param>$modules  module paths and inspected modules</xqdoc:param>
        <xqdoc:return>()</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:create-index</xqdoc:name>
      <xqdoc:signature>declare function _:create-index($modules as map(*)) as empty-sequence()</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>modules</xqdoc:name>
          <xqdoc:type>map(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Writes an HTML page to disk.</xqdoc:description>
        <xqdoc:param>$modules  query modules</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>_:write-html</xqdoc:name>
      <xqdoc:signature>declare function _:write-html($path as xs:string, $html as element(html)) as empty-sequence()</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>html</xqdoc:name>
          <xqdoc:type>element(html)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>docs</xqdoc:uri>
    <xqdoc:name>docs.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>This module generates single HTML documentations.</xqdoc:description>
      <xqdoc:author>Christian Grün, BaseX Team, 2013</xqdoc:author>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="_" uri="docs"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>_:TAGS</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>Supported tags.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>file paths below $src
$src typically from resolve-uri</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>_:files</xqdoc:name>
      <xqdoc:signature>declare function _:files($src as xs:string, $recursive as xs:boolean, $pattern as xs:string) as xs:string*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>src</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>recursive</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>pattern</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>Creates a single HTML page for the specified module.</xqdoc:description>
        <xqdoc:param>$path     path to query module</xqdoc:param>
        <xqdoc:param>$inspect  inspected module</xqdoc:param>
        <xqdoc:param>$private  also show private variables</xqdoc:param>
        <xqdoc:return>body elements</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:create</xqdoc:name>
      <xqdoc:signature>declare function _:create($path as xs:string, $inspect as element(module), $private as xs:boolean) as node()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>inspect</xqdoc:name>
          <xqdoc:type>element(module)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>private</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a description of all variables.</xqdoc:description>
        <xqdoc:param>$inspect  information on the inspected module</xqdoc:param>
        <xqdoc:param>$private  also show private variables</xqdoc:param>
        <xqdoc:return>description of variables</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:variables</xqdoc:name>
      <xqdoc:signature>declare function _:variables($inspect as element(module), $private as xs:boolean) as element()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>inspect</xqdoc:name>
          <xqdoc:type>element(module)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>private</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>Creates a description of all functions.</xqdoc:description>
        <xqdoc:param>$inspect  information on the inspected module</xqdoc:param>
        <xqdoc:param>$private  also show private functions</xqdoc:param>
        <xqdoc:return>description of functions</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:functions</xqdoc:name>
      <xqdoc:signature>declare function _:functions($inspect as element(module), $private as xs:boolean) as element()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>inspect</xqdoc:name>
          <xqdoc:type>element(module)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>private</xqdoc:name>
          <xqdoc:type>xs:boolean</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Lists all supported tags from the specified node.</xqdoc:description>
        <xqdoc:param>$node  root node</xqdoc:param>
        <xqdoc:return>tags</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:tags</xqdoc:name>
      <xqdoc:signature>declare function _:tags($node as element()) as element(tr)*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>node</xqdoc:name>
          <xqdoc:type>element()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(tr)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>Capitalizes the specified string.</xqdoc:description>
        <xqdoc:param>string  string to be capitalized</xqdoc:param>
        <xqdoc:return>resulting string</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>_:capitalize</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="private"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %private function _:capitalize($string as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>string</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.doc.apps</xqdoc:uri>
    <xqdoc:name>apps.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>info about an app</xqdoc:description>
      <xqdoc:custom tag="copyright">quodatum ltd</xqdoc:custom>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>may 2014</xqdoc:since>
      <xqdoc:custom tag="licence">apache 2</xqdoc:custom>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="doc" uri="quodatum.doc.apps"/>
    <xqdoc:namespace prefix="cxan" uri="http://cxan.org/ns/package"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="2">
      <xqdoc:name>filter-apps</xqdoc:name>
      <xqdoc:signature>declare function filter-apps($apps as element()*, $q as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>apps</xqdoc:name>
          <xqdoc:type occurrence="*">element()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>q</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>detail of app</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>app-json</xqdoc:name>
      <xqdoc:signature>declare function app-json($app as xs:string, $resolver as function(*)) as element(item)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>resolver</xqdoc:name>
          <xqdoc:type>function(*)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(item)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.app.config</xqdoc:uri>
    <xqdoc:name>config.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>config stuff</xqdoc:description>
      <xqdoc:author>Andy Bunce</xqdoc:author>
      <xqdoc:version>0.1</xqdoc:version>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="cnf" uri="quodatum.app.config"/>
    <xqdoc:namespace prefix="cmpx" uri="quodatum.cmpx"/>
    <xqdoc:namespace prefix="pkg" uri="http://expath.org/ns/pkg"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.cmpx</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>cnf:package</xqdoc:name>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>cnf:name</xqdoc:name>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>cnf:includes</xqdoc:name>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>cnf:write-log</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating function cnf:write-log($text as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>text</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>empty-sequence()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>config values for render</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>cnf:settings</xqdoc:name>
      <xqdoc:signature>declare function cnf:settings() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.doc</xqdoc:uri>
    <xqdoc:name>doctools.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>manage documentation metadata and generation</xqdoc:description>
      <xqdoc:custom tag="copyright">quodatum ltd</xqdoc:custom>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>may 2014</xqdoc:since>
      <xqdoc:custom tag="licence">apache 2</xqdoc:custom>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="doc" uri="quodatum.doc"/>
    <xqdoc:namespace prefix="web" uri="quodatum.web.utils4"/>
    <xqdoc:namespace prefix="svggen" uri="quodatum.doc.svg"/>
    <xqdoc:namespace prefix="wadl" uri="http://wadl.dev.java.net/2009/02"/>
    <xqdoc:namespace prefix="pkg" uri="http://expath.org/ns/pkg"/>
    <xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/>
    <xqdoc:namespace prefix="comp" uri="https://github.com/Quodatum/app-doc/component"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.web.utils4</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc.svg</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>doc:repopath</xqdoc:name>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>doc:basex-modules</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>e.g "C:\Program Files (x86)\basex\etc\modules\"</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type occurrence="*">xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>full file system path to</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>uri</xqdoc:name>
      <xqdoc:signature>declare function uri($type as xs:string, $app as xs:string, $path as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>list basex module file paths. used as an xqdoc source</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>basex-modules</xqdoc:name>
      <xqdoc:signature>declare function basex-modules() as xs:string*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>xqdoc for a basex system module</xqdoc:description>
        <xqdoc:param>$source file name for module e.g admin.xqm</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>basex-xqdoc</xqdoc:name>
      <xqdoc:signature>declare function basex-xqdoc($module as xs:string) as element(xqdoc:xqdoc)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>module</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>return uri for $path in $app</xqdoc:description>
        <xqdoc:param>$app name of app e.g ."doc"</xqdoc:param>
        <xqdoc:param>$path path</xqdoc:param>
        <xqdoc:return>file based uri e.g ""</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>app-uri</xqdoc:name>
      <xqdoc:signature>declare function app-uri($app as xs:string, $path as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description/>
        <xqdoc:return>uri for $path in $app static files</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>static-uri</xqdoc:name>
      <xqdoc:signature>declare function static-uri($app as xs:string, $path as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>xqdoc as xml or html</xqdoc:description>
        <xqdoc:param>$app name of the app e.g "doc"</xqdoc:param>
        <xqdoc:param>$path path to the source an app uri</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>xqdoc</xqdoc:name>
      <xqdoc:signature>declare function xqdoc($type as xs:string, $path as xs:string) as element(xqdoc:xqdoc)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>get xqdoc for path, parse descriptions, trap errors</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xqdoc_</xqdoc:name>
      <xqdoc:signature>declare function xqdoc_($path as xs:string) as element(xqdoc:xqdoc)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>xqdoc for restxq functions in module doc</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>rxq-fns</xqdoc:name>
      <xqdoc:signature>declare function rxq-fns($xqd as element(xqdoc:xqdoc)) as element(xqdoc:function)*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>xqd</xqdoc:name>
          <xqdoc:type>element(xqdoc:xqdoc)</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">element(xqdoc:function)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>component-render</xqdoc:name>
      <xqdoc:signature>declare function component-render($fmt as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:name>component-render</xqdoc:name>
      <xqdoc:signature>declare function component-render($fmt as xs:string, $doc as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>doc</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>html report for components referenced in package</xqdoc:description>
        <xqdoc:param>$pkg package or component</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>components-html</xqdoc:name>
      <xqdoc:signature>declare function components-html($pkg as element()) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pkg</xqdoc:name>
          <xqdoc:type>element()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>node()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>return html report for WADL entries supplied</xqdoc:description>
        <xqdoc:param>$root leading path segment to be dropped  from report</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>wadl-html</xqdoc:name>
      <xqdoc:signature>declare function wadl-html($wadl as item()*, $root as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>wadl</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>root</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>wadl entries with paths starting at root</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>wadl-under</xqdoc:name>
      <xqdoc:signature>declare function wadl-under($wadl as element(wadl:application), $root as xs:string) as element(wadl:application)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>wadl</xqdoc:name>
          <xqdoc:type>element(wadl:application)</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>root</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(wadl:application)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>templates</xqdoc:name>
      <xqdoc:signature>declare function templates($app as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.doc.rest</xqdoc:uri>
    <xqdoc:name>rxq-doc.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>A RESTXQ interface for documentation</xqdoc:description>
      <xqdoc:author>Andy Bunce</xqdoc:author>
      <xqdoc:version>0.1</xqdoc:version>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="dr" uri="quodatum.doc.rest"/>
    <xqdoc:namespace prefix="cmpx" uri="quodatum.cmpx"/>
    <xqdoc:namespace prefix="cnf" uri="quodatum.app.config"/>
    <xqdoc:namespace prefix="doc" uri="quodatum.doc"/>
    <xqdoc:namespace prefix="txq" uri="quodatum.txq"/>
    <xqdoc:namespace prefix="dice" uri="quodatum.web.dice/v3"/>
    <xqdoc:namespace prefix="web" uri="quodatum.web.utils4"/>
    <xqdoc:namespace prefix="entity" uri="quodatum.models.generated"/>
    <xqdoc:namespace prefix="qsr" uri="quodatum.system.rest"/>
    <xqdoc:namespace prefix="apps" uri="quodatum.doc.apps"/>
    <xqdoc:namespace prefix="df" uri="quodatum.doc.file"/>
    <xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/>
    <xqdoc:namespace prefix="restxq" uri="http://exquery.org/ns/restxq"/>
    <xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.cmpx</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.app.config</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.txq</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.web.dice/v3</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.web.utils4</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.models.generated</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.system.rest</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc.apps</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.doc.file</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>http://exquery.org/ns/restxq</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>The doc home page as html. The UI entry point.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>doc</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:media-type">
          <xqdoc:literal type="xs:string">text/html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:version">
          <xqdoc:literal type="xs:string">5.0</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc") %output:method("html") %output:media-type("text/html") %output:version("5.0") function doc() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>Initialise/repair system by runnning tasks 1-3</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>doc-init</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/init</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:version">
          <xqdoc:literal type="xs:string">5.0</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:media-type">
          <xqdoc:literal type="xs:string">text/html</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating %restxq:GET %restxq:path("doc/init") %output:method("html") %output:version("5.0") %output:media-type("text/html") function doc-init() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>List of apps found on file system.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>apps</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/app</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">q</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$q}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/app") %restxq:query-param("q", "{$q}") %output:method("json") function apps($q as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>q</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>detail of app found on file system.</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>app</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/app/{$app}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/app/{$app}") %output:method("json") function app($app as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>detail of a task .</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>task</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/task/{$task}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/task/{$task}") %output:method("json") function task($task as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>task</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>default entity lister</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>entity-data</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/{$entity}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">q</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$q}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/{$entity}") %restxq:query-param("q", "{$q}") %output:method("json") function entity-data($entity as xs:string, $q as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>q</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>default data item lister</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>data-item</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/{$entity}/{$name}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/{$entity}/{$name}") %output:method("json") function data-item($entity as xs:string, $name as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>list of direct children of $path as json array</xqdoc:description>
        <xqdoc:param>$path path to list the children of eg "/app"</xqdoc:param>
        <xqdoc:return>json [ {name:"gg","path:"aaa/bb",isdir:false},{}..]</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>files</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/file/list</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">path</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$path}</xqdoc:literal>
          <xqdoc:literal type="xs:string">/</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">search</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$search}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/file/list") %restxq:query-param("path", "{$path}", "/") %restxq:query-param("search", "{$search}", "") %output:method("json") function files($path as item()*, $search as item()*) as element(json)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>search</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(json)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>list of files matching pattern as json array</xqdoc:description>
        <xqdoc:param>$path eg "/app"</xqdoc:param>
        <xqdoc:return>json [ {name:"gg","path:"aaa/bb",isdir:false},{}..]</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>find</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/file/find</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">pattern</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$pattern}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/file/find") %restxq:query-param("pattern", "{$pattern}", "") %output:method("json") function find($pattern as item()*) as element(json)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pattern</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(json)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>get contents of file.</xqdoc:description>
        <xqdoc:param>$path e.g. "/app/doc/readme.md"</xqdoc:param>
        <xqdoc:return>text resprestation of file</xqdoc:return>
      </xqdoc:comment>
      <xqdoc:name>read</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/file/read</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">path</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$path}</xqdoc:literal>
          <xqdoc:literal type="xs:string">/</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">text</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/file/read") %restxq:query-param("path", "{$path}", "/") %output:method("text") function read($path as item()*) as xs:string?</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="?">xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>search apps</xqdoc:description>
        <xqdoc:custom tag="TODO">fix this</xqdoc:custom>
      </xqdoc:comment>
      <xqdoc:name>search</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/search</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">q</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$q}</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/search") %output:method("json") %restxq:query-param("q", "{$q}") function search($q as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>q</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="4">
      <xqdoc:comment>
        <xqdoc:description>show xqdoc for $path in $app</xqdoc:description>
        <xqdoc:param>fmt: 'xml' or 'html'</xqdoc:param>
        <xqdoc:param>path:  eg 'admin.xqm'</xqdoc:param>
        <xqdoc:param>type:  eg 'app' 'static' 'basex' 'repo'</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>xqdoc</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/app/{$app}/view/xqdoc</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">path</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$path}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">fmt</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$fmt}</xqdoc:literal>
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">type</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$type}</xqdoc:literal>
          <xqdoc:literal type="xs:string">app</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/app/{$app}/view/xqdoc") %restxq:query-param("path", "{$path}", "") %restxq:query-param("fmt", "{$fmt}", "html") %restxq:query-param("type", "{$type}", "app") function xqdoc($type as xs:string, $app as xs:string, $path as xs:string, $fmt as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>show xqdoc for rest api</xqdoc:description>
        <xqdoc:custom tag="TODO">permission</xqdoc:custom>
      </xqdoc:comment>
      <xqdoc:name>wadl-full</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/wadl</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">fmt</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$fmt}</xqdoc:literal>
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/wadl") %output:method("html") %restxq:query-param("fmt", "{$fmt}", "html") function wadl-full($fmt as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>show xqdoc for rest api</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>wadl</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/app/{$app}/view/wadl</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">path</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$path}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">fmt</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$fmt}</xqdoc:literal>
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/app/{$app}/view/wadl") %output:method("html") %restxq:query-param("path", "{$path}", "") %restxq:query-param("fmt", "{$fmt}", "html") function wadl($app as xs:string, $path as xs:string, $fmt as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>show client  components from the package.xml</xqdoc:description>
        <xqdoc:custom tag="parameter">$fmt xml or html</xqdoc:custom>
      </xqdoc:comment>
      <xqdoc:name>client-components</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/app/{$app}/view/component</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">fmt</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$fmt}</xqdoc:literal>
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/app/{$app}/view/component") %restxq:query-param("fmt", "{$fmt}", "html") %output:method("html") function client-components($app as xs:string, $fmt as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>show list templates</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>templates</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/app/{$app}/view/template</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/app/{$app}/view/template") %output:method("json") function templates($app as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>list all components in catalog</xqdoc:description>
        <xqdoc:param>$fmt "xml" or "html"</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>browser-list</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/components/browser</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">fmt</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$fmt}</xqdoc:literal>
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/components/browser") %output:method("html") %restxq:query-param("fmt", "{$fmt}", "html") function browser-list($fmt as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>names of builtin basex xquery modules</xqdoc:description>
        <xqdoc:param>$fmt "xml" or "html"</xqdoc:param>
      </xqdoc:comment>
      <xqdoc:name>basex-list</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/components/basex</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/components/basex") %output:method("json") function basex-list() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="3">
      <xqdoc:comment>
        <xqdoc:description>get xquery documentation for $path and $type</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>xq-modules</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/xqdoc</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">path</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$path}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">fmt</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$fmt}</xqdoc:literal>
          <xqdoc:literal type="xs:string">html</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">type</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$type}</xqdoc:literal>
          <xqdoc:literal type="xs:string">basex</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/xqdoc") %restxq:query-param("path", "{$path}", "") %restxq:query-param("fmt", "{$fmt}", "html") %restxq:query-param("type", "{$type}", "basex") function xq-modules($path as xs:string, $fmt as xs:string, $type as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>path</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>fmt</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>type</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>validate server xml against server xsd</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>validate</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/validate</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">xml</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$xml}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">schema</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$schema}</xqdoc:literal>
          <xqdoc:literal type="xs:string"/>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/validate") %restxq:query-param("xml", "{$xml}", "") %restxq:query-param("schema", "{$schema}", "") %output:method("json") function validate($xml as xs:string, $schema as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>xml</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>schema</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>status info json</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>status</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">/doc/status</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %output:method("json") %restxq:GET %restxq:path("/doc/status") function status() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>html rendering</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>render</xqdoc:name>
      <xqdoc:signature>declare function render($template as item()*, $map as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>template</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>map</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.model.rest</xqdoc:uri>
    <xqdoc:name>rxq-entity.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>entity rest interface 
defines urls below doc/data/entity/</xqdoc:description>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>jun 2013</xqdoc:since>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="model-rest" uri="quodatum.model.rest"/>
    <xqdoc:namespace prefix="entity" uri="quodatum.models.generated"/>
    <xqdoc:namespace prefix="dice" uri="quodatum.web.dice/v3"/>
    <xqdoc:namespace prefix="web" uri="quodatum.web.utils4"/>
    <xqdoc:namespace prefix="ent" uri="https://github.com/Quodatum/app-doc/entity"/>
    <xqdoc:namespace prefix="restxq" uri="http://exquery.org/ns/restxq"/>
    <xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.models.generated</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.web.dice/v3</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.web.utils4</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>model-rest:models</xqdoc:name>
      <xqdoc:type occurrence="*">item()</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>return list of entities</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>model-list</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/entity</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">q</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$q}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/entity") %restxq:query-param("q", "{$q}") %output:method("json") function model-list($q as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>q</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>details of the entity $entity</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>model</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/entity/{$entity}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/entity/{$entity}") %output:method("json") function model($entity as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>field list for model</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>field-list</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">doc/data/entity/{$entity}/field</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("doc/data/entity/{$entity}/field") %output:method("json") function field-list($entity as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>entity</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.system.rest</xqdoc:uri>
    <xqdoc:name>rxq-system.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>A RESTXQ interface for common system functionality
includes tasks</xqdoc:description>
      <xqdoc:custom tag="copyright">Quodatum Ltd</xqdoc:custom>
      <xqdoc:custom tag="license">Apache 2</xqdoc:custom>
      <xqdoc:author>Andy Bunce</xqdoc:author>
      <xqdoc:version>0.1</xqdoc:version>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="dr" uri="quodatum.system.rest"/>
    <xqdoc:namespace prefix="xqdoc" uri="http://www.xqdoc.org/1.0"/>
    <xqdoc:namespace prefix="rest" uri="http://exquery.org/ns/restxq"/>
    <xqdoc:namespace prefix="eval" uri="quodatum.eval"/>
    <xqdoc:namespace prefix="restxq" uri="http://exquery.org/ns/restxq"/>
    <xqdoc:namespace prefix="output" uri="http://www.w3.org/2010/xslt-xquery-serialization"/>
    <xqdoc:namespace prefix="ann" uri="http://www.w3.org/2012/xquery"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>http://exquery.org/ns/restxq</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.eval</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>dr:db</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>dr:state</xqdoc:name>
      <xqdoc:type>element(state)</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>dr:tasks</xqdoc:name>
      <xqdoc:type occurrence="*">element(xqdoc:xqdoc)</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>list tasks</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>listtasks</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">/doc/task</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %restxq:GET %restxq:path("/doc/task") %output:method("json") function listtasks() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>about a task</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>atask2</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">json</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">/doc/task/{$task}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">app</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$app}</xqdoc:literal>
          <xqdoc:literal type="xs:string">doc</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %output:method("json") %restxq:GET %restxq:path("/doc/task/{$task}") %restxq:query-param("app", "{$app}", "doc") function atask2($app as xs:string, $task as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>task</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="2">
      <xqdoc:comment>
        <xqdoc:description>run a task</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>dotask2</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">text</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:POST"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">/doc/task/{$task}</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:query-param">
          <xqdoc:literal type="xs:string">app</xqdoc:literal>
          <xqdoc:literal type="xs:string">{$app}</xqdoc:literal>
          <xqdoc:literal type="xs:string">doc</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating %output:method("text") %restxq:POST %restxq:path("/doc/task/{$task}") %restxq:query-param("app", "{$app}", "doc") function dotask2($app as xs:string, $task as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
        <xqdoc:parameter>
          <xqdoc:name>task</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>get-base</xqdoc:name>
      <xqdoc:signature>declare function get-base($app as xs:string) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>app</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>xquery src for name</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>get-task</xqdoc:name>
      <xqdoc:signature>declare function get-task($name as item()*) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>ping incr counter</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>dopost</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="updating"/>
        <xqdoc:annotation name="restxq:POST"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">/doc/ping</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">text</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %updating %restxq:POST %restxq:path("/doc/ping") %output:method("text") function dopost() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>ping incr counter</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>dostate</xqdoc:name>
      <xqdoc:annotations>
        <xqdoc:annotation name="output:method">
          <xqdoc:literal type="xs:string">text</xqdoc:literal>
        </xqdoc:annotation>
        <xqdoc:annotation name="restxq:GET"/>
        <xqdoc:annotation name="restxq:path">
          <xqdoc:literal type="xs:string">/doc/ping</xqdoc:literal>
        </xqdoc:annotation>
      </xqdoc:annotations>
      <xqdoc:signature>declare %output:method("text") %restxq:GET %restxq:path("/doc/ping") function dostate() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="0">
      <xqdoc:comment>
        <xqdoc:description>all task names</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>tasks</xqdoc:name>
      <xqdoc:signature>declare function tasks() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.schema.rest</xqdoc:uri>
    <xqdoc:name>schema.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>schema stuff</xqdoc:description>
      <xqdoc:author>Andy Bunce</xqdoc:author>
      <xqdoc:version>0.1</xqdoc:version>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="xsd" uri="quodatum.schema.rest"/>
    <xqdoc:namespace prefix="xerces" uri="com.sun.org.apache.xerces.internal.impl.Version"/>
    <xqdoc:namespace prefix="Source" uri="javax.xml.transform.Source"/>
    <xqdoc:namespace prefix="StreamSource" uri="javax.xml.transform.stream.StreamSource"/>
    <xqdoc:namespace prefix="Schema" uri="javax.xml.validation.Schema"/>
    <xqdoc:namespace prefix="SchemaFactory" uri="javax.xml.validation.SchemaFactory"/>
    <xqdoc:namespace prefix="Validator" uri="javax.xml.validation.Validator"/>
    <xqdoc:namespace prefix="File" uri="java:java.io.File"/>
  </xqdoc:namespaces>
  <xqdoc:imports/>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>xsd:xproc</xqdoc:name>
      <xqdoc:type>xs:string</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="0">
      <xqdoc:name>xerces-version</xqdoc:name>
      <xqdoc:signature>declare function xerces-version() as item()*</xqdoc:signature>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>xproc</xqdoc:name>
      <xqdoc:signature>declare function xproc($src as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>src</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>xproc2</xqdoc:name>
      <xqdoc:signature>declare function xproc2($src as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>src</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="library">
    <xqdoc:uri>quodatum.doc.svg</xqdoc:uri>
    <xqdoc:name>svggen.xqm</xqdoc:name>
    <xqdoc:comment>
      <xqdoc:description>manage documentation svg generation</xqdoc:description>
      <xqdoc:custom tag="copyright">quodatum ltd</xqdoc:custom>
      <xqdoc:author>andy bunce</xqdoc:author>
      <xqdoc:since>may 2014</xqdoc:since>
      <xqdoc:custom tag="licence">apache 2</xqdoc:custom>
    </xqdoc:comment>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="svggen" uri="quodatum.doc.svg"/>
    <xqdoc:namespace prefix="dotml" uri="http://www.martin-loetzsch.de/DOTML"/>
    <xqdoc:namespace prefix="ex-graphviz" uri="http://expkg-zone58.github.io/ex-graphviz"/>
    <xqdoc:namespace prefix="comp" uri="https://github.com/Quodatum/app-doc/component"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>http://www.martin-loetzsch.de/DOTML</xqdoc:uri>
    </xqdoc:import>
    <xqdoc:import type="library">
      <xqdoc:uri>http://expkg-zone58.github.io/ex-graphviz</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables>
    <xqdoc:variable>
      <xqdoc:name>svggen:simple</xqdoc:name>
      <xqdoc:comment>
        <xqdoc:description>example dotml</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:type>element()</xqdoc:type>
    </xqdoc:variable>
    <xqdoc:variable>
      <xqdoc:name>svggen:cmps</xqdoc:name>
      <xqdoc:type>element()</xqdoc:type>
    </xqdoc:variable>
  </xqdoc:variables>
  <xqdoc:functions>
    <xqdoc:function arity="1">
      <xqdoc:name>name</xqdoc:name>
      <xqdoc:signature>declare function name($name as xs:string) as xs:string</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>name</xqdoc:name>
          <xqdoc:type>xs:string</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>xs:string</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>dump</xqdoc:name>
      <xqdoc:signature>declare function dump($item as item()*) as item()*</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>item</xqdoc:name>
          <xqdoc:type occurrence="*">item()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type occurrence="*">item()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:name>generate</xqdoc:name>
      <xqdoc:signature>declare function generate($pkg as element()) as element()</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pkg</xqdoc:name>
          <xqdoc:type>element()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element()</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
    <xqdoc:function arity="1">
      <xqdoc:comment>
        <xqdoc:description>svg graph for components referenced in package</xqdoc:description>
      </xqdoc:comment>
      <xqdoc:name>components</xqdoc:name>
      <xqdoc:signature>declare function components($pkg as element()) as element(svg)</xqdoc:signature>
      <xqdoc:parameters>
        <xqdoc:parameter>
          <xqdoc:name>pkg</xqdoc:name>
          <xqdoc:type>element()</xqdoc:type>
        </xqdoc:parameter>
      </xqdoc:parameters>
      <xqdoc:return>
        <xqdoc:type>element(svg)</xqdoc:type>
      </xqdoc:return>
    </xqdoc:function>
  </xqdoc:functions>
</xqdoc:xqdoc>
<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0">
  <xqdoc:control>
    <xqdoc:date>2016-04-12T21:25:14.07+01:00</xqdoc:date>
    <xqdoc:version>1.1</xqdoc:version>
  </xqdoc:control>
  <xqdoc:module type="main">
    <xqdoc:uri>test.xq</xqdoc:uri>
  </xqdoc:module>
  <xqdoc:namespaces>
    <xqdoc:namespace prefix="entity" uri="quodatum.models.generated"/>
  </xqdoc:namespaces>
  <xqdoc:imports>
    <xqdoc:import type="library">
      <xqdoc:uri>quodatum.models.generated</xqdoc:uri>
    </xqdoc:import>
  </xqdoc:imports>
  <xqdoc:variables/>
  <xqdoc:functions/>
</xqdoc:xqdoc>
</foo>